//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) Hestia 2021 - PBL & TNO                                        //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//       In deze configuratiefile worden de brondata geconfigureerd.                    //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

container Vastgoed
{
	unit<uint8> NieuwbouwWoningType: nrofrows = 4, IsHidden = "True"
	{
		attribute<string> name     : [ 'rijtjeswoning', 'appartement', 'twee_onder_1_kap', 'vrijstaand'];
	}
	parameter<string> Scenario := Invoer/DefaultInstellingen/Basis/RuimtelijkeOntwikkelingScenario, IsHidden = "True"; //Keuze uit:
		//WLO_hoog_DichtBij, WLO_hoog_EnZoVoort, WLO_hoog_Ruim, WLO_hoog_Verbonden
		//WLO_laag_DichtBij, WLO_laag_EnZoVoort, WLO_laag_Ruim, WLO_laag_Verbonden
		
	unit<uint8> Periode := subset(Classifications/Periode/HasNieuwbouw)
	{
		attribute<string>          name         := Classifications/Periode/name[nr_OrgEntity], DialogType = "LabelText";
		attribute<string>          label        := name;
		attribute<string>          RO_directory := Classifications/Periode/RO_directory[nr_OrgEntity];
		attribute<yr>              nrJaren      := Classifications/Periode/nrJaren[nr_OrgEntity];
		attribute<Classifications/BouwjaarWoning> BouwjaarKlasse_rel : [ 11, 12, 13];

		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
	}
	unit<uint8> VastgoedFiles: nrofrows = 2
	{
		attribute<string> name     : [ 'Bouw', 'Sloop'];
	}
	
	container VastgoedPeriode := for_each_ne(
		 Periode/name
		,'LeesVastgoed(Periode/V/' + Periode/name + ')'
		);
	
	template LeesVastgoed
	{
		//case parameters
		parameter<Periode>          Periode_rel;
		//end case parameters
		
		container Nieuwbouw :=
			for_each_ndva(
				 NieuwbouwWoningType/name
				,Geography/rdc_grids/m100
				,float32
				,'%HestiaDataDir%/RO/' + '20210906_RO_' + Scenario + '/Bouw_' + Periode/name[Periode_rel] + '/' + NieuwbouwWoningType/name + '.tif'
			);
		container NieuwbouwPerJaar
		{
			unit<uint32> BO_tussenwoning := subset(Nieuwbouw/rijtjeswoning > 0f && isdefined(Geography/rdc_grids/m100/Buurt_rel))
			{
				attribute<rdc_meter>                  geometry       := Geography/rdc_grids/m100/Point[nr_OrgEntity];
				attribute<nrAsl>                      nr_aansl       := float64(Nieuwbouw/rijtjeswoning[nr_OrgEntity] * 0.70f) * 1.0[nrAsl]; //Gemiddeld 70% tussenwoningen op aandeel rijwoningen in BAG 2021-01-01
				attribute<Classifications/WoningType> Woningtype_rel := const(Classifications/WoningType/V/tussenwoning,.);
			}
			unit<uint32> BO_hoekwoning := subset(Nieuwbouw/rijtjeswoning > 0f && isdefined(Geography/rdc_grids/m100/Buurt_rel))
			{
				attribute<rdc_meter>                  geometry       := Geography/rdc_grids/m100/Point[nr_OrgEntity];
				attribute<nrAsl>                      nr_aansl       := float64(Nieuwbouw/rijtjeswoning[nr_OrgEntity] * 0.30f) * 1.0[nrAsl]; //Gemiddeld 30% hoekwoningen op aandeel rijwoningen in BAG 2021-01-01
				attribute<Classifications/WoningType> Woningtype_rel := const(Classifications/WoningType/V/hoekwoning,.);
			}
			unit<uint32> BO_meergezinspand_laag_midden := subset(Nieuwbouw/appartement > 0f && isdefined(Geography/rdc_grids/m100/Buurt_rel))
			{
				attribute<rdc_meter>                  geometry       := Geography/rdc_grids/m100/Point[nr_OrgEntity];
				attribute<nrAsl>                      nr_aansl       := float64(Nieuwbouw/appartement[nr_OrgEntity] * 0.52f) * 1.0[nrAsl]; //Gemiddeld 52% appartement laag/midden op aandeel appartementen in BAG 2021-01-01
				attribute<Classifications/WoningType> Woningtype_rel := const(Classifications/WoningType/V/meergezinspand_laag_midden,.);
			}
			unit<uint32> BO_meergezinspand_hoog := subset(Nieuwbouw/appartement > 0f && isdefined(Geography/rdc_grids/m100/Buurt_rel))
			{
				attribute<rdc_meter>                  geometry       := Geography/rdc_grids/m100/Point[nr_OrgEntity];
				attribute<nrAsl>                      nr_aansl       := float64(Nieuwbouw/appartement[nr_OrgEntity] * 0.48f) * 1.0[nrAsl]; //Gemiddeld 48% appartemen hoog op aandeel appartementen in BAG 2021-01-01
				attribute<Classifications/WoningType> Woningtype_rel := const(Classifications/WoningType/V/meergezinspand_hoog,.);
			}
			unit<uint32> BO_vrijstaand := subset(Nieuwbouw/vrijstaand > 0f && isdefined(Geography/rdc_grids/m100/Buurt_rel))
			{
				attribute<rdc_meter>                  geometry       := Geography/rdc_grids/m100/Point[nr_OrgEntity];
				attribute<nrAsl>                      nr_aansl       := float64(Nieuwbouw/vrijstaand[nr_OrgEntity]) * 1.0[nrAsl];
				attribute<Classifications/WoningType> Woningtype_rel := const(Classifications/WoningType/V/vrijstaand,.);
			}
			unit<uint32> BO_twee_onder_1_kap := subset(Nieuwbouw/twee_onder_1_kap > 0f && isdefined(Geography/rdc_grids/m100/Buurt_rel))
			{
				attribute<rdc_meter>                  geometry       := Geography/rdc_grids/m100/Point[nr_OrgEntity];
				attribute<nrAsl>                      nr_aansl       := float64(Nieuwbouw/twee_onder_1_kap[nr_OrgEntity]) * 1.0[nrAsl];
				attribute<Classifications/WoningType> Woningtype_rel := const(Classifications/WoningType/V/twee_onder_1_kap,.);
			}

			unit<uint32> BO_perjaar_base := union_unit(BO_tussenwoning,BO_hoekwoning,BO_meergezinspand_laag_midden,BO_meergezinspand_hoog,BO_vrijstaand,BO_twee_onder_1_kap)
			{
				attribute<rdc_meter>                     geometry       := union_data(.,BO_tussenwoning/geometry,BO_hoekwoning/geometry,BO_meergezinspand_laag_midden/geometry,BO_meergezinspand_hoog/geometry,BO_vrijstaand/geometry,BO_twee_onder_1_kap/geometry);
				attribute<EigendomNieuwbouw/Class/corop> Corop_rel      := Point_in_polygon(Geometry, EigendomNieuwbouw/Class/corop/geometry);
				attribute<nrAsl>                         nr_aansl       := union_data(.,BO_tussenwoning/nr_aansl,BO_hoekwoning/nr_aansl,BO_meergezinspand_laag_midden/nr_aansl,BO_meergezinspand_hoog/nr_aansl,BO_vrijstaand/nr_aansl,BO_twee_onder_1_kap/nr_aansl);
				attribute<Classifications/WoningType>    Woningtype_rel := union_data(.,BO_tussenwoning/Woningtype_rel,BO_hoekwoning/Woningtype_rel,BO_meergezinspand_laag_midden/Woningtype_rel,BO_meergezinspand_hoog/Woningtype_rel,BO_vrijstaand/Woningtype_rel,BO_twee_onder_1_kap/Woningtype_rel);
			}

			unit<uint32> BO_perjaar_koop := BO_perjaar_base
			{
				attribute<Classifications/Eigendom> Eigendom_rel := const(Classifications/Eigendom/v/Koop,.);
				attribute<nrAsl>                    nr_aansl     := ='BO_perjaar_base/nr_aansl * EigendomNieuwbouw/years/'+Periode/name[Periode_rel]+'/JaarData/NieuwbouwData/R_koop[Corop_rel]';
			}
			unit<uint32> BO_perjaar_wooncorp := BO_perjaar_base
			{
				attribute<Classifications/Eigendom> Eigendom_rel := const(Classifications/Eigendom/v/wooncorp,.);
				attribute<nrAsl>                    nr_aansl     := ='BO_perjaar_base/nr_aansl * EigendomNieuwbouw/years/'+Periode/name[Periode_rel]+'/JaarData/NieuwbouwData/R_wooncorp[Corop_rel]';
			}
			unit<uint32> BO_perjaar_parthuur := BO_perjaar_base
			{
				attribute<Classifications/Eigendom> Eigendom_rel := const(Classifications/Eigendom/v/parthuur,.);
				attribute<nrAsl>                    nr_aansl     := ='BO_perjaar_base/nr_aansl * EigendomNieuwbouw/years/'+Periode/name[Periode_rel]+'/JaarData/NieuwbouwData/R_parthuur[Corop_rel]';
			}

			unit<uint32> BO_perjaar := union_unit(BO_perjaar_koop,BO_perjaar_wooncorp,BO_perjaar_parthuur)
			{
				attribute<rdc_meter>                  geometry       := union_data(.,BO_perjaar_koop/geometry      ,BO_perjaar_wooncorp/geometry      ,BO_perjaar_parthuur/geometry      );
				attribute<Classifications/Eigendom>   Eigendom_rel   := union_data(.,BO_perjaar_koop/Eigendom_rel  ,BO_perjaar_wooncorp/Eigendom_rel  ,BO_perjaar_parthuur/Eigendom_rel  );
				attribute<nrAsl>                      nr_aansl       := union_data(.,BO_perjaar_koop/nr_aansl      ,BO_perjaar_wooncorp/nr_aansl      ,BO_perjaar_parthuur/nr_aansl      );
				attribute<Classifications/WoningType> Woningtype_rel := union_data(.,BO_perjaar_koop/Woningtype_rel,BO_perjaar_wooncorp/Woningtype_rel,BO_perjaar_parthuur/Woningtype_rel);
			}

		}
		container ResterendFactor :=
			for_each_ndva(
				 'Data_'+NieuwbouwWoningType/name
				,Geography/rdc_grids/m100
				,float32
				,'%HestiaDataDir%/RO/' + '20210906_RO_' + Scenario + '/Sloop_' + Periode/name[Periode_rel] + '/' + NieuwbouwWoningType/name + '.tif'
			)
		{
			attribute<ratio> vrijstaand                 (Geography/rdc_grids/m100) := float64(Data_vrijstaand);
			attribute<ratio> twee_onder_1_kap           (Geography/rdc_grids/m100) := float64(Data_twee_onder_1_kap);
			attribute<ratio> geen_woonpand              (Geography/rdc_grids/m100) := const(0.0[ratio],Geography/rdc_grids/m100);
			attribute<ratio> hoekwoning                 (Geography/rdc_grids/m100) := float64(Data_rijtjeswoning);
			attribute<ratio> tussenwoning               (Geography/rdc_grids/m100) := float64(Data_rijtjeswoning);
			attribute<ratio> meergezinspand_laag_midden (Geography/rdc_grids/m100) := float64(Data_appartement);
			attribute<ratio> meergezinspand_hoog        (Geography/rdc_grids/m100) := float64(Data_appartement);				
		}
	}


	container NieuwbouwObjecten := for_each_ne(
			Periode/name
		,	'Nieuwbouw_properties(VastgoedPeriode/'+Periode/name+'/NieuwbouwPerJaar/BO_perjaar, Periode/V/'+Periode/name+')'
			);

	template Nieuwbouw_properties
	{
		//case parameters
		unit<uint32> NB;
		parameter<Periode> Periode_rel;
		//end parameters

		unit<uint32> BebouwingsObject := NB
		{

			attribute<string>                      Code              := TypeName +string( Periode/name[Periode_rel] )+string( Geometry ) ;
			attribute<string>                      TypeName          := Classifications/WoningType/name[Woningtype_rel];
			attribute<string>                      label             := Code, DialogType = "LabelText";
			attribute<rdc_meter>                   Geometry          := NB/geometry;
			attribute<rdc_meter>                   Point             := geometry;
			attribute<nrAsl>                       nrAansluitingen_i := NB/nr_aansl;
			attribute<Classifications/WoningType>  Woningtype_rel    := NB/Woningtype_rel;
			attribute<Classifications/WoningType>  BebouwingsType    := Woningtype_rel;
			attribute<m2>                          Oppervlakte_i     := Classifications/WoningType/Default_oppervlak_Nieuwbouw[Woningtype_rel] * nr_aansl;
			attribute<units/pand_asl>              Pand_aandeel      := Classifications/WoningType/Pand_aandeel[Woningtype_rel];
			attribute<yr_uint16>                   Sloopjaar         := Const(2100[yr_uint16],.);
			attribute<StudieGebied/Buurt>          Buurt_rel         := Point_in_polygon(Geometry, StudieGebied/Buurt/Geometry);
			attribute<Geography/rdc_grids/m100>    gridm100_rel      := Geometry[Geography/rdc_grids/m100];
			attribute<Classifications/Eigendom>    Eigendom_rel      := NB/Eigendom_rel;
			attribute<Classifications/GebouwOptie> GebouwOptie_rel   := const(rlookup(DefaultInstellingen/Basis/StartGebouwOpties/NieuwbouwWoning, Classifications/GebouwOptie/name),.);
			
			unit<uint32> BestaandAflevergebied := Invoer/RuimtelijkeData/BestaandeWarmtenetten/Aflevergebied_data;
			unit<uint32> BestaandWarmtenet     := Invoer/RuimtelijkeData/BestaandeWarmtenetten/Warmtenetten;
			attribute<BestaandAflevergebied> Aflevergebied_rel := point_in_polygon(Geometry , BestaandAflevergebied/Geometry);
			attribute<BestaandWarmtenet>     BestaandWarmtenet_rel     := BestaandAflevergebied/Warmtenet_rel[Aflevergebied_rel];
			
			attribute<Classifications/BouwjaarWoning> BouwjaarKlasse_rel := const(Periode/BouwjaarKlasse_rel[Periode_rel],.);

			attribute<Classifications/combines/WBE> ModelObjectKey  := combine_data( Classifications/combines/WBE , Woningtype_rel , combine_data( Classifications/combines/BE, BouwjaarKlasse_rel, Eigendom_rel)) ;
			attribute<Kengetallen/Bebouwing/Woning/Results>                ModelObject_rel := rlookup(ModelObjectKey, Kengetallen/Bebouwing/Woning/Results/ModelObjectKey);

			attribute<Classifications/Schillabel> Schillabel_rel := rjoin(ModelObjectKey, Kengetallen/Bebouwing/Woning/Results/ModelObjectKey, Kengetallen/Bebouwing/Woning/Results/schillabel_rel);

			container Bouwdelen := for_each_nedv(
			Classifications/bouwdeel/name,
			'Oppervlakte_i * Classifications/Woningtype/Bouwdeeldimensies/' + Classifications/bouwdeel/name + '[Woningtype_rel]',
			.,
			Units/m2)
			{
				container Isolatie := for_each_nedv(
					classifications/bouwdeel/name,
					'const(Classifications/IsolatieNiveau/V/N4,...)',
					..,
					Classifications/IsolatieNiveau);

				container BouwDeelVerliesFactor := for_each_nedv(
					Classifications/Bouwdeel/name,
					'Classifications/Bouwdeel/Verlies[Classifications/Bouwdeel/V/'+Classifications/Bouwdeel/name+'] * Bouwdelen/'+Classifications/Bouwdeel/name+'',
					(..),
					m2);
			
				attribute<ratio> Norm_verliesfactor (..) := ='add('+AsItemList('BouwDeelVerliesFactor/'+Classifications/Bouwdeel/name)+') / Totaal';
				
				attribute<m2>    Totaal             (..) := ='add('+AsItemList(Classifications/bouwdeel/name)+')';
			}
			container Gebied
			{
				attribute<float64> n      (..) := float64(nr_aansl);
				attribute<float64> MEAN_x (..) := float64(pointCol(Geometry));
				attribute<float64> MEAN_y (..) := float64(pointRow(Geometry));
				attribute<float64> SSD_xx (..) := const(10000.0 / 12.0, BebouwingsObject);
				attribute<float64> SSD_xy (..) := const(    0.0 / 12.0, BebouwingsObject);
				attribute<float64> SSD_yy (..) := const(10000.0 / 12.0, BebouwingsObject);
			}
			container Kapitaallasten := for_each_nedv(
				Classifications/Gebouw_Kapitaallasten/name,
				'const(0[Eur_yr], BebouwingsObject)',
				BebouwingsObject,
				Eur_yr);

			container Functioneel := for_each_nedv(
				Classifications/FunctioneleVraag/name,
				'BaseValues/'+ Classifications/FunctioneleVraag/name,
				.,
				GJ_yr)
			{
				attribute<bool> RV_N0_check(..) := abs(RV_N0_per_Bouwdeel/Total - BaseValues/RV) < 0.001;
				attribute<GJ_yr> RV_N0 (..) := BaseValues/RV, IntegrityCheck ="RV_N0_check";
			
				container RV_N0_per_Bouwdeel
				{
					//========= gefit verlies per bouwdeel
					attribute<GJ_yr> VL (...) := bouwdelen/VL * 0.193150[GJ_yr_m2], descr = "warmteverlies bij isolatiegraad N0 door vloer";
					attribute<GJ_yr> DS (...) := bouwdelen/DS * 0.525797[GJ_yr_m2], descr = "warmteverlies bij isolatiegraad N0 door schuin dak";
					attribute<GJ_yr> DP (...) := bouwdelen/DP * 0.525797[GJ_yr_m2], descr = "warmteverlies bij isolatiegraad N0 door plat dak";
					attribute<GJ_yr> MS (...) := bouwdelen/MS * 0.357145[GJ_yr_m2], descr = "warmteverlies bij isolatiegraad N0 door spouwmuur";
					attribute<GJ_yr> MG (...) := bouwdelen/MG * 0.525797[GJ_yr_m2], descr = "warmteverlies bij isolatiegraad N0 door gevel";
					attribute<GJ_yr> DR (...) := bouwdelen/DR * 0.415363[GJ_yr_m2], descr = "warmteverlies bij isolatiegraad N0 door deuren";
					attribute<GJ_yr> PL (...) := bouwdelen/PL * 0.461675[GJ_yr_m2], descr = "warmteverlies bij isolatiegraad N0 door paneel";
					attribute<GJ_yr> RO (...) := bouwdelen/RO * 1.097864[GJ_yr_m2], descr = "warmteverlies bij isolatiegraad N0 door ramen onder";
					attribute<GJ_yr> RB (...) := bouwdelen/RB * 1.097864[GJ_yr_m2], descr = "warmteverlies bij isolatiegraad N0 door ramen boven";
					attribute<GJ_yr> KR (...) := bouwdelen/KR * 0.060368[GJ_yr_m2], descr = "warmteverlies bij isolatiegraad N0 door kieren";

					//========= gefit verlies totaal
					attribute<GJ_yr> Total (...) := ='add('+AsItemList(Classifications/bouwdeel/name)+')';
				}

				attribute<int32> Pbu (..) := makedefined(round(Invoer/RuimtelijkeData/StudieGebied/Buurt/nrpers_hh[Buurt_rel]), 2i);
				attribute<Invoer/Kengetallen/Bebouwing/Woning/TWprofiel> TWprofiel_rel (..) :=
					rlookup( 
							(Pbu = 1i ?'A': Pbu = 2i ?'B': Pbu = 3i ?'C': Pbu = 4i ?'D':'E')
						+   (Oppervlakte_i < 75[m2] ? 'A': Oppervlakte_i < 100[m2] ?'B': Oppervlakte_i < 125[m2] ?'C': Oppervlakte_i < 150[m2]?'D':'E')
					, Invoer/Kengetallen/Bebouwing/Woning/TWprofiel/code) ;
				
				container BaseValues := for_each_nedv(
					Classifications/FunctioneleVraag/name,
					Classifications/FunctioneleVraag/name == 'TW' ? 'nrAansluitingen_i * Invoer/Kengetallen/Bebouwing/Woning/TWprofiel/VTW_asl[ TWprofiel_rel ]' :
					Classifications/FunctioneleVraag/name == 'KK' ? 'const((0/0)[GJ_yr],...)' :
					Classifications/FunctioneleVraag/name == 'RV' || Classifications/FunctioneleVraag/name == 'VT' ? 'const((0/0)[GJ_yr],...)' : 
					replace('Invoer/Kengetallen/Bebouwing/Woning/Results/Asl/@N@[ModelObject_rel] * nrAansluitingen_i +
					 Invoer/Kengetallen/Bebouwing/Woning/Results/Opp/@N@[ModelObject_rel] * Oppervlakte_i', '@N@', Classifications/FunctioneleVraag/name),
					..,
					GJ_yr);
			}


			container InstallatiePerProduct := for_each_nedv(
					Classifications/Product/name
				, 	'Classifications/GebouwOptie/PerProduct/'+Classifications/Product/name+'[GebouwOptie_rel]'
				, 	.
				, 	Classifications/Installatie)
			{
				attribute<Invoer/Kengetallen/OverigeInstallaties/KK/Installatietypes> KK (..) := const(Invoer/Kengetallen/OverigeInstallaties/KK/Installatietypes/V/Elek, ..);
				attribute<Invoer/Kengetallen/OverigeInstallaties/VT/Installatietypes> VT (..) := const(Invoer/Kengetallen/OverigeInstallaties/VT/Installatietypes/V/Bal_Vst_Wtw, ..);
				attribute<Invoer/Kengetallen/OverigeInstallaties/DK/Installatietypes> DK (..) := const(Invoer/Kengetallen/OverigeInstallaties/DK/Installatietypes/V/minimaal,..);

				attribute<Classifications/AfgifteSysteem> AS (..) := const(Classifications/AfgifteSysteem/V/LTAS, ..);
			}

			container Func2Meter:= CalculationSchemes/FunctioneelToMetervraag ( . , false);
			container SPF := Func2Meter/SPF;
			container BemeterdeGebouwInput_rel := for_each_nedv(Classifications/Product/name
				, 'rlookup(Classifications/Performance/Input_rel, Classifications/BemeterdeGebouwInput/nr_OrgEntity)[SPF/PerformancePerProduct/'+Classifications/Product/name+']'
				, .
				, Classifications/BemeterdeGebouwInput
				);

			container Criteria;
		}	
	}
}			
