//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) Hestia 2021 - PBL & TNO                                        //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

container Gasnetten
{
	//inlezen contouren verzorgingsgebieden regionale gasnetbeheerders
	unit<uint32> Gasnetbeheervlak
		:   StorageName     = "%HestiaDataDir%/infra/Gasnetten/Gasnetbeheervlakken.shp"
		,   StorageType     = "gdal.vect"
		,	DialogData      = "geometry"
		,	DialogType      = "Map"
		,	StorageReadOnly = "True"
	{
		attribute<rdc_meter> geometry    (poly);
		attribute<rdc_mm   > geometry_mm (poly):= geometry[rdc_mm];

		//namen van netbeheerders uit bestand kunnen mogelijk cijfer als eerste karakter hebben, daarom prefix NB_
		attribute<string>    label := 'NB_' + netBeheerd;

		container V := for_each_nedv(label, 'value('+string(id(.))+', ..)', void, .);
	}

	//inlezen data van Enexis: puntenwolk met aansluitingen bij gebouwen (4 bestanden)
	container Enexis_data
	{
		//hoogbouwaansluitingen in noordelijk verzorgingsgebied
		unit<uint32> Multistory_noord
		:   StorageName     = "%HestiaDataDir%/infra/Gasnetten/Enexis/IMKL-Appurtenance_G_Multistory_Connection_ligging/IMKL-Appurtenance_G_Multistory_Connection_Noord_ligging.shp"
		,   StorageType     = "gdal.vect"
		,	DialogData      = "geometry"
		,	DialogType      = "Map"
		,	StorageReadOnly = "True"
		{
		   attribute<rdc_meter> geometry   ;
		   attribute<rdc_mm   > geometry_mm := geometry[rdc_mm];
		}

		//hoogbouwaansluitingen in zuidelijk verzorgingsgebied
		unit<uint32> Multistory_zuid
		:   StorageName     = "%HestiaDataDir%/infra/Gasnetten/Enexis/IMKL-Appurtenance_G_Multistory_Connection_ligging/IMKL-Appurtenance_G_Multistory_Connection_Zuid_ligging.shp"
		,   StorageType     = "gdal.vect"
		,	DialogData      = "geometry"
		,	DialogType      = "Map"
		,	StorageReadOnly = "True"
		{
		   attribute<rdc_meter> geometry   ;
		   attribute<rdc_mm   > geometry_mm := geometry[rdc_mm];
		}

		//directe aansluitingen in noordelijk verzorgingsgebied
		unit<uint32> Service_noord
		:   StorageName     = "%HestiaDataDir%/infra/Gasnetten/Enexis/IMKL-Appurtenance_G_Service_Connection_ligging/IMKL-Appurtenance_G_Service_Connection_Noord_ligging.shp"
		,   StorageType     = "gdal.vect"
		,	DialogData      = "geometry"
		,	DialogType      = "Map"
		,	StorageReadOnly = "True"
		{
		   attribute<rdc_meter> geometry   ;
		   attribute<rdc_mm   > geometry_mm := geometry[rdc_mm];
		}

		//directe aansluitingen in zuidelijk servicegebied
		unit<uint32> Service_zuid
		:   StorageName     = "%HestiaDataDir%/infra/Gasnetten/Enexis/IMKL-Appurtenance_G_Service_Connection_ligging/IMKL-Appurtenance_G_Service_Connection_Zuid_ligging.shp"
		,   StorageType     = "gdal.vect"
		,	DialogData      = "geometry"
		,	DialogType      = "Map"
		,	StorageReadOnly = "True"
		{
		   attribute<rdc_meter> geometry   ;
		   attribute<rdc_mm   > geometry_mm := geometry[rdc_mm];
		}

		//samenvoegen alle bestanden tot 1 puntenbestand, vervolgens koppeling naar panden
		unit<uint32> Aansluitingen := union_unit(Multistory_noord, Multistory_zuid, Service_noord, Service_zuid)
		{
			attribute<rdc_meter>       geometry    := union_data(., Multistory_noord/geometry   , Multistory_zuid/geometry   , Service_noord/geometry   , Service_zuid/geometry   );
			attribute<rdc_mm   >       geometry_mm := union_data(., Multistory_noord/geometry_mm, Multistory_zuid/geometry_mm, Service_noord/geometry_mm, Service_zuid/geometry_mm);
			attribute<nrAsl>           nr_aansl    := const(1.0[nrAsl],.);

			//eerste slag: punten die in een pand liggen worden met dat pand gekoppeld (o.b.v. bagcontour)
		    attribute<pand> Pand_rel_1  := point_in_polygon(geometry_mm, pand/geometry_mm);

		    //tweede slag: alle panden die in de eerste slag niet zijn gekoppeld wordt van bepaald of er binnen [sqrt(4)]=2 meter van de gevel een aansluitpunt is
		    attribute<float64>     maxDist     := const(4d,Aansluitingen);
		    container              connect     := connect_info(pand/pand_2/geometry, geometry, maxDist); 
		    attribute<pand/pand_2> Pand_rel_2  := connect/arcID;
		}

		//subselectie van panden in het Enexis verzorgingsgebied
		unit<uint32> Pand := subset(BAG/import/pand/nr_verdiepingen > 0.0[uint8] && BAG/import/pand/Netbeheer_rel == Gasnetbeheervlak/V/NB_ENX)
		{
			attribute<rdc_meter> Geometry    (poly) := BAG/import/pand/geometry[nr_orgentity];
			attribute<rdc_mm   > Geometry_mm (poly) := BAG/import/pand/geometry_mm[nr_orgentity];
			attribute<nrAsl>     nr_aansl           := sum(Aansluitingen/nr_aansl, Aansluitingen/Pand_rel_1);
			attribute<pand_2>    Pand_2_rel         := invert(pand_2/nr_orgentity);

			unit<uint32> Pand_2 := subset(not(nr_aansl > 1[nrAsl]))
			{
				attribute<rdc_meter> Geometry    (poly) := ../geometry[nr_orgentity];
				attribute<rdc_mm   > Geometry_mm (poly) := ../geometry_mm[nr_orgentity];
				attribute<nrAsl>     nr_aansl           := sum(Aansluitingen/nr_aansl, Aansluitingen/Pand_rel_2);
			}
			//indicatie per pand of die geen gasaansluiting heeft
			attribute<Bool> Gasloos := not(nr_aansl > 0[nrAsl] || Pand_2/nr_aansl[Pand_2_rel] > 0[nrAsl]);
		}
	}	

	//inlezen data van Liander: lijnenbestand met aansluitleidingen
	container Liander_data
	{
		unit<uint32> Leidingen
		:   StorageName     = "%HestiaDataDir%/infra/Gasnetten/Liander/Gas leidingen.shp"
		,   StorageType     = "gdal.vect"
		,	DialogData      = "geometry"
		,	DialogType      = "Map"
		,	StorageReadOnly = "True"
		{
		   attribute<rdc_meter> geometry    (arc);
		}

		//subselectie: voor koppeling met panden worden alleen aansluitleidingen gebruikt
		unit<uint32> AansluitLeidingen := subset(Leidingen/NETVLAK == 'Lage Druk' && Leidingen/SUBNETTYPE == 'Aansluitnet')
		{
		   attribute<rdc_meter> geometry    (arc) := Leidingen/geometry[nr_orgentity];
		}

		//aanlsluitleidingen worden omgezet in punten (start en eindpunt)
		unit<uint32> Aansluitingen := sequence2points(AansluitLeidingen/geometry)
		{
			//eerste slag: punten die in een pand liggen worden aan dat pand gekoppeld (o.b.v. BAG countouren)
			attribute<pand> Pand_rel_1  := point_in_polygon(point, pand/geometry);

			//tweede slag: alle panden die in de eerste slag niet zijn gekoppeld wordt van bepaald of er binnen [sqrt(4)]=2 meter van de gevel een aansluitpunt is
			attribute<float64>     maxDist     := const(4d,Aansluitingen);
		    container              connect_2   := connect_info(pand/pand_2/geometry, point, maxDist);
		    attribute<pand/pand_2> Pand_rel_2  := connect_2/arcID;
		    attribute<nrAsl>       nr_aansl    := const(1.0[nrAsl],.);
		    
		    //derde slag: alle panden die in de eerste en tweede slag niet zijn gekoppeld wordt van bepaald of er binnen [sqrt(4)]=2 meter van de gevel een aansluitpunt is
		    container connect_3 := connect_info(pand/pand_2/pand_3/geometry, point, maxDist);
		    attribute<pand/pand_2/pand_3> Pand_rel_3 := connect_3/arcID;
		}
		unit<uint32> Pand := subset(BAG/import/pand/nr_verdiepingen > 0.0[uint8] && BAG/import/pand/Netbeheer_rel == Gasnetbeheervlak/V/NB_002Liander)
		{
			attribute<rdc_meter> Geometry (poly) := BAG/import/pand/geometry[nr_orgentity];
			attribute<nrAsl>     nr_aansl        := sum(Aansluitingen/nr_aansl, Aansluitingen/Pand_rel_1);
			attribute<pand_2>    Pand_2_rel      := invert(pand_2/nr_orgentity);

			unit<uint32> Pand_2 := subset(not(nr_aansl > 0[nrAsl]))
			{
				attribute<rdc_meter> Geometry (poly) := ../geometry[nr_orgentity];
				attribute<nrAsl>     nr_aansl        := sum(Aansluitingen/nr_aansl, Aansluitingen/Pand_rel_2);
				attribute<pand_3>    Pand_3_rel      := invert(pand_3/nr_orgentity);

				unit<uint32> Pand_3 := subset(not(nr_aansl > 1[nrAsl]))
				{
					attribute<rdc_meter> Geometry (poly) := ../geometry[nr_orgentity];
					attribute<nrAsl>     nr_aansl        := sum(Aansluitingen/nr_aansl, Aansluitingen/Pand_rel_3);
					attribute<Bool>      HeeftGas        := nr_aansl > 0[nrAsl];
				}
				attribute<Bool> HeeftGas := nr_aansl > 0[nrAsl] || Pand_3/HeeftGas[Pand_3_rel];
			}
			//indicatie per pand of die geen gasaansluiting heeft
			attribute<Bool> Gasloos := not(nr_aansl > 0[nrAsl] || Pand_2/HeeftGas[Pand_2_rel]);
		}
	}

	//inlezen data van Enduris: lijnenbestand zonder aansluitleidingen
	container Enduris_data
	{
		unit<uint32> Leidingen
		:   StorageName     = "%HestiaDataDir%/infra/Gasnetten/Enduris/Gas leidingen.shp"
		,   StorageType     = "gdal.vect"
		,	DialogData      = "geometry"
		,	DialogType      = "Map"
		,	StorageReadOnly = "True"
		{
		   attribute<rdc_meter> geometry (arc);
		}

		//subselectie van panden in het Stedin verzorgingsgebied
		unit<uint32> Pand := subset(BAG/import/pand/nr_verdiepingen > 0.0[uint8] && BAG/import/pand/Netbeheer_rel == Gasnetbeheervlak/V/NB_enduris)
		{
			attribute<rdc_meter> Geometry (poly) := BAG/import/pand/geometry[nr_orgentity];

			//panden worden omgezet naar serie punten
			unit<uint32> points := sequence2points(Geometry)
			{
				//voor elk pand-punt wordt gecheckt of er een distributieleiding ligt binnen [sqrt(2500)]=50 meter, zo ja dan wordt die geteld als 'connected'
				attribute<float64> maxDist := const(2500d,.);
				container          connect := connect_info(Leidingen/Geometry, Point, maxDist);
			}
			//indicatie per pand of die geen gasaansluiting heeft
			attribute<Bool> Gasloos := not(sum(uint8(isdefined(points/connect/arcid)), points/SequenceNr) > 0[uint8]);
		}
	}

	//inlezen data van Stedin: lijnenbestand zonder aansluitleidingen
	container Stedin_data
	{
		unit<uint32> Leidingen
		:   StorageName     = "%HestiaDataDir%/infra/Gasnetten/stedin_gasvervangingsdata_01012021/gasvervangingsdata.shp"
		,   StorageType     = "gdal.vect"
		,	DialogData      = "geometry"
		,	DialogType      = "Map"
		,	StorageReadOnly = "True"
		{
		   attribute<rdc_meter> geometry (arc);
		}
		//subselectie van panden in het Stedin verzorgingsgebied
		unit<uint32> Pand := subset(BAG/import/pand/nr_verdiepingen > 0.0[uint8] && (BAG/import/pand/Netbeheer_rel == Gasnetbeheervlak/V/NB_stedin || BAG/import/pand/Netbeheer_rel == Gasnetbeheervlak/V/NB_stedinDNWG))
		{
			attribute<rdc_meter> Geometry (poly) := BAG/import/pand/geometry[nr_orgentity];

			//panden worden omgezet naar serie punten
			unit<uint32> points := sequence2points(Geometry)
			{
				//voor elk pand-punt wordt gecheckt of er een distributieleiding ligt binnen [sqrt(2500)]=50 meter, zo ja dan wordt die geteld als 'connected'
				attribute<float64> maxDist := const(2500d,.);
				container          connect := connect_info(Leidingen/Geometry, Point, maxDist);
			}
			//indicatie per pand of die geen gasaansluiting heeft
			attribute<Bool> Gasloos := not(sum(uint8(isdefined(points/connect/arcid)), points/SequenceNr) > 0[uint8]);
		}
	}	

	//de resultaten van de analyse op de verschillende netbeheerders worden gecombineerd tot een landelijk overzicht
	attribute<bool> Gasloos_result (BAG/import/pand) := 	
		Stedin_data/pand/Gasloos[invert(Stedin_data/pand/nr_orgentity)]   ||
		Enduris_data/pand/Gasloos[invert(Enduris_data/pand/nr_orgentity)] ||
		Liander_data/pand/Gasloos[invert(Liander_data/pand/nr_orgentity)] ||
		Enexis_data/pand/Gasloos[invert(Enexis_data/pand/nr_orgentity)]  ;

	//de resultaten van bovenstaande analyse wordt als snel fss bestand weggeschreven
	unit<uint32> Gasloos_writer := BAG/import/pand, Storagename = "%HestiaDataDir%/infra/Gasnetten/Gasloos.fss"
	{
		attribute<bool> Gasloos := Gasloos_result;
	}
	//de resultaten van een eerdere analyse die als fss zijn weggeschreven worden weer ingelezen
	unit<uint32> Gasloos_reader :=BAG/import/pand, StorageName = "%HestiaDataDir%/infra/Gasnetten/Gasloos.fss", StorageReadOnly = "true"
	{
		attribute<bool> Gasloos;
	}
	//indien recalculate = true, wordt een nieuwe analyse gemaakt van de aanwezigheid van gasaansluitingen, anders wordt het invoerbestand gebruikt
	parameter<bool> recalculate := false;
	attribute<bool> Gasloos (BAG/import/pand) := = recalculate ?  'Gasloos_result' : 'Gasloos_reader/Gasloos';
}