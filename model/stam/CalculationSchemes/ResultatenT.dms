//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) Hestia 2021 - PBL & TNO                                        //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

template ResultatenT
{
	// begin case parameters
	parameter<string> ZichtjaarName : IsHidden = "True";
	// optional case parameter

	parameter<Classifications/Zichtjaar> Zichtjaar_rel   := rlookup(ZichtjaarName, Classifications/Zichtjaar/name), IsHidden = "True";
	parameter<yr_uint16>                 Zichtjaar_jaar  := Classifications/ZichtJaar/jaar[Zichtjaar_rel], IsHidden = "True";
	parameter<Classifications/Periode>   Periode_rel     := Classifications/ZichtJaar/Periode_rel[Zichtjaar_rel], IsHidden = "True";

	container TussenResultaten      := ='/TussenResultaten/' + ZichtjaarName   , isHidden = "true";
	unit<uint32> PlanRegio          := Invoer/SpecifiekeInstellingen/PlanRegio , isHidden = "true";
	container Prijzen               := TussenResultaten/Prijzen                , isHidden = "true";
	container BebouwingsComponenten := TussenResultaten/BebouwingsComponenten  , isHidden = "true";
	container NCW                   := TussenResultaten/NCW                    , isHidden = "true";
	container GebiedsAllocatie      := TussenResultaten/GebiedsAllocatie       , isHidden = "true";
	container PrevState             := TussenResultaten/PrevState              , isHidden = "true";
	container StateNaAllocatie      := TussenResultaten/StateNaAllocatie       , isHidden = "true";
	container bebouwing             := StateNaAllocatie/bebouwing              , isHidden = "true";
	container Voorkeuren            := TussenResultaten/Voorkeuren             , isHidden = "true";
	container Allocatie             := TussenResultaten/AllocatieResultaten    , isHidden = "true";
	
	container Generate: isHidden = "true"
	{
		container impl
		{
			parameter<string> onlyOngewogen        := SpecifiekeInstellingen/Rapportage/GewogenResultaten ? '' : '/Ongewogen';
			parameter<string> ExplicitSupplierList :=
				AsList('InputOutput/'+SpecifiekeInstellingen/Rapportage/RapportageSchaal/name + onlyOngewogen +'/GenerateAll',';');
		}
		parameter<string> All := 'Ready', ExplicitSuppliers = "= impl/ExplicitSupplierList";
	}
	
	container GenerateSamenstelling: isHidden = "true"
	{
		container impl
		{
			parameter<string> WoningSupplierList :=
				AsList(
					';' + AsList('MaatregelenRapportage/Woning/'+SpecifiekeInstellingen/Rapportage/RapportageSchaal/name+'/GenerateAll',';')
					,';'
					);
//			parameter<string> UtilSupplierList :=
//				AsList(
//					';' + AsList('MaatregelenRapportage/Util/'+SpecifiekeInstellingen/Rapportage/RapportageSchaal/name+'/GenerateAll',';')
//					,';'
//					);
			parameter<string> ExplicitSupplierList :=
				AsList(
					replace(';' + AsList('MaatregelenRapportage/@BC/'+SpecifiekeInstellingen/Rapportage/RapportageSchaal/name+'/GenerateAll',';'),'@BC',Classifications/BebouwingsComponent/name)
					,';'
					);
		}
		parameter<string> AllWoningen := 'Ready', ExplicitSuppliers = "= impl/WoningSupplierList";
//		parameter<string> AllUtil     := 'Ready', ExplicitSuppliers = "= impl/UtilSupplierList";
	}

	container InputOutput := for_each_ne(SpecifiekeInstellingen/Rapportage/RapportageSchaal/name
			,'Rapportage/Flow('
				'SpecifiekeInstellingen/Rapportage/RapportageSchaal'
				','+Quote(SpecifiekeInstellingen/Rapportage/RapportageSchaal/name)+
				', value('+ string(id(SpecifiekeInstellingen/Rapportage/RapportageSchaal)) + ',SpecifiekeInstellingen/Rapportage/RapportageSchaal)'
			')'
		)
	{
		container Totaal := =(SpecifiekeInstellingen/Rapportage/RapportageSchaal/name != 'NL')
			? 'Rapportage/Flow(geography/RegioIndelingen/NL, ''NL'', value(0, geography/RegioIndelingen/NL) )'
			: '.', IsHidden = "True";
	}
	
	container WoningTellingen_PPR {
		container BouwdeelAreaalPerIsolatieniveau := for_each_nedv(Classifications/BouwdeelIsolatie/name
		,	replace('sum(Allocatie/Woning/BO/Bouwdelen/@BD * Float64(Allocatie/Woning/BO/Bouwdelen/Isolatie/@BD == Classifications/IsolatieNiveau/V/@IN), BebouwingsComponenten/Woning/results/PlanRegio_rel)'
			,	'@BD', Classifications/BouwdeelIsolatie/bouwdeel_name
			,	'@IN', Classifications/BouwdeelIsolatie/isolatieniveau_name)
		,	PlanRegio, m2
		);			
		container RV_Installatie := for_each_nedv(Classifications/Installatie/name
		,	replace('sum(UInt32(Allocatie/Woning/BO/InstallatiePerProduct/RVb == Classifications/Installatie/V/@IN), BebouwingsComponenten/Woning/results/PlanRegio_rel)'
			,	'@IN', Classifications/Installatie/name)
		,	PlanRegio, uint32
		);			
	}
	container WoningTellingen_NL {
		unit<uint32> BO := Allocatie/Woning/BO;
		// TODO: ook per woning en relatief (2x)
		// TODO: 1 regel per jaar, let op niet vasthouden tussenresultaten, en obv begin- en eindjaar.
		container BouwdeelAreaalPerIsolatieniveau := for_each_nedv(Classifications/BouwdeelIsolatie/name
		,	replace('sum(BO/Bouwdelen/@BD * Float64(BO/Bouwdelen/Isolatie/@BD == Classifications/IsolatieNiveau/V/@IN))'
			,	'@BD', Classifications/BouwdeelIsolatie/bouwdeel_name
			,	'@IN', Classifications/BouwdeelIsolatie/isolatieniveau_name)
		,	void, m2
		);			
		
		container RV_Installatie := for_each_nedv(Classifications/Installatie/name
		,	replace('sum(UInt32(BO/InstallatiePerProduct/RVb == Classifications/Installatie/V/@IN))'
			,	'@IN', Classifications/Installatie/name)
		,	void, uint32
		);			
	}
	container Installaties {
		// voor iedere unieke combinatie van InstallatiePerProduct
		// (RVb RVp TWb TWp KDb KDp KK VT)  #woningen FV/RV FV/TW FV/KD FV/VT FV/EA FV/KK 
		// VR VR VR VR geen geen fornuis geen   6000000   veel beetje geen beetje geen
		container imp {
			unit<uint32> BO := Allocatie/Woning/BO;
			
			unit<uint32> I := Classifications/Installatie;
			unit<uint32> II := combine(I, I)
			{
				attribute<string> label := nr_1 == nr_2 ? I/label[nr_1] : 'basis: '+I/label[nr_1] + '; piek: '+I/label[nr_2], DialogType = "LabelText";
			}
			attribute<II> InstallatieGetalRV_rel(BO) := combine_data(II, BO/InstallatiePerProduct/RVb, BO/InstallatiePerProduct/RVp);
			attribute<II> InstallatieGetalTW_rel(BO) := combine_data(II, BO/InstallatiePerProduct/TWb, BO/InstallatiePerProduct/TWp);
			attribute<II> InstallatieGetalKD_rel(BO) := combine_data(II, BO/InstallatiePerProduct/KDb, BO/InstallatiePerProduct/KDp);

			unit<uint32> AS := Classifications/AfgifteSysteem;
			unit<uint32> VT := Invoer/Kengetallen/OverigeInstallaties/VT/Installatietypes;
			unit<uint32> DK := Invoer/Kengetallen/OverigeInstallaties/DK/Installatietypes;
			unit<uint32> KK := Invoer/Kengetallen/OverigeInstallaties/KK/Installatietypes;
			
			unit<uint32> InstallatieGetalOV := combine(AS, VT, DK, KK);
			
			attribute<uint32> InstallatieGetalOV_rel(BO) := 
				combine_data(InstallatieGetalOV, 
					BO/InstallatiePerProduct/AS, 
					combine_data(combine_unit(VT, DK, KK)
					,	BO/InstallatiePerProduct/VT
					,	combine_data(combine_unit(DK, KK)
						,	BO/InstallatiePerProduct/DK
						,	BO/InstallatiePerProduct/KK
						)
					)
				);

			unit<uint32> Voorkomend_InstallatieGetalRV := unique(InstallatieGetalRV_rel) { attribute<.> per_BO(BO) := rlookup(InstallatieGetalRV_rel, values); attribute<string> Label := II/label[Values]; }
			unit<uint32> Voorkomend_InstallatieGetalTW := unique(InstallatieGetalTW_rel) { attribute<.> per_BO(BO) := rlookup(InstallatieGetalTW_rel, values); attribute<string> Label := II/label[Values]; }
			unit<uint32> Voorkomend_InstallatieGetalKD := unique(InstallatieGetalKD_rel) { attribute<.> per_BO(BO) := rlookup(InstallatieGetalKD_rel, values); attribute<string> Label := II/label[Values]; }
			unit<uint32> Voorkomend_InstallatieGetalOV := unique(InstallatieGetalOV_rel) 
			{ 
				attribute<.> per_BO(BO) := rlookup(InstallatieGetalOV_rel, values); 
				attribute<AS> AS_rel := InstallatieGetalOV/nr_1[values];
				attribute<VT> VT_rel := InstallatieGetalOV/nr_2[values];
				attribute<DK> DK_rel := InstallatieGetalOV/nr_3[values];
				attribute<KK> KK_rel := InstallatieGetalOV/nr_4[values];
				
				attribute<string> Label := AS/name[AS_rel]+';'+VT/name[VT_rel]+';'+DK/name[DK_rel]+';'+KK/name[KK_rel];
			}
			
			unit<uint32> InstallatieGetal := combine_unit(Voorkomend_InstallatieGetalRV, Voorkomend_InstallatieGetalTW, Voorkomend_InstallatieGetalKD, Voorkomend_InstallatieGetalOV);
			
			attribute<uint32> InstallatieGetal_rel(BO) := 
				combine_data(InstallatieGetal, 
					Voorkomend_InstallatieGetalRV/per_BO, 
					combine_data(combine(Voorkomend_InstallatieGetalTW , Voorkomend_InstallatieGetalKD, Voorkomend_InstallatieGetalOV)
					,	Voorkomend_InstallatieGetalTW/per_BO
					,	combine_data(combine(Voorkomend_InstallatieGetalKD, Voorkomend_InstallatieGetalOV)
						,	Voorkomend_InstallatieGetalKD/per_BO
						,	Voorkomend_InstallatieGetalOV/per_BO
						)
					)
				);
			attribute<results> results_rel(BO) := rlookup(InstallatieGetal_rel, results/values);
		}
		// results per InstallatiePakket
		unit<uint32> results := unique(imp/InstallatieGetal_rel) 
		{ 
			attribute<imp/Voorkomend_InstallatieGetalRV> Voorkomend_InstallatieGetalRV_rel := (values / (#imp/Voorkomend_InstallatieGetalTW * #imp/Voorkomend_InstallatieGetalKD * #imp/Voorkomend_InstallatieGetalOV))[imp/Voorkomend_InstallatieGetalRV];
			attribute<imp/Voorkomend_InstallatieGetalTW> Voorkomend_InstallatieGetalTW_rel := (values / (#imp/Voorkomend_InstallatieGetalKD * #imp/Voorkomend_InstallatieGetalOV) % #imp/Voorkomend_InstallatieGetalTW)[imp/Voorkomend_InstallatieGetalTW];
			attribute<imp/Voorkomend_InstallatieGetalKD> Voorkomend_InstallatieGetalKD_rel := ((values / #imp/Voorkomend_InstallatieGetalOV) % #imp/Voorkomend_InstallatieGetalKD)[imp/Voorkomend_InstallatieGetalKD];
			attribute<imp/Voorkomend_InstallatieGetalOV> Voorkomend_InstallatieGetalOV_rel := (values % #imp/Voorkomend_InstallatieGetalOV)[imp/Voorkomend_InstallatieGetalOV];
			
			attribute<string> Label := 
				imp/Voorkomend_InstallatieGetalRV/Label[Voorkomend_InstallatieGetalRV_rel]+';'+
				imp/Voorkomend_InstallatieGetalTW/Label[Voorkomend_InstallatieGetalTW_rel]+';'+
				imp/Voorkomend_InstallatieGetalKD/Label[Voorkomend_InstallatieGetalKD_rel]+';'+
				imp/Voorkomend_InstallatieGetalOV/Label[Voorkomend_InstallatieGetalOV_rel];
				
			attribute<uint32> nrWoningen := pcount(imp/results_rel);
			attribute<nrAsl> nrAansluitingen := sum(imp/BO/nrAansluitingen, imp/results_rel);
			container Functioneel := for_each_nedv(Classifications/FunctioneleVraag/name
			,	'sum(imp/BO/Functioneel/'+Classifications/FunctioneleVraag/name+', imp/results_rel)'
			,	., GJ_yr );
			
			container metervraag := for_each_nedv(Classifications/BemeterdeGebouwInput/name
			,	'sum(imp/BO/metervraag/'+Classifications/BemeterdeGebouwInput/name+', imp/results_rel)'
			,	., GJ_yr );

			parameter<nrAsl> Asl             := sum(imp/BO/nrAansluitingen);
			parameter<nrAsl> A               := sum(imp/BO/nrAansluitingen * float64(imp/BO/Energielabel_rel          == Classifications/Schillabel/V/A));
			parameter<nrAsl> B               := sum(imp/BO/nrAansluitingen * float64(imp/BO/Energielabel_rel          == Classifications/Schillabel/V/B));
			parameter<nrAsl> C               := sum(imp/BO/nrAansluitingen * float64(imp/BO/Energielabel_rel          == Classifications/Schillabel/V/C));
			parameter<nrAsl> D               := sum(imp/BO/nrAansluitingen * float64(imp/BO/Energielabel_rel          == Classifications/Schillabel/V/D));
			parameter<nrAsl> E               := sum(imp/BO/nrAansluitingen * float64(imp/BO/Energielabel_rel          == Classifications/Schillabel/V/E));
			parameter<nrAsl> F               := sum(imp/BO/nrAansluitingen * float64(imp/BO/Energielabel_rel          == Classifications/Schillabel/V/F));
			parameter<nrAsl> G               := sum(imp/BO/nrAansluitingen * float64(imp/BO/Energielabel_rel          == Classifications/Schillabel/V/G));
			parameter<nrAsl> RV_gas          := sum(imp/BO/nrAansluitingen * float64(imp/BO/InstallatiePerProduct/RVb == Classifications/Installatie/V/vr || imp/BO/InstallatiePerProduct/RVb == Classifications/Installatie/V/hr));
			parameter<nrAsl> RV_gebiedsoptie := sum(imp/BO/nrAansluitingen * float64(imp/BO/InstallatiePerProduct/RVb == Classifications/Installatie/V/gebiedsoptie));
			parameter<nrAsl> TW_gas          := sum(imp/BO/nrAansluitingen * float64(imp/BO/InstallatiePerProduct/TWb == Classifications/Installatie/V/vr || imp/BO/InstallatiePerProduct/RVb == Classifications/Installatie/V/hr));
			parameter<nrAsl> VT_nat          := sum(imp/BO/nrAansluitingen * float64(imp/BO/InstallatiePerProduct/VT  == Invoer/Kengetallen/OverigeInstallaties/VT/Installatietypes/V/Nat));
		}
	}
	
	container Bouwdelen {
		// evenzo voor iedere voorkomende combinatie van Bouwdelen: 4^10 = 2^20
		container imp {
			unit<uint32> BO := Allocatie/Woning/BO;
			parameter<bool> CheckBouwdeelInvariants := #Classifications/Bouwdeel == 10 && #Classifications/IsolatieNiveau == 4;
			attribute<uint16> BouwdeelG1(BO) := =replace('UInt16(BO/Bouwdelen/Isolatie/@B0) * 256w + UInt16(BO/Bouwdelen/Isolatie/@B1) * 64w +UInt16(BO/Bouwdelen/Isolatie/@B2) * 16w + UInt16(BO/Bouwdelen/Isolatie/@B3) * 4w +UInt16(BO/Bouwdelen/Isolatie/@B4)'
				,	'@B0', Classifications/Bouwdeel/name[0[Classifications/Bouwdeel]]
				,	'@B1', Classifications/Bouwdeel/name[1[Classifications/Bouwdeel]]
				,	'@B2', Classifications/Bouwdeel/name[2[Classifications/Bouwdeel]]
				,	'@B3', Classifications/Bouwdeel/name[3[Classifications/Bouwdeel]]
				,	'@B4', Classifications/Bouwdeel/name[4[Classifications/Bouwdeel]]
			);
			attribute<uint16> BouwdeelG2(BO) := =replace('UInt16(BO/Bouwdelen/Isolatie/@B0) * 256w + UInt16(BO/Bouwdelen/Isolatie/@B1) * 64w +UInt16(BO/Bouwdelen/Isolatie/@B2) * 16w + UInt16(BO/Bouwdelen/Isolatie/@B3) * 4w +UInt16(BO/Bouwdelen/Isolatie/@B4)'
				,	'@B0', Classifications/Bouwdeel/name[5[Classifications/Bouwdeel]]
				,	'@B1', Classifications/Bouwdeel/name[6[Classifications/Bouwdeel]]
				,	'@B2', Classifications/Bouwdeel/name[7[Classifications/Bouwdeel]]
				,	'@B3', Classifications/Bouwdeel/name[8[Classifications/Bouwdeel]]
				,	'@B4', Classifications/Bouwdeel/name[9[Classifications/Bouwdeel]]
			);
			attribute<uint32> BouwdeelGetal(BO) := UInt32(BouwdeelG1) * 1024 + UInt32(BouwdeelG2);
			attribute<uint32> combine_factor(Classifications/Bouwdeel) : [ 262144, 65536, 16384, 4096, 1024, 256, 64, 16, 4, 1];
			
			attribute<results> results_rel(BO) := rlookup(BouwdeelGetal, results/values); 
		}
		unit<uint32> results := unique( imp/BouwdeelGetal )  
		{ 
			container Isolatie := for_each_nedv(Classifications/Bouwdeel/name
			,	'(values / imp/combine_factor[Classifications/Bouwdeel/V/'+Classifications/Bouwdeel/name+'] % 4)[Classifications/IsolatieNiveau]'
			,	., Classifications/IsolatieNiveau	
			);
			attribute<string> Label := ='add('+AsItemList(''''+Classifications/Bouwdeel/name+'=''+Classifications/IsolatieNiveau/name[Isolatie/'+Classifications/Bouwdeel/name+']+'' ''')+')';
			
			attribute<uint32> nrWoningen := pcount(imp/results_rel);
			attribute<nrAsl> nrAansluitingen := sum(imp/BO/nrAansluitingen, imp/results_rel);
			container Functioneel := for_each_nedv(Classifications/FunctioneleVraag/name
			,	'sum(imp/BO/Functioneel/'+Classifications/FunctioneleVraag/name+', imp/results_rel)'
			,	., GJ_yr );
			
			container metervraag := for_each_nedv(Classifications/BemeterdeGebouwInput/name
			,	'sum(imp/BO/metervraag/'+Classifications/BemeterdeGebouwInput/name+', imp/results_rel)'
			,	., GJ_yr );
			
			container Arealen := for_each_nedv(Classifications/Bouwdeel/name
			,	'sum(imp/BO/Bouwdelen/'+Classifications/Bouwdeel/name+', imp/results_rel)'
			,	., m2 );
		}
	}

	container SELPE
	{
		parameter<GJ_yr> Vf_RV         := sum( Allocatie/Woning/BO/Functioneel/RV );
		parameter<GJ_yr> Vf_TW         := sum( Allocatie/Woning/BO/Functioneel/TW );
		parameter<GJ_yr> Vf_KK         := sum( Allocatie/Woning/BO/Functioneel/KK );
		parameter<GJ_yr> Vf_EA_VT_KD   := sum( add(Allocatie/Woning/BO/Functioneel/EA, Allocatie/Woning/BO/Functioneel/KD, Allocatie/Woning/BO/Functioneel/VT) );

		parameter<GJ_yr> Vm_g_RV       := sum( add( 
				float64(Allocatie/Woning/BO/Func2Meter/BemeterdeGebouwInput_rel/RVb == /Classifications/BemeterdeGebouwInput/V/Gas) * Allocatie/Woning/BO/Func2Meter/metervraag_per_product/RVb,
				float64(Allocatie/Woning/BO/Func2Meter/BemeterdeGebouwInput_rel/RVp == /Classifications/BemeterdeGebouwInput/V/Gas) * Allocatie/Woning/BO/Func2Meter/metervraag_per_product/RVp ) );
		parameter<GJ_yr> Vm_g_TW       := sum( add( 
				float64(Allocatie/Woning/BO/Func2Meter/BemeterdeGebouwInput_rel/TWb == /Classifications/BemeterdeGebouwInput/V/Gas) * Allocatie/Woning/BO/Func2Meter/metervraag_per_product/TWb,
				float64(Allocatie/Woning/BO/Func2Meter/BemeterdeGebouwInput_rel/TWp == /Classifications/BemeterdeGebouwInput/V/Gas) * Allocatie/Woning/BO/Func2Meter/metervraag_per_product/TWp ) );
		parameter<GJ_yr> Vm_g_KK       := sum( Allocatie/Woning/BO/Func2Meter/Koken/Vj_gas);

		parameter<GJ_yr> Vm_w_RV       := sum( Allocatie/Woning/BO/Functioneel/RV * float64(  Allocatie/Woning/BO/Aansluitingen/Warmtenet )  );
		parameter<GJ_yr> Vm_w_TW       := sum( Allocatie/Woning/BO/Functioneel/TW * float64(  Allocatie/Woning/BO/Aansluitingen/Warmtenet )  );

		parameter<GJ_yr> Vm_e_RV       := sum( add( 
				float64(Allocatie/Woning/BO/Func2Meter/BemeterdeGebouwInput_rel/RVb == /Classifications/BemeterdeGebouwInput/V/e) * Allocatie/Woning/BO/Func2Meter/metervraag_per_product/RVb,
				float64(Allocatie/Woning/BO/Func2Meter/BemeterdeGebouwInput_rel/RVp == /Classifications/BemeterdeGebouwInput/V/e) * Allocatie/Woning/BO/Func2Meter/metervraag_per_product/RVp ) );
		parameter<GJ_yr> Vm_e_TW       := sum( add( 
				float64(Allocatie/Woning/BO/Func2Meter/BemeterdeGebouwInput_rel/TWb == /Classifications/BemeterdeGebouwInput/V/e) * Allocatie/Woning/BO/Func2Meter/metervraag_per_product/TWb,
				float64(Allocatie/Woning/BO/Func2Meter/BemeterdeGebouwInput_rel/TWp == /Classifications/BemeterdeGebouwInput/V/e) * Allocatie/Woning/BO/Func2Meter/metervraag_per_product/TWp ) );
		parameter<GJ_yr> Vm_e_KK       := sum( Allocatie/Woning/BO/Func2Meter/Koken/Vj_elek);
		parameter<GJ_yr> Vm_e_EA_VT_KD := sum( add(
			Allocatie/Woning/BO/Metervraag/EA,
			Allocatie/Woning/BO/Func2Meter/eEffect/Vj_elek,
			float64(Allocatie/Woning/BO/Func2Meter/BemeterdeGebouwInput_rel/KDb == /Classifications/BemeterdeGebouwInput/V/e) * Allocatie/Woning/BO/Func2Meter/metervraag_per_product/KDb,
			float64(Allocatie/Woning/BO/Func2Meter/BemeterdeGebouwInput_rel/KDp == /Classifications/BemeterdeGebouwInput/V/e) * Allocatie/Woning/BO/Func2Meter/metervraag_per_product/KDp ) );

		parameter<GJ_yr> Vm_o_RV       := sum( add( 
				float64(Allocatie/Woning/BO/Func2Meter/BemeterdeGebouwInput_rel/RVb == /Classifications/BemeterdeGebouwInput/V/olie) * Allocatie/Woning/BO/Func2Meter/metervraag_per_product/RVb,
				float64(Allocatie/Woning/BO/Func2Meter/BemeterdeGebouwInput_rel/RVp == /Classifications/BemeterdeGebouwInput/V/olie) * Allocatie/Woning/BO/Func2Meter/metervraag_per_product/RVp ) );
		parameter<GJ_yr> Vm_o_TW       := sum( add( 
				float64(Allocatie/Woning/BO/Func2Meter/BemeterdeGebouwInput_rel/TWb == /Classifications/BemeterdeGebouwInput/V/olie) * Allocatie/Woning/BO/Func2Meter/metervraag_per_product/TWb,
				float64(Allocatie/Woning/BO/Func2Meter/BemeterdeGebouwInput_rel/TWp == /Classifications/BemeterdeGebouwInput/V/olie) * Allocatie/Woning/BO/Func2Meter/metervraag_per_product/TWp ) );

		parameter<GJ_yr> Vm_b_RV       := sum( add( 
				float64(Allocatie/Woning/BO/Func2Meter/BemeterdeGebouwInput_rel/RVb == /Classifications/BemeterdeGebouwInput/V/biomassa || Allocatie/Woning/BO/Func2Meter/BemeterdeGebouwInput_rel/RVb == /Classifications/BemeterdeGebouwInput/V/pellets) * Allocatie/Woning/BO/Func2Meter/metervraag_per_product/RVb,
				float64(Allocatie/Woning/BO/Func2Meter/BemeterdeGebouwInput_rel/RVp == /Classifications/BemeterdeGebouwInput/V/biomassa || Allocatie/Woning/BO/Func2Meter/BemeterdeGebouwInput_rel/RVp == /Classifications/BemeterdeGebouwInput/V/pellets) * Allocatie/Woning/BO/Func2Meter/metervraag_per_product/RVp ) );
		parameter<GJ_yr> Vm_b_TW       := sum( add( 
				float64(Allocatie/Woning/BO/Func2Meter/BemeterdeGebouwInput_rel/TWb == /Classifications/BemeterdeGebouwInput/V/biomassa || Allocatie/Woning/BO/Func2Meter/BemeterdeGebouwInput_rel/TWb == /Classifications/BemeterdeGebouwInput/V/pellets) * Allocatie/Woning/BO/Func2Meter/metervraag_per_product/TWb,
				float64(Allocatie/Woning/BO/Func2Meter/BemeterdeGebouwInput_rel/TWp == /Classifications/BemeterdeGebouwInput/V/biomassa || Allocatie/Woning/BO/Func2Meter/BemeterdeGebouwInput_rel/TWp == /Classifications/BemeterdeGebouwInput/V/pellets) * Allocatie/Woning/BO/Func2Meter/metervraag_per_product/TWp ) );

		parameter<GJ_yr> V_omgeving    := sum( Allocatie/Woning/BO/Func2Meter/Omgeving/totaal );
	}

	#include <Maatschappelijk.dms>
	#include <EnergyResults.dms>
	#include <MaatregelenRapportage.dms>
	#include <Netwerken.dms>
	#include <EnergieProducent.dms>

	container FolderInfo: isHidden = "True"
	{
		parameter<string> OutputFolder := '%localDataProjDir%/Results/' + Expand(., '%configName%') + '/'+ ZichtjaarName;
	}
}