
//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) Hestia 2021 - Planbureau voor de Leefomgeving                  //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//           Dit is de container met rekenschema's die werken op Bebouwing              //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

//====== Berekeningen voor woningen die actief zijn op minimaal één functioneel product =====
unit<uint32> ProductActieveWoning := subset(not(BO/Afbouw) && BO/Activatie/ProductActief)
{		
	attribute<BO> BO_rel := nr_OrgEntity;
	attribute<dpoint> Geometry := BO/Geometry[BO_rel];
	
	attribute<ProductActieveWoning> per_BO   (BO) := invert(ProductActieveWoning/BO_rel);
	
	//====== Indeling van gebouwopties in categorieën: ketelopties (vaak gas), all-electric opties, en hybride opties =====
	unit<uint8> OptiesHere := subset(IsDefined(classifications/gebouwoptie/categorie_rel))
	{
		attribute<classifications/gebouwoptie> GebouwOptie_rel := nr_orgentity;
		attribute<Classifications/GebouwOptieCategorie> Categorie_rel := classifications/gebouwoptie/categorie_rel[GebouwOptie_rel];
		attribute<string> name  := classifications/gebouwoptie/name[GebouwOptie_rel];
		attribute<string> label := name, DialogType = "LabelText";
		
		attribute<string> Criterium_expr := ='replace_value(LowerCase(union_data(., '+AsItemList('LocatieSpecifiekeOpties/GebouwOpties/'+name)+')), ''criteria/always'', '''')';
		attribute<string> Criterium_Expr2 := replace_value(Criterium_expr, '', 'const(true, xIsolatieAmbitie)')+'[xIsolatieAmbitie/BO_rel]'; // TODO: samenvoegen met Criterium_expr
	}
	
	attribute<bool> is_BouwdeelActief     := BO/Activatie/BouwdeelActief[BO_rel], Descr = "Check of ook bouwdelen actief zijn";
	
	//====== Berekeningen voor woningen die actief zijn op minimaal één functioneel product en ook op één of meerdere bouwdelen =====
	unit<uint32> sub_BouwdeelActief   := subset(is_BouwdeelActief)
	{
		attribute<ProductActieveWoning> ProductActieveWoning_rel := nr_OrgEntity;
		attribute<BO>                   BO_rel                   := ProductActieveWoning/BO_rel[ProductActieveWoning_rel];
		
		attribute<BouwdeelActieveWoning> BouwdeelActieveWoning_rel := rlookup(BO_rel, BouwdeelActieveWoning/BO_rel);
		
		//===== voor woningen met ook actieve bouwdelen worden de gebouwopties per ambitieniveau (x5) berekend =====
		unit<uint32> xIsolatieAmbitie := combine(sub_BouwdeelActief, classifications/IsolatieAmbitie)
		{
			attribute<sub_BouwdeelActief> sub_BouwdeelActief_rel := nr_1;
			attribute<classifications/IsolatieAmbitie> IsolatieAmbitie_rel := nr_2;
			
			attribute<BO> BO_rel := sub_BouwdeelActief/BO_rel[sub_BouwdeelActief_rel];
			
			attribute<BouwdeelActieveWoning> BouwdeelActieveWoning_rel := sub_BouwdeelActief/BouwdeelActieveWoning_rel[sub_BouwdeelActief_rel];
			attribute<BouwdeelActieveWoning/AmbitieBerekening> AmbitieBerekening_rel := combine_data(BouwdeelActieveWoning/AmbitieBerekening, BouwdeelActieveWoning_rel, IsolatieAmbitie_rel);
			attribute<ProductActieveWoning> ProductActieveWoning_rel := sub_BouwdeelActief/ProductActieveWoning_rel[sub_BouwdeelActief_rel];
			
			attribute<Classifications/SchilLabel> SchilLabel_rel := BouwdeelActieveWoning/AmbitieBerekening/schillabel_rel[AmbitieBerekening_rel];
			attribute<Eur   > Ki_gv  := BouwdeelActieveWoning/AmbitieBerekening/Ki_gv[AmbitieBerekening_rel];
			attribute<Eur_yr> Kji_gv := BouwdeelActieveWoning/AmbitieBerekening/Kji_gv[AmbitieBerekening_rel];
			attribute<Eur_yr> Kmi_gv := BouwdeelActieveWoning/AmbitieBerekening/Kmi_gv[AmbitieBerekening_rel];
			
			container Bouwdelen {
				container Isolatie := for_each_nedv(Classifications/Bouwdeel/name
				,	replace('BouwdeelActieveWoning/AmbitieBerekening/Bouwdelen/Isolatie/@BN[AmbitieBerekening_rel]', '@BN', Classifications/Bouwdeel/name)
				,	xIsolatieAmbitie, Classifications/IsolatieNiveau
				);
			}
			
			container AansluitCapaciteit
			{
				attribute<kW> RV (xIsolatieAmbitie) := BouwdeelActieveWoning/AmbitieBerekening/AansluitCapaciteit/RV[AmbitieBerekening_rel];
				attribute<kW> KD (xIsolatieAmbitie) := BouwdeelActieveWoning/AmbitieBerekening/AansluitCapaciteit/KD[AmbitieBerekening_rel];
				attribute<kW> TW (xIsolatieAmbitie) := BouwdeelActieveWoning/AmbitieBerekening/AansluitCapaciteit/TW[AmbitieBerekening_rel];
			}
		}
	}
	//====== Berekeningen voor woningen die actief zijn op minimaal één functioneel product waarbij de bouwdelen allen inactief zijn =====
	unit<uint32> sub_BouwdeelInactief := subset(not(is_BouwdeelActief))
	{
		attribute<ProductActieveWoning> ProductActieveWoning_rel := nr_OrgEntity;
		attribute<BO>                   BO_rel                   := ProductActieveWoning/BO_rel[ProductActieveWoning_rel];
	}
	
	unit<uint32> xIsolatieAmbitie := union_unit(sub_BouwdeelActief/xIsolatieAmbitie, sub_BouwdeelInactief)
	{
		attribute<classifications/IsolatieAmbitie> IsolatieAmbitie_rel := union_data(., sub_BouwdeelActief/xIsolatieAmbitie/IsolatieAmbitie_rel, const(classifications/IsolatieAmbitie/V/geen, sub_BouwdeelInactief));
		
		attribute<BO> BO_rel := union_data(., sub_BouwdeelActief/xIsolatieAmbitie/BO_rel, sub_BouwdeelInactief/BO_rel);
		
		attribute<ProductActieveWoning> ProductActieveWoning_rel := union_data(., sub_BouwdeelActief/xIsolatieAmbitie/ProductActieveWoning_rel, sub_BouwdeelInactief/ProductActieveWoning_rel);
		
		attribute<Classifications/SchilLabel> SchilLabel_rel := union_data(., sub_BouwdeelActief/xIsolatieAmbitie/SchilLabel_rel, BO/SchilLabel_rel[sub_BouwdeelInactief/BO_rel]);
		attribute<Eur   >                     Ki_gv          := union_data(., sub_BouwdeelActief/xIsolatieAmbitie/Ki_gv, const(0[EUR], sub_BouwdeelInactief));
		attribute<Eur_yr>                     Kji_gv         := union_data(., sub_BouwdeelActief/xIsolatieAmbitie/Kji_gv, const(0[EUR_yr], sub_BouwdeelInactief));
		attribute<Eur_yr>                     Kmi_gv         := union_data(., sub_BouwdeelActief/xIsolatieAmbitie/Kmi_gv, const(0[EUR_yr], sub_BouwdeelInactief));
		
		container Bouwdelen {
			container Isolatie := for_each_nedv(Classifications/Bouwdeel/name
			,	replace('union_data(xIsolatieAmbitie, sub_BouwdeelActief/xIsolatieAmbitie/Bouwdelen/Isolatie/@BN, BO/Bouwdelen/Isolatie/@BN[sub_BouwdeelInactief/BO_rel])', '@BN', Classifications/Bouwdeel/name)
			,	xIsolatieAmbitie, Classifications/IsolatieNiveau
			);
		}

		container AansluitCapaciteit
		{
			attribute<kW> RV (xIsolatieAmbitie) := union_data(.., sub_BouwdeelActief/xIsolatieAmbitie/AansluitCapaciteit/RV, BO/AansluitCapaciteit/RV[sub_BouwdeelInactief/BO_rel]);
			attribute<kW> KD (xIsolatieAmbitie) := union_data(.., sub_BouwdeelActief/xIsolatieAmbitie/AansluitCapaciteit/KD, BO/AansluitCapaciteit/KD[sub_BouwdeelInactief/BO_rel]);
			attribute<kW> TW (xIsolatieAmbitie) := union_data(.., sub_BouwdeelActief/xIsolatieAmbitie/AansluitCapaciteit/TW, BO/AansluitCapaciteit/TW[sub_BouwdeelInactief/BO_rel]);
		}
		container functioneel := for_each_nedv(
				Classifications/FunctioneleVraag/name,
				replace(
					'union_data(.., '
						'BouwdeelActieveWoning/AmbitieBerekening/functioneel/@PT@[sub_BouwdeelActief/xIsolatieAmbitie/AmbitieBerekening_rel], '
						'BO/functioneel/@PT@[sub_BouwdeelInactief/BO_rel])'
				, '@PT@', Classifications/FunctioneleVraag/name ),
				xIsolatieAmbitie,
				GJ_yr);
		
		unit<uint32> Optie_xIsolatieAmbitie := combine(OptiesHere, xIsolatieAmbitie)
		{
			attribute<bool> Criterium := ='union_data(Optie_xIsolatieAmbitie, '+AsItemList(OptiesHere/Criterium_Expr2)+')';
		}
		
		unit<uint32> PAW_xInvesteringsOptie := combine(xIsolatieAmbitie, Classifications/GebouwOptieCategorie)
		{
			attribute<xIsolatieAmbitie>                     xIsolatieAmbitie_rel     := nr_1;
			attribute<Classifications/GebouwOptieCategorie> GebouwOptieCategorie_rel := nr_2;
			
			attribute<ProductActieveWoning> ProductActieveWoning_rel := xIsolatieAmbitie/ProductActieveWoning_rel[xIsolatieAmbitie_rel];
			attribute<Classifications/IsolatieAmbitie>      IsolatieAmbitie_rel      := xIsolatieAmbitie/IsolatieAmbitie_rel     [xIsolatieAmbitie_rel];
			attribute<Classifications/InvesteringsOptie>    InvesteringsOptie_rel    := combine_data(Classifications/InvesteringsOptie, GebouwOptieCategorie_rel, IsolatieAmbitie_rel);
			
			container Bouwdelen {
				container Isolatie := for_each_nedv(Classifications/Bouwdeel/name
				,	replace('xIsolatieAmbitie/Bouwdelen/Isolatie/@BN[xIsolatieAmbitie_rel]', '@BN', Classifications/Bouwdeel/name)
				,	PAW_xInvesteringsOptie, Classifications/IsolatieNiveau
				);
			}
			container AansluitCapaciteit
			{
				attribute<kW> RV (PAW_xInvesteringsOptie) := xIsolatieAmbitie/AansluitCapaciteit/RV[xIsolatieAmbitie_rel];
				attribute<kW> KD (PAW_xInvesteringsOptie) := xIsolatieAmbitie/AansluitCapaciteit/KD[xIsolatieAmbitie_rel];
				attribute<kW> TW (PAW_xInvesteringsOptie) := xIsolatieAmbitie/AansluitCapaciteit/TW[xIsolatieAmbitie_rel];
			}
		}
		
		// TODO OPTIMIZE: consider gebruik Optie_xIsolatieAmbitie zonder transponeren in fast mode
//		unit<uint32> xGebouwOptie := combine(xIsolatieAmbitie, OptiesHere) 
		unit<uint32> xGebouwOptie_Org := range(uint32, 0, #xIsolatieAmbitie * #OptiesHere); // TODO OPTIMIZE: consider gebruik Optie_xIsolatieAmbitie zonder transponeren in fast mode
		unit<uint32> xGebouwOptie := TiledUnit((256*256)[xGebouwOptie_Org])
		{
			attribute<xIsolatieAmbitie>  xIsolatieAmbitie_rel := value(ID(.) / #OptiesHere, xIsolatieAmbitie); //nr_1
			attribute<OptiesHere>        OptiesHere_rel       := value(ID(.) % #OptiesHere, OptiesHere); //nr_2
			
			attribute<BO>         BO_rel  := xIsolatieAmbitie/BO_rel[xIsolatieAmbitie_rel];
			attribute<Classifications/GebouwOptie>           GebouwOptie_rel     := OptiesHere/GebouwOptie_rel[OptiesHere_rel];
			attribute<Classifications/GebouwOptieCategorie>  Categorie_rel       := OptiesHere/Categorie_rel  [OptiesHere_rel];
			attribute<Classifications/IsolatieAmbitie> IsolatieAmbitie_rel := xIsolatieAmbitie/IsolatieAmbitie_rel[xIsolatieAmbitie_rel];
			attribute<PAW_xInvesteringsOptie> PAW_xInvesteringsOptie_rel := combine_data(PAW_xInvesteringsOptie, xIsolatieAmbitie_rel, Categorie_rel);
			
			attribute<Optie_xIsolatieAmbitie> Optie_xIsolatieAmbitie_rel := combine_data(Optie_xIsolatieAmbitie, OptiesHere_rel, xIsolatieAmbitie_rel);
			
			attribute<bool> Criterium := Optie_xIsolatieAmbitie/Criterium[Optie_xIsolatieAmbitie_rel];
			
			attribute<Classifications/SchilLabel>  Schillabel_rel := xIsolatieAmbitie/Schillabel_rel[xIsolatieAmbitie_rel];
			
			container Bouwdelen {
				container Isolatie := for_each_nedv(Classifications/Bouwdeel/name
				,	replace('xIsolatieAmbitie/Bouwdelen/Isolatie/@BN[xIsolatieAmbitie_rel]', '@BN', Classifications/Bouwdeel/name)
				,	xGebouwOptie, Classifications/IsolatieNiveau
				);
			}
			container AansluitCapaciteit
			{
				attribute<kW> RV (xGebouwOptie) := xIsolatieAmbitie/AansluitCapaciteit/RV[xIsolatieAmbitie_rel];
				attribute<kW> KD (xGebouwOptie) := xIsolatieAmbitie/AansluitCapaciteit/KD[xIsolatieAmbitie_rel];
				attribute<kW> TW (xGebouwOptie) := xIsolatieAmbitie/AansluitCapaciteit/TW[xIsolatieAmbitie_rel];
			}
			container functioneel := for_each_nedv(
				Classifications/FunctioneleVraag/name,
				replace(
					'xIsolatieAmbitie/functioneel/@PT@[xIsolatieAmbitie_rel]'
				,	'@PT@', Classifications/FunctioneleVraag/name ),
				xGebouwOptie,
				GJ_yr);
			attribute<EUR>    Ki_gv  := xIsolatieAmbitie/Ki_gv[xIsolatieAmbitie_rel];
			attribute<EUR_yr> Kji_gv := xIsolatieAmbitie/Kji_gv[xIsolatieAmbitie_rel];
			attribute<EUR_yr> Kmi_gv := xIsolatieAmbitie/Kmi_gv[xIsolatieAmbitie_rel];
		}
	}	
}
