//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) Hestia 2021 - Planbureau voor de Leefomgeving                  //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//           Dit is de container met rekenschema's die werken op Bebouwing              //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

//====== Berekeningen voor woningen die actief zijn op minimaal één functioneel product =====
unit<uint32> ProductActieveWoning := subset(not(BO/Afbouw) && BO/Activatie/ProductActief)
{		
	attribute<BO> BO_rel := nr_OrgEntity;
//REMOVE	attribute<string> code  := BO/code[BO_rel];
	
	//====== Indeling van gebouwopties in categorieën: ketelopties (vaak gas), all-electric opties, en hybride opties =====
	container OptiesPerCategorie := for_each_ne(Classifications/GebouwOptieCategorie/name, 'CategorieT(Classifications/GebouwOptieCategorie/V/'+Classifications/GebouwOptieCategorie/name+')');
	template CategorieT
	{
		//case parameters
		parameter<Classifications/GebouwOptieCategorie> Categorie_sel;
		//end case parameters
		unit<uint8> Gebouwopties_sel := subset(classifications/gebouwoptie/categorie_rel == Categorie_sel)
		{
			attribute<classifications/gebouwoptie> GebouwOptie_rel := nr_orgentity;
			attribute<string> name  := classifications/gebouwoptie/name[GebouwOptie_rel];
			attribute<string> label := name, DialogType = "LabelText";
			attribute<string> Criterium_expr := ='replace_value(LowerCase(union_data(., '+AsItemList('LocatieSpecifiekeOpties/GebouwOpties/'+name)+')), ''criteria/always'', '''')';
			container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
		}
	}
	
	attribute<bool> BouwdeelActief     := BO/Activatie/BouwdeelActief[BO_rel], Descr = "Check of ook bouwdelen actief zijn";
	
	//====== Berekeningen voor woningen die actief zijn op minimaal één functioneel product en ook op één of meerdere bouwdelen =====
	unit<uint32> BouwdeelActiefBO   := subset(BouwdeelActief)
	{
//REMOVE unit<uint32> LocalBOdomain := BouwdeelActiefBO;
		attribute<ProductActieveWoning> ProductActieveWoning_rel := nr_OrgEntity;
		attribute<BO> BO_rel := ProductActieveWoning/BO_rel[ProductActieveWoning_rel];
		

//REMOVE		attribute<string> code     := ProductActieveWoning/code[ProductActieveWoning_rel];
		
		attribute<BouwdeelActieveWoning> BouwdeelActieveWoning_rel := rlookup(BO_rel, BouwdeelActieveWoning/BO_rel);
//REMOVE		attribute<uint32> BouwdeelActieveWoning_rel := rlookup(code, BouwdeelActieveWoning/code);
		
		//===== voor woningen met ook actieve bouwdelen worden de gebouwopties per ambitieniveau (x5) berekend =====
		container OptiesPerAmbitie := for_each_ne(Classifications/IsolatieAmbitie/name, 'GebouwOptiesPerIsolatieAmbitieT('+ Quote(Classifications/IsolatieAmbitie/name)+', BouwdeelActiefBO)');
		
		container Afweging := for_each_nedv(
			Classifications/IsolatieAmbitie/name,
			'OptiesPerAmbitie/'+Classifications/IsolatieAmbitie/name+'/Results/kosten_tbv_afweging',
			BouwdeelActiefBO,
			Eur_yr);
			
		attribute<Classifications/IsolatieAmbitie> Chosen_Ambitie (BouwdeelActiefBO) := ='argmin(' + AsItemList( 'Afweging/' + Classifications/IsolatieAmbitie/name)+ ')[Classifications/IsolatieAmbitie]'; //TODO: Hier S-curves toepassen
		
		container results
		{
			attribute<eur_yr>                      kosten_tbv_afweging (BouwdeelActiefBO) := ='merge(Chosen_Ambitie, eur_yr                     , '+AsItemList('OptiesPerAmbitie/'+Classifications/IsolatieAmbitie/name+'/results/kosten_tbv_afweging')+')';
			attribute<Classifications/GebouwOptie> GebouwOptie_rel     (BouwdeelActiefBO) := ='merge(Chosen_Ambitie, Classifications/GebouwOptie, '+AsItemList('OptiesPerAmbitie/'+Classifications/IsolatieAmbitie/name+'/results/GebouwOptie_rel')+')';
			attribute<Classifications/Schillabel>  Schillabel_rel      (BouwdeelActiefBO) := ='merge(Chosen_Ambitie, Classifications/Schillabel , '+AsItemList('OptiesPerAmbitie/'+Classifications/IsolatieAmbitie/name+'/results/Schillabel_rel')+')';
			
			container BemeterdeGebouwInput_rel := for_each_nedv(
					Classifications/Product/name,
					'merge(Chosen_Ambitie,Classifications/BemeterdeGebouwInput, '+
						replace(AsItemList( replace('OptiesPerAmbitie/@IA@/results/BemeterdeGebouwInput_rel/@PT@', '@IA@', Classifications/IsolatieAmbitie/name)), '@PT@', Classifications/Product/name )+')',
					BouwdeelActiefBO,
					Classifications/BemeterdeGebouwInput);
			container eenmalig := for_each_nedv(
					Classifications/GebouwOptie_eenmalig/name,
					'merge(Chosen_Ambitie,Eur, '+
						replace(AsItemList( replace('OptiesPerAmbitie/@IA@/results/eenmalig/@PT@', '@IA@', Classifications/IsolatieAmbitie/name)), '@PT@', Classifications/GebouwOptie_eenmalig/name )+')',
					BouwdeelActiefBO,
					Eur);
			container jaarlijks := for_each_nedv(
					Classifications/GebouwOptie_jaarlijks/name,
					'merge(Chosen_Ambitie,Eur_yr, '+
						replace(AsItemList( replace('OptiesPerAmbitie/@IA@/results/jaarlijks/@PT@', '@IA@', Classifications/IsolatieAmbitie/name)), '@PT@', Classifications/GebouwOptie_jaarlijks/name )+')',
					BouwdeelActiefBO,
					Eur_yr);
			container metervraag := for_each_nedv(
					'Vj_'+Classifications/BemeterdeGebouwInput/name,
					'merge(Chosen_Ambitie,GJ_yr, '+
						replace(AsItemList( replace('OptiesPerAmbitie/@IA@/results/metervraag/Vj_@PT@', '@IA@', Classifications/IsolatieAmbitie/name)), '@PT@', Classifications/BemeterdeGebouwInput/name )+')',
					BouwdeelActiefBO,
					GJ_yr);
			container functioneel := for_each_nedv(
					'V_'+Classifications/FunctioneleVraag/name,
					'merge(Chosen_Ambitie,GJ_yr, '+
						replace(AsItemList( replace('OptiesPerAmbitie/@IA@/results/functioneel/V_@PT@', '@IA@', Classifications/IsolatieAmbitie/name)), '@PT@', Classifications/FunctioneleVraag/name )+')',
					BouwdeelActiefBO,
					GJ_yr);
			container InstallatiePerProduct := for_each_nedv(
				Classifications/Product/name,
				'merge(Chosen_Ambitie,Classifications/Installatie, '+
					replace(AsItemList( replace('OptiesPerAmbitie/@IA@/results/InstallatiePerProduct/@PT@', '@IA@', Classifications/IsolatieAmbitie/name)), '@PT@', Classifications/Product/name )+')',
				BouwdeelActiefBO,
				Classifications/Installatie)
			{
				attribute<Classifications/AfgifteSysteem>                             AS (BouwdeelActiefBO) := ='merge(Chosen_Ambitie, Classifications/AfgifteSysteem                            , '+AsItemList('OptiesPerAmbitie/'+Classifications/IsolatieAmbitie/name+'/results/InstallatiePerProduct/AS')+')';
				attribute<Invoer/Kengetallen/OverigeInstallaties/VT/Installatietypes> VT (BouwdeelActiefBO) := ='merge(Chosen_Ambitie, Invoer/Kengetallen/OverigeInstallaties/VT/Installatietypes, '+AsItemList('OptiesPerAmbitie/'+Classifications/IsolatieAmbitie/name+'/results/InstallatiePerProduct/VT')+')';
				attribute<Invoer/Kengetallen/OverigeInstallaties/DK/Installatietypes> DK (BouwdeelActiefBO) := ='merge(Chosen_Ambitie, Invoer/Kengetallen/OverigeInstallaties/DK/Installatietypes, '+AsItemList('OptiesPerAmbitie/'+Classifications/IsolatieAmbitie/name+'/results/InstallatiePerProduct/DK')+')';
				attribute<Invoer/Kengetallen/OverigeInstallaties/KK/Installatietypes> KK (BouwdeelActiefBO) := ='merge(Chosen_Ambitie, Invoer/Kengetallen/OverigeInstallaties/KK/Installatietypes, '+AsItemList('OptiesPerAmbitie/'+Classifications/IsolatieAmbitie/name+'/results/InstallatiePerProduct/KK')+')';
			}
			
			container Bouwdelen := for_each_nedv(
				Classifications/Bouwdeel/name,
				'merge(Chosen_Ambitie,Classifications/IsolatieNiveau, '+
					replace(AsItemList( replace('OptiesPerAmbitie/@IA@/results/Bouwdelen/@PT@', '@IA@', Classifications/IsolatieAmbitie/name)), '@PT@', Classifications/Bouwdeel/name )+')',
				BouwdeelActiefBO,
				Classifications/IsolatieNiveau);
		}
		
		Template GebouwOptiesPerIsolatieAmbitieT
		{
			//case parameters
			parameter<string> Ambitie_str_partial;
			unit<uint32> GivenBouwdeelBO;
			//end case parameters
			parameter<string> Ambitie_str := 'Classifications/IsolatieAmbitie/V/'+Ambitie_str_partial;
			parameter<classifications/IsolatieAmbitie> IsolatieAmbitie_rel := =Ambitie_str;

			unit<uint32> LocalBouwdeelBO := GivenBouwdeelBO {
				attribute<Classifications/SchilLabel> SchilLabel_rel := = 'BouwdeelActieveWoning/Results/' + Ambitie_str_partial + '/Functioneel/schillabel_rel[BouwdeelActieveWoning_rel]';
			}

			//===== binnen het ambitieniveau worden de gebouwopties per categorie berekend =====
			container PerCategorie := for_each_ne(Classifications/GebouwOptieCategorie/name, 'CategorieOptieT('+ Quote(Classifications/GebouwOptieCategorie/name)+',LocalBouwdeelBO)');
			
			container Afweging := for_each_nedv(
				Classifications/GebouwOptieCategorie/name,
				'PerCategorie/'+Classifications/GebouwOptieCategorie/name+'/Results/kosten_tbv_afweging',
				LocalBouwdeelBO,
				Eur_yr);
			
			attribute<Classifications/GebouwOptieCategorie> Chosen_Categorie (LocalBouwdeelBO) := ='argmin(' + AsItemList( 'Afweging/' + Classifications/GebouwOptieCategorie/name)+ ')[Classifications/GebouwOptieCategorie]'; //TODO: Hier S-curves toepassen
		
			container results := PerCategorieResultsT(LocalBouwdeelBO,Chosen_Categorie);
		}
	}
	
	//====== Berekeningen voor woningen die actief zijn op minimaal één functioneel product waarbij de bouwdelen allen inactief zijn =====
	unit<uint32> BouwdeelInactiefBO := subset(not(BouwdeelActief))
	{
		attribute<ProductActieveWoning> ProductActieveWoning_rel := nr_OrgEntity;
		attribute<BO> BO_rel    := ProductActieveWoning/BO_rel[ProductActieveWoning_rel];
		attribute<Classifications/SchilLabel> SchilLabel_rel := BO/SchilLabel_rel[BO_rel];
		
		parameter<string> Ambitie_str := '(0/0)[Classifications/IsolatieAmbitie]';
		
		//===== gebouwopties per categorie berekend =====
		container PerCategorie := for_each_ne(Classifications/GebouwOptieCategorie/name, 'CategorieOptieT('+ Quote(Classifications/GebouwOptieCategorie/name)+',BouwdeelInactiefBO)');
		
		container Afweging := for_each_nedv(
			Classifications/GebouwOptieCategorie/name,
			'PerCategorie/'+Classifications/GebouwOptieCategorie/name+'/Results/kosten_tbv_afweging',
			BouwdeelInactiefBO,
			Eur_yr);
			
		attribute<Classifications/GebouwOptieCategorie> Chosen_Categorie (BouwdeelInactiefBO) := ='argmin(' + AsItemList( 'Afweging/' + Classifications/GebouwOptieCategorie/name)+ ')[Classifications/GebouwOptieCategorie]'; //TODO: Hier S-curves toepassen
		
		container results := PerCategorieResultsT(BouwdeelInactiefBO,Chosen_Categorie);
	}
	Template CategorieOptieT
	{
		//case parameters
		parameter<string> Categorie_str;
		unit<uint32> VirtualBO;
		//end case parameters
					
		unit<uint8> OptiesHere := ='OptiesPerCategorie/' +Categorie_str+ '/Gebouwopties_sel'
		{
			attribute<string> Criterium_Expr2 := replace_value(Criterium_expr, '', 'const(true, VirtualBO)')+'[VirtualBO/BO_rel]';
		}
		
		unit<uint32> Optie_VirtualBO := combine(OptiesHere, VirtualBO)
		{
			attribute<bool> Criterium := ='union_data(Optie_VirtualBO, '+AsItemList(OptiesHere/Criterium_Expr2)+')';
		}
		unit<uint32> VirtualBO_Optie := combine(VirtualBO, OptiesHere)
		{
			attribute<VirtualBO>  VirtualBO_rel  := nr_1;
			attribute<OptiesHere> OptiesHere_rel := nr_2;
			
			attribute<BO>         BO_rel  := VirtualBO/BO_rel[VirtualBO_rel];
			attribute<Classifications/GebouwOptie> GebouwOptie_rel := OptiesHere/GebouwOptie_rel[OptiesHere_rel];
			
			attribute<Optie_VirtualBO> Optie_VirtualBO_rel := combine_data(Optie_VirtualBO, OptiesHere_rel, VirtualBO_rel);
			
			attribute<bool> Criterium := Optie_VirtualBO/Criterium[Optie_VirtualBO_rel];
			
			attribute<Classifications/SchilLabel>  Schillabel_rel := VirtualBO/Schillabel_rel[VirtualBO_rel];
			
//			unit<uint32> BAW := BouwdeelActieveWoning;
			attribute<uint32> BAW_rel := VirtualBO/BouwdeelActieveWoning_rel[VirtualBO_rel];
		}
		
		container GebouwOpties := SubsetGebouwOptieT(VirtualBO_Optie, VirtualBO_Optie/GebouwOptie_rel, VirtualBO_Optie/Criterium, (0/0)[Classifications/IsolatieAmbitie]);
				
		container Afweging 
		{
			container kosten := for_each_nedv( // TODO: uitnormaliseren en wegsubstitueren
				OptiesHere/name,
				'GebouwOpties/kosten_tbv_afweging[combine_data(VirtualBO_Optie, ID(VirtualBO), '+string(ID(OptiesHere))+'[OptiesHere])]',
				VirtualBO,
				eur_yr);
		}
		attribute<OptiesHere> Chosen_Optie (VirtualBO) := ='argmin(' + AsItemList( 'Afweging/kosten/' + OptiesHere/name)+ ')[OptiesHere]'; //TODO: Hier S-curves toepassen
		attribute<VirtualBO_Optie> Chosen_VirtualBO_Optie_rel(VirtualBO) := combine_data(VirtualBO_Optie, ID(VirtualBO), Chosen_Optie);
		
		container results
		{
			attribute<eur_yr>                      kosten_tbv_afweging (VirtualBO) := ='merge(Chosen_Optie, eur_yr                     , '+AsItemList('Afweging/kosten/'+OptiesHere/name)+')';
			attribute<Classifications/GebouwOptie> GebouwOptie_rel     (VirtualBO) := OptiesHere/GebouwOptie_rel[Chosen_Optie];
			attribute<Classifications/Schillabel>  Schillabel_rel      (VirtualBO) := VirtualBO/SchilLabel_rel; // is onveranderd door gebouwoptie // TODO: uitnormaliseren en wegsubstitueren
			//MakeDefined(VirtualBO_Optie/SchilLabel_rel[Chosen_VirtualBO_Optie_rel], VirtualBO/SchilLabel_rel);
			
			container BemeterdeGebouwInput_rel := for_each_nedv(
				Classifications/Product/name,
				replace('GebouwOpties/results/BemeterdeGebouwInput_rel/@PT@[Chosen_VirtualBO_Optie_rel]', '@PT@', Classifications/Product/name ),
				VirtualBO,
				Classifications/BemeterdeGebouwInput);
				
			container eenmalig := for_each_nedv(
				Classifications/GebouwOptie_eenmalig/name,
				replace('GebouwOpties/results/eenmalig/@PT@[Chosen_VirtualBO_Optie_rel]', '@PT@', Classifications/GebouwOptie_eenmalig/name ),
				VirtualBO,
				Eur);
			container jaarlijks := for_each_nedv(
				Classifications/GebouwOptie_jaarlijks/name,
				replace('GebouwOpties/results/jaarlijks/@PT@[Chosen_VirtualBO_Optie_rel]', '@PT@', Classifications/GebouwOptie_jaarlijks/name ),
				VirtualBO,
				Eur_yr);
			container metervraag := for_each_nedv(
				'Vj_'+Classifications/BemeterdeGebouwInput/name,
				replace('GebouwOpties/results/metervraag/Vj_@PT@[Chosen_VirtualBO_Optie_rel]', '@PT@', Classifications/BemeterdeGebouwInput/name ),
				VirtualBO,
				GJ_yr);
			container functioneel := for_each_nedv(
				'V_'+Classifications/FunctioneleVraag/name,
				replace('GebouwOpties/results/functioneel/V_@PT@[Chosen_VirtualBO_Optie_rel]', '@PT@', Classifications/FunctioneleVraag/name ),
				VirtualBO,
				GJ_yr);
			container InstallatiePerProduct := for_each_nedv(
				Classifications/Product/name,
				replace('GebouwOpties/results/InstallatiePerProduct/@PT@[Chosen_VirtualBO_Optie_rel]', '@PT@', Classifications/Product/name ),
				VirtualBO,
				Classifications/Installatie)
			{
				attribute<Classifications/AfgifteSysteem>                             AS (VirtualBO) := GebouwOpties/results/InstallatiePerProduct/AS[Chosen_VirtualBO_Optie_rel];
				attribute<Invoer/Kengetallen/OverigeInstallaties/VT/Installatietypes> VT (VirtualBO) := GebouwOpties/results/InstallatiePerProduct/VT[Chosen_VirtualBO_Optie_rel];
				attribute<Invoer/Kengetallen/OverigeInstallaties/DK/Installatietypes> DK (VirtualBO) := GebouwOpties/results/InstallatiePerProduct/DK[Chosen_VirtualBO_Optie_rel];
				attribute<Invoer/Kengetallen/OverigeInstallaties/KK/Installatietypes> KK (VirtualBO) := GebouwOpties/results/InstallatiePerProduct/KK[Chosen_VirtualBO_Optie_rel];
			}
			container Bouwdelen := for_each_nedv(
				Classifications/Bouwdeel/name,
				replace('GebouwOpties/results/Bouwdelen/@PT@[Chosen_VirtualBO_Optie_rel]', '@PT@', Classifications/Bouwdeel/name ),
				VirtualBO,
				Classifications/IsolatieNiveau);
		}
	}
	Template PerCategorieResultsT
	{
		// case parameters
		unit<uint32> VirtualBO;
		attribute<Classifications/GebouwOptieCategorie> Chosen_Categorie (VirtualBO);
		// end case parameters
		
		attribute<eur_yr>                      kosten_tbv_afweging (VirtualBO) := ='merge(uint8(Chosen_Categorie), eur_yr                     , '+AsItemList('PerCategorie/'+Classifications/GebouwOptieCategorie/name+'/results/kosten_tbv_afweging')+')';
		attribute<Classifications/GebouwOptie> GebouwOptie_rel     (VirtualBO) := ='merge(uint8(Chosen_Categorie), Classifications/GebouwOptie, '+AsItemList('PerCategorie/'+Classifications/GebouwOptieCategorie/name+'/results/GebouwOptie_rel')+')';
		attribute<Classifications/Schillabel>  Schillabel_rel      (VirtualBO) := ='merge(uint8(Chosen_Categorie), Classifications/Schillabel , '+AsItemList('PerCategorie/'+Classifications/GebouwOptieCategorie/name+'/results/Schillabel_rel')+')';
		
		container BemeterdeGebouwInput_rel := for_each_nedv(
			Classifications/Product/name,
			'merge(uint8(Chosen_Categorie),Classifications/BemeterdeGebouwInput, '+
				replace(AsItemList( replace('PerCategorie/@IA@/results/BemeterdeGebouwInput_rel/@PT@', '@IA@', Classifications/GebouwOptieCategorie/name)), '@PT@', Classifications/Product/name )+')',
			VirtualBO,
			Classifications/BemeterdeGebouwInput);
		container eenmalig := for_each_nedv(
			Classifications/GebouwOptie_eenmalig/name,
			'merge(uint8(Chosen_Categorie),Eur, '+
				replace(AsItemList( replace('PerCategorie/@IA@/results/eenmalig/@PT@', '@IA@', Classifications/GebouwOptieCategorie/name)), '@PT@', Classifications/GebouwOptie_eenmalig/name )+')',
			VirtualBO,
			Eur);
		container jaarlijks := for_each_nedv(
			Classifications/GebouwOptie_jaarlijks/name,
			'merge(uint8(Chosen_Categorie),Eur_yr, '+
				replace(AsItemList( replace('PerCategorie/@IA@/results/jaarlijks/@PT@', '@IA@', Classifications/GebouwOptieCategorie/name)), '@PT@', Classifications/GebouwOptie_jaarlijks/name )+')',
			VirtualBO,
			Eur_yr);
		container metervraag := for_each_nedv(
			'VJ_'+Classifications/BemeterdeGebouwInput/name,
			'merge(uint8(Chosen_Categorie),GJ_yr, '+
				replace(AsItemList( replace('PerCategorie/@IA@/results/metervraag/Vj_@PT@', '@IA@', Classifications/GebouwOptieCategorie/name)), '@PT@', Classifications/BemeterdeGebouwInput/name )+')',
			VirtualBO,
			GJ_yr);
		container functioneel := for_each_nedv(
			'V_'+Classifications/FunctioneleVraag/name,
			'merge(uint8(Chosen_Categorie),GJ_yr, '+
				replace(AsItemList( replace('PerCategorie/@IA@/results/functioneel/V_@PT@', '@IA@', Classifications/GebouwOptieCategorie/name)), '@PT@', Classifications/FunctioneleVraag/name )+')',
			VirtualBO,
			GJ_yr);
		container InstallatiePerProduct := for_each_nedv(
			Classifications/Product/name,
			'merge(uint8(Chosen_Categorie),Classifications/Installatie, '+
				replace(AsItemList( replace('PerCategorie/@IA@/results/InstallatiePerProduct/@PT@', '@IA@', Classifications/GebouwOptieCategorie/name)), '@PT@', Classifications/Product/name )+')',
			VirtualBO,
			Classifications/Installatie)
		{
			attribute<Classifications/AfgifteSysteem>                             AS (VirtualBO) := ='merge(uint8(Chosen_Categorie), Classifications/AfgifteSysteem                            , '+AsItemList('PerCategorie/'+Classifications/GebouwOptieCategorie/name+'/results/InstallatiePerProduct/AS')+')';
			attribute<Invoer/Kengetallen/OverigeInstallaties/VT/Installatietypes> VT (VirtualBO) := ='merge(uint8(Chosen_Categorie), Invoer/Kengetallen/OverigeInstallaties/VT/Installatietypes, '+AsItemList('PerCategorie/'+Classifications/GebouwOptieCategorie/name+'/results/InstallatiePerProduct/VT')+')';
			attribute<Invoer/Kengetallen/OverigeInstallaties/DK/Installatietypes> DK (VirtualBO) := ='merge(uint8(Chosen_Categorie), Invoer/Kengetallen/OverigeInstallaties/DK/Installatietypes, '+AsItemList('PerCategorie/'+Classifications/GebouwOptieCategorie/name+'/results/InstallatiePerProduct/DK')+')';
			attribute<Invoer/Kengetallen/OverigeInstallaties/KK/Installatietypes> KK (VirtualBO) := ='merge(uint8(Chosen_Categorie), Invoer/Kengetallen/OverigeInstallaties/KK/Installatietypes, '+AsItemList('PerCategorie/'+Classifications/GebouwOptieCategorie/name+'/results/InstallatiePerProduct/KK')+')';
		}
		container Bouwdelen := for_each_nedv(
			Classifications/Bouwdeel/name,
			'merge(uint8(Chosen_Categorie),Classifications/IsolatieNiveau, '+
				replace(AsItemList( replace('PerCategorie/@IA@/results/Bouwdelen/@PT@', '@IA@', Classifications/GebouwOptieCategorie/name)), '@PT@', Classifications/Bouwdeel/name )+')',
			VirtualBO,
			Classifications/IsolatieNiveau);
	}
	
	attribute<BouwdeelInactiefBO> BouwdeelInactiefBO_rel (BO) := invert(BouwdeelInactiefBO/BO_rel);
	attribute<BouwdeelActiefBO>   BouwdeelActiefBO_rel   (BO) := invert(BouwdeelActiefBO/BO_rel);
	container results
	{
		attribute<eur_yr>                      kosten_tbv_afweging (BO) := makedefined(BouwdeelActiefBO/results/kosten_tbv_afweging[BouwdeelActiefBO_rel], BouwdeelInactiefBO/results/kosten_tbv_afweging[BouwdeelInactiefBO_rel]);
		attribute<Classifications/GebouwOptie> GebouwOptie_rel     (BO) := makedefined(BouwdeelActiefBO/results/GebouwOptie_rel    [BouwdeelActiefBO_rel], BouwdeelInactiefBO/results/GebouwOptie_rel    [BouwdeelInactiefBO_rel]);
		attribute<Classifications/Schillabel>  Schillabel_rel      (BO) := makedefined(BouwdeelActiefBO/results/Schillabel_rel     [BouwdeelActiefBO_rel], BouwdeelInactiefBO/results/Schillabel_rel     [BouwdeelInactiefBO_rel]);
		
		container BemeterdeGebouwInput_rel := for_each_nedv(
			Classifications/Product/name,
			'makedefined(BouwdeelActiefBO/results/BemeterdeGebouwInput_rel/'+Classifications/Product/name+'[BouwdeelActiefBO_rel], BouwdeelInactiefBO/results/BemeterdeGebouwInput_rel/'+Classifications/Product/name+'[BouwdeelInactiefBO_rel])',
			BO,
			Classifications/BemeterdeGebouwInput);
		container eenmalig := for_each_nedv(
			Classifications/GebouwOptie_eenmalig/name,
			'makedefined(BouwdeelActiefBO/results/eenmalig/'+Classifications/GebouwOptie_eenmalig/name+'[BouwdeelActiefBO_rel], BouwdeelInactiefBO/results/eenmalig/'+Classifications/GebouwOptie_eenmalig/name+'[BouwdeelInactiefBO_rel])',
			BO,
			Eur);
		container jaarlijks := for_each_nedv(
			Classifications/GebouwOptie_jaarlijks/name,
			'makedefined(BouwdeelActiefBO/results/jaarlijks/'+Classifications/GebouwOptie_jaarlijks/name+'[BouwdeelActiefBO_rel], BouwdeelInactiefBO/results/jaarlijks/'+Classifications/GebouwOptie_jaarlijks/name+'[BouwdeelInactiefBO_rel])',
			BO,
			Eur_yr);
		container metervraag := for_each_nedv(
			'Vj_'+Classifications/BemeterdeGebouwInput/name,
			'makedefined(BouwdeelActiefBO/results/metervraag/Vj_'+Classifications/BemeterdeGebouwInput/name+'[BouwdeelActiefBO_rel], BouwdeelInactiefBO/results/metervraag/Vj_'+Classifications/BemeterdeGebouwInput/name+'[BouwdeelInactiefBO_rel])',
			BO,
			GJ_yr);
		container functioneel := for_each_nedv(
			'V_'+Classifications/FunctioneleVraag/name,
			'makedefined(BouwdeelActiefBO/results/functioneel/V_'+Classifications/FunctioneleVraag/name+'[BouwdeelActiefBO_rel], BouwdeelInactiefBO/results/functioneel/V_'+Classifications/FunctioneleVraag/name+'[BouwdeelInactiefBO_rel])',
			BO,
			GJ_yr);
		
		container InstallatiePerProduct := for_each_nedv(
			Classifications/Product/name,
			'makedefined(BouwdeelActiefBO/results/InstallatiePerProduct/'+Classifications/Product/name+'[BouwdeelActiefBO_rel], BouwdeelInactiefBO/results/InstallatiePerProduct/'+Classifications/Product/name+'[BouwdeelInactiefBO_rel])',
			BO,
			Classifications/Installatie)
		{
			attribute<Classifications/AfgifteSysteem>                             AS (BO) := makedefined(BouwdeelActiefBO/results/InstallatiePerProduct/AS     [BouwdeelActiefBO_rel], BouwdeelInactiefBO/results/InstallatiePerProduct/AS     [BouwdeelInactiefBO_rel]);
			attribute<Invoer/Kengetallen/OverigeInstallaties/VT/Installatietypes> VT (BO) := makedefined(BouwdeelActiefBO/results/InstallatiePerProduct/VT     [BouwdeelActiefBO_rel], BouwdeelInactiefBO/results/InstallatiePerProduct/VT     [BouwdeelInactiefBO_rel]);
			attribute<Invoer/Kengetallen/OverigeInstallaties/DK/Installatietypes> DK (BO) := makedefined(BouwdeelActiefBO/results/InstallatiePerProduct/DK     [BouwdeelActiefBO_rel], BouwdeelInactiefBO/results/InstallatiePerProduct/DK     [BouwdeelInactiefBO_rel]);
			attribute<Invoer/Kengetallen/OverigeInstallaties/KK/Installatietypes> KK (BO) := makedefined(BouwdeelActiefBO/results/InstallatiePerProduct/KK     [BouwdeelActiefBO_rel], BouwdeelInactiefBO/results/InstallatiePerProduct/KK     [BouwdeelInactiefBO_rel]);
		}
		
		container Bouwdelen := for_each_nedv(
			Classifications/Bouwdeel/name,
			'makedefined(BouwdeelActiefBO/results/Bouwdelen/'+Classifications/Bouwdeel/name+'[BouwdeelActiefBO_rel], BouwdeelInactiefBO/results/Bouwdelen/'+Classifications/Bouwdeel/name+'[BouwdeelInactiefBO_rel])',
			BO,
			Classifications/IsolatieNiveau);
	}
}
