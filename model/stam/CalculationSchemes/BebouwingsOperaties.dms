//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) Hestia 2021 - PBL & TNO                                        //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//           Dit is de container met rekenschema's die werken op Bebouwing              //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

container BebouwingsOperaties
{
	template Samenstelling
	{
		// begin case parameters
		unit<uint32> BestaandeWoning;
	//	unit<uint32> NieuwbouwWoning;
		parameter<bool> HasWoningResterendFactors;
		container WoningResterendFactors;

	//	unit<uint32> BestaandeUtil;
	//	unit<uint32> NieuwbouwUtil;
	//	parameter<bool> HasUtilResterendFactors;
	//	container UtilResterendFactors;
		// end case parameters
		
		unit<uint32> Woning := BestaandeWoning;
	//	unit<uint32> Util   := BestaandeUtil;
		
	}

	template Union
	{
		// begin case parameters
		unit<uint32> Bestaand;
		unit<uint32> Nieuwbouw;
		// end case parameters


		unit<uint32> result := union_unit(Bestaand, Nieuwbouw)
		,	DialogType = "Map"
		,	DialogData = "geometry"
		{
			unit<uint16> ModelObjectKeyDomein := classifications/combines/WBE, IsHidden = "True";
			
			attribute<Geography/rdc_meter> geometry := union_data(., Bestaand/geometry, Nieuwbouw/geometry), ishidden = "True";
			attribute<string>              code     := = Zichtjaar_jaar >= 2024[yr_uint16] ? 'union_data(., Bestaand/code,  Nieuwbouw/code + ' + quote( '_' + string(Zichtjaar_jaar)) + ')' : 'union_data(., Bestaand/code,  Nieuwbouw/code)', ishidden = "True";
			attribute<string>              label    := union_data(., Bestaand/label, Nieuwbouw/label), DialogType = "labelText", ishidden = "True";

			attribute<Invoer/SpecifiekeInstellingen/PlanRegio> PlanRegio_rel := point_in_polygon(geometry, Invoer/SpecifiekeInstellingen/PlanRegio/geometry), FreeData = "False", ishidden = "True";
			attribute<Invoer/RuimtelijkeData/BestaandeWarmtenetten/Aflevergebied_data> Aflevergebied_rel := union_data(., Bestaand/Aflevergebied_rel, Nieuwbouw/Aflevergebied_rel);
			attribute<Classifications/gebouwoptie> Gebouwoptie_rel := union_data(., Bestaand/Gebouwoptie_rel, Nieuwbouw/Gebouwoptie_rel), ishidden = "true";
			unit<uint8> BebouwingsTypeDomein := Bestaand/BebouwingsTypeDomein, ishidden = "True";

			attribute<Invoer/RuimtelijkeData/StudieGebied/buurt> Buurt_rel         := union_data(., Bestaand/buurt_rel        , Nieuwbouw/buurt_rel);
			attribute<Classifications/WoningType>                WoningType_rel    := union_data(., Bestaand/WoningType_rel   , Nieuwbouw/WoningType_rel);
			attribute<units/yr_uint16>                           Bouwjaar          := union_data(., Bestaand/Bouwjaar         , NieuwbouwBouwjaar);
			attribute<units/yr_uint16>                           Sloopjaar         := =Classifications/Periode/isHistorisch[periode_rel] ? 'union_data(., Bestaand/Sloopjaar, Nieuwbouw/Sloopjaar)' : 'union_data(., Bestaand/Sloopjaar, const((0/0)[units/yr_uint16], Nieuwbouw))';
			attribute<Classifications/Eigendom>                  Eigendom_rel_org  := union_data(., Bestaand/Eigendom_rel     , Nieuwbouw/Eigendom_rel);
			attribute<bool>                                      Gasloos           := =Zichtjaar_jaar < 2024[yr_uint16] ? 'union_data(., Bestaand/Gasloos , Nieuwbouw/Gasloos)': 'union_data(., Bestaand/Gasloos , const(true,Nieuwbouw))' ;
			
			//=============== OMZETTING SOCIALE HUUR NAAR KOOP =========

			container Overheveling
			{
				//====== Regioindeling COROP gebieden
				container    src   := Invoer/RuimtelijkeData/EigendomNieuwbouw, ishidden = "True";
				unit<uint32> Corop := src/Class/corop, ishidden = "True";

				//====== Overhevelingdata ABF voor huidige jaar
				unit<uint32> Overheveling_data := select_with_org_rel(src/data/Muttype_rel == src/Class/muttype/V/Overheveling && src/data/Jaar == Zichtjaar_jaar)
				{
					//========= invoerdata
					attribute<corop>   Corop_rel := src/data/Corop_rel[org_rel];
					attribute<float32> nrAansl   := src/data/nrAansl[org_rel];

					//========= huidige overheveling per COROP regio
					attribute<nrAsl> nrAansl_Corop (Corop) := sum(float64(nrAansl) * 1[nrAsl], Corop_rel);
				}

				//====== Potentiele kandidaten voor overheveling
				unit<uint32> OverhevelKandidaten := select_with_org_rel(result/Eigendom_rel_org == Classifications/Eigendom/V/wooncorp && not(result/isNuNieuw))
				{
					attribute<nrAsl>   nrAansluitingen_i := result/nrAansluitingen_i[org_rel];

					//====== random nummer tussen 0 en 1 per kandidaat
					attribute<float64> randomnr          := rnd_uniform(JaarSeed * 18u, ., range(float64, 0d, 1d));

					//====== indelen kandidaten per corop regio
					attribute<Corop>   Corop_rel         := point_in_polygon(result/geometry[org_rel], corop/geometry);

					//====== bepalen grenswaarde op basis van aantal over te hevelen woningen per COROP regio
					attribute<float64> Limits (Corop) := nth_element_weighted(randomnr, Overheveling_data/nrAansl_Corop, nrAansluitingen_i , Corop_rel);

					//====== selectie kandidaten met randomnr onder grenswaarde
					attribute<bool> Overhevelen := randomnr < Limits[Corop_rel];
				}
				attribute<bool> overhevelen (result) := OverhevelKandidaten/Overhevelen[invert(OverhevelKandidaten/org_rel)];
			}

			attribute<Classifications/Eigendom>                  Eigendom_rel      := Overheveling/Overhevelen ? Classifications/Eigendom/V/koop : Eigendom_rel_org;

			//===============

			attribute<Bool>                                      isNuNieuw         := union_data(., const(false, Bestaand)    , const(true, Nieuwbouw)), ishidden = "True";
			attribute<ModelObjectKeyDomein>                      ModelObjectKey    := union_data(., Bestaand/ModelObjectKey   , Nieuwbouw/ModelObjectKey), ishidden = "True";
			attribute<nrAsl>                                     nrAansluitingen_i := union_data(., Bestaand/nrAansluitingen_i, Nieuwbouw/nrAansluitingen_i);
			attribute<m2>                                        Oppervlakte_i     := union_data(., Bestaand/Oppervlakte_i    , Nieuwbouw/Oppervlakte_i);
			attribute<pand_asl>                                  pand_aandeel      := union_data(., Bestaand/pand_aandeel     , Nieuwbouw/pand_aandeel);
			attribute<Classifications/Schillabel>                Schillabel_rel    := =Classifications/Periode/isHistorisch[periode_rel] ? 'union_data(., Bestaand/Schillabel_rel, Nieuwbouw/Schillabel_rel)' : 'union_data(., Bestaand/Schillabel_rel, const(classifications/schillabel/V/A, Nieuwbouw))';
			attribute<Bool>                                      Aanbouw           := union_data(., const(false, Bestaand)    , const(Zichtjaar_jaar > 2000w, Nieuwbouw)), ishidden = "True";
			
			container Functioneel
			{
				container HuishoudensGrootte := model/calculationschemes/HuishoudensGrootteSchatting(..);
				container RV_N0_per_Bouwdeel := for_each_nedv(
					Classifications/Bouwdeel/name,
					'union_data(result, Bestaand/Functioneel/RV_N0_per_Bouwdeel/'+Classifications/Bouwdeel/name+', Nieuwbouw/Functioneel/RV_N0_per_Bouwdeel/'+Classifications/Bouwdeel/name+')',
					..,
					GJ_yr);
				attribute<ratio> Fitfactor_VT (..) := union_data(result, Bestaand/Functioneel/Fitfactor_VT, const(1.0[ratio],Nieuwbouw));
				container BaseValues := for_each_nedv(
					Classifications/functionelevraag/name,
					Classifications/functionelevraag/name == 'KK' ? 
					                                            'Invoer/Kengetallen/OverigeInstallaties/KK/Installatietypes/Vkk_prs * HuishoudensGrootte/nrPersonen
																+ (  HuishoudensGrootte/nrPersonen_rnd < 2d ? Invoer/Kengetallen/OverigeInstallaties/KK/Installatietypes/Vkk_asl_1p
																   : HuishoudensGrootte/nrPersonen_rnd < 4d ? Invoer/Kengetallen/OverigeInstallaties/KK/Installatietypes/Vkk_asl_23p
																   :                                          Invoer/Kengetallen/OverigeInstallaties/KK/Installatietypes/Vkk_asl_45p) * nrAansluitingen_i 
																+ Invoer/Kengetallen/OverigeInstallaties/KK/Installatietypes/Vkk_zjr * (float64(2009) - float64( first(/rekenstap/jaar) ))*1[ _yr ] * nrAansluitingen_i'
					: 
					  'union_data(result, Bestaand/Functioneel/BaseValues/'+Classifications/functionelevraag/name+', Nieuwbouw/Functioneel/BaseValues/'+Classifications/functionelevraag/name+')',
					..,
					GJ_yr), ishidden = "True";
			}
			attribute<yr_uint16> NieuwbouwBouwjaar (Nieuwbouw) := =Zichtjaar_jaar > 2022[yr_uint16] ?  'Zichtjaar_jaar + uint16(rnd_uniform(JaarSeed * 24u, Nieuwbouw, range(uint32, 0[uint32], ( Zichtjaar_jaar < 2031[yr_uint16] ? 7[uint32] : 10[uint32] ) )))[yr_uint16]' : 'const(Zichtjaar_jaar,Nieuwbouw)', ishidden = "True";

			container InstallatiePerProduct := for_each_nedv(Classifications/Product/name
			,	replace('union_data(result, Bestaand/InstallatiePerProduct/@PN, Nieuwbouw/InstallatiePerProduct/@PN)'
				,	'@PN', Classifications/Product/name)
			,	result, Classifications/Installatie)
			{
				container LastVervanging := for_each_nedv(Classifications/Product/name
				,	replace('union_data(result, Bestaand/InstallatiePerProduct/LastVervanging/@PN, NieuwbouwBouwjaar)'
					,	'@PN', Classifications/Product/name)
				, result, yr_uint16)
				{
					attribute<yr_uint16> KK (result) := union_data(result, Bestaand/InstallatiePerProduct/LastVervanging/KK, const(Zichtjaar_jaar, Nieuwbouw));
					attribute<yr_uint16> VT (result) := union_data(result, Bestaand/InstallatiePerProduct/LastVervanging/VT, const(Zichtjaar_jaar, Nieuwbouw));
					attribute<yr_uint16> DK (result) := union_data(result, Bestaand/InstallatiePerProduct/LastVervanging/DK, const(Zichtjaar_jaar, Nieuwbouw));
				}
				
				attribute<Invoer/Kengetallen/OverigeInstallaties/KK/Installatietypes> KK (result) := union_data(result, Bestaand/InstallatiePerProduct/KK, Nieuwbouw/InstallatiePerProduct/KK);

				attribute<Invoer/Kengetallen/OverigeInstallaties/VT/Installatietypes> VT (result) := union_data(result, 
					Bestaand/InstallatiePerProduct/VT,
					not( Bouwdelen/BouwnormNaleving ) ? Nieuwbouw/InstallatiePerProduct/VT : ZichtjaarBeleid/NieuwbouwNorm/VentilatieNorm/Ventilatietype_norm);

				attribute<Invoer/Kengetallen/OverigeInstallaties/DK/Installatietypes> DK (result) := union_data(result, Bestaand/InstallatiePerProduct/DK, Nieuwbouw/InstallatiePerProduct/DK);
				attribute<Classifications/AfgifteSysteem>                             AS (result) := union_data(result, Bestaand/InstallatiePerProduct/AS, Nieuwbouw/InstallatiePerProduct/AS);

				unit<uint32> Bouwjaar21plus := subset(Bouwjaar >= 2021[yr_uint16])
				{
					attribute<Classifications/Installatie> Inst_RVb := RVb[nr_orgentity];
					attribute<nrAsl>                       nrAslll  := BO/nrAansluitingen[nr_orgentity];
				}
			}
			
			container BemeterdeGebouwInput_rel :=  for_each_nedv(
				classifications/Product/name,
				'union_data(.., Bestaand/BemeterdeGebouwInput_rel/'+classifications/Product/name+', Nieuwbouw/BemeterdeGebouwInput_rel/'+classifications/Product/name+')',
				.,
				Classifications/BemeterdeGebouwInput );
			
			Container Bouwdelen := for_each_nedv(
				classifications/bouwdeel/name,
				'BO/ResterendNu * union_data(.., Bestaand/Bouwdelen/'+classifications/bouwdeel/name+', Nieuwbouw/Bouwdelen/'+classifications/bouwdeel/name+')',
				.,
				m2)
			{
				container LastVervanging := for_each_nedv(
					classifications/bouwdeel/name,
					'union_data(..., Bestaand/Bouwdelen/LastVervanging/'+classifications/bouwdeel/name+', NieuwbouwBouwjaar)',
					..,
					yr_uint16);

				attribute<bool> BouwnormNaleving (Nieuwbouw) := rnd_uniform(JaarSeed * 101u, Nieuwbouw, range(float64, 0d, 1d)) <= first(ZichtjaarBeleid/NieuwbouwNorm/naleving);

				container Isolatie := for_each_nedv(
					classifications/bouwdeel/name,
					'union_data(
						...,
						Bestaand/Bouwdelen/Isolatie/'+classifications/bouwdeel/name+',
						not(BouwnormNaleving) ? Nieuwbouw/Bouwdelen/Isolatie/'+classifications/bouwdeel/name+' :
							ZichtjaarBeleid/NieuwbouwNorm/BouwdeelNorm/'+classifications/bouwdeel/name+')',
					..,
					Classifications/IsolatieNiveau);
					
				container IsChangedNow := for_each_nedv(
					classifications/Bouwdeel/name,
					'const(false,...)',
					..,
					bool), ishidden = "True";
			}

/*			container SPF := for_each_nedv(
				Classifications/Product/name,
				'union_data(.., Bestaand/SPF/'+classifications/Product/name+', Nieuwbouw/SPF/'+classifications/Product/name+')',
				.,
				float64)
			{
				container PerformancePerProduct := for_each_nedv(
				Classifications/Product/name,
				'union_data(..., Bestaand/SPF/PerformancePerProduct/'+classifications/Product/name+', Nieuwbouw/SPF/PerformancePerProduct/'+classifications/Product/name+')',
				..,
				Classifications/Performance), ishidden = "True";
			}
*/			
			container Gebied : ishidden = "True"
			{
				attribute<float64> n      (..) := union_data(.., Bestaand/Gebied/n,      Nieuwbouw/Gebied/n);
				attribute<float64> MEAN_x (..) := union_data(.., Bestaand/Gebied/MEAN_x, Nieuwbouw/Gebied/MEAN_x);
				attribute<float64> MEAN_y (..) := union_data(.., Bestaand/Gebied/MEAN_y, Nieuwbouw/Gebied/MEAN_y);
				attribute<float64> SSD_xx (..) := union_data(.., Bestaand/Gebied/SSD_xx, Nieuwbouw/Gebied/SSD_xx);
				attribute<float64> SSD_xy (..) := union_data(.., Bestaand/Gebied/SSD_xy, Nieuwbouw/Gebied/SSD_xy);
				attribute<float64> SSD_yy (..) := union_data(.., Bestaand/Gebied/SSD_yy, Nieuwbouw/Gebied/SSD_yy);
			}

			container Kapitaallasten := for_each_nedv(Classifications/Gebouw_Kapitaallasten/name, replace('union_data(.., Bestaand/Kapitaallasten/@KL@, Nieuwbouw/Kapitaallasten/@KL@)', '@KL@', Classifications/Gebouw_Kapitaallasten/name), ., Eur_yr);

			container Criteria : ishidden = "True";

			container Jaarlijks
			{
				attribute<eur_yr> Kj_oh_LO       (..) := union_data(.., Bestaand/Jaarlijks/Kj_oh_LO,       Nieuwbouw/Jaarlijks/Kj_oh_LO);
				attribute<eur_yr> Kj_adm_LO      (..) := union_data(.., Bestaand/Jaarlijks/Kj_adm_LO,      Nieuwbouw/Jaarlijks/Kj_adm_LO);
				attribute<eur_yr> oh_KD          (..) := union_data(.., Bestaand/Jaarlijks/oh_KD   ,       Nieuwbouw/Jaarlijks/oh_KD);
				attribute<eur_yr> adm_KD         (..) := union_data(.., Bestaand/Jaarlijks/adm_KD   ,      Nieuwbouw/Jaarlijks/adm_KD);
			}
		}
	}
}