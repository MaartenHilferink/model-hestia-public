//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) Hestia 2021 - PBL & TNO                                        //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

template RestWarmteIteratie
{
	// begin case parameters
	container PrevState := RestWarmteStartingState;
	unit<uint32> Bronnen;
	unit<uint32> PlanRegio;
	container KostenBaten;
	// end case parameters

	unit<uint32> BronConnections := PrevState/BronConnections;

	attribute<MW> MWth_capaciteit(Bronnen) := PrevState/MWth_capaciteit;

	attribute<BronConnections> NewAssignment (PlanRegio) := capacitated_connect(BronConnections/point, MWth_capaciteit[BronConnections/Bronnen_rel], PlanRegio/point, Efficiencies/Hoofdbronvermogensaandeel * KostenBaten/CapaciteitsVraagD);
	attribute<BronConnections> Assignment    (PlanRegio) := MakeDefined(PrevState/CurrConnection, NewAssignment)
	{
		attribute<Bronnen>                                         Bronnen_rel      (PlanRegio) := BronConnections/Bronnen_rel[Assignment];
		attribute<Kengetallen/WarmteBronnen/MetaData/TypeInfoList> TypeInfoList_rel (PlanRegio) := Bronnen/TypeInfoList_rel[Bronnen_rel];

		attribute<m>   dist      (PlanRegio) := value(dist(PlanRegio/point, BronConnections/point[Assignment]), m);
		attribute<m>   cumulDist (PlanRegio) := dist + BronConnections/cumulDist[Assignment];
		attribute<MW>  P         (PlanRegio) := Bronnen/P_cap[bronnen_rel] * KostenBaten/CapaciteitsVraagD;

		attribute<MW>  orgP      (PlanRegio) := BronConnections/CumulP[Assignment]; // re-assess
		attribute<MW>  cumulP    (PlanRegio) := P + orgP;

		container HerLeidingKosten := BuisKosten(PlanRegio, P);
		container OrgLeidingKosten := BuisKosten(PlanRegio, orgP);
		container NewLeidingKosten := BuisKosten(PlanRegio, cumulP);

		attribute<Eur>    Ki_pt           (PlanRegio) := dist * HerLeidingKosten/aK_m + cumulDist * (NewLeidingKosten/aK_m - OrgLeidingKosten/aK_m);
		attribute<Eur_yr> Kji_pt          (PlanRegio) := Ki_pt * NCW/pt28/AnnualisationFactor;
		attribute<Eur_yr> Kmi_pt          (PlanRegio) := Ki_pt * NCW/mr28/AnnualisationFactor;

		attribute<Eur>    Oi_pt_EIA       (PlanRegio) := Ki_pt * SpecifiekeInstellingen/Beleid/EIA/pt;
		attribute<Eur_yr> Oji_pt_EIA      (PlanRegio) := Oi_pt_EIA * NCW/pt28/AnnualisationFactor;
		attribute<Eur_yr> Omi_pt_EIA      (PlanRegio) := Oi_pt_EIA * NCW/mr28/AnnualisationFactor;
				
		attribute<Eur>    Ki_ow           (PlanRegio) := Bronnen/Ki_kW[Assignment/Bronnen_rel] * LeerCurves/MTnet/Curve * Assignment/P * value(1000, kW / MW);
		attribute<Eur_yr> Kji_ow          (PlanRegio) := Ki_ow * NCW/ow28/AnnualisationFactor;
		attribute<Eur_yr> Kmi_ow          (PlanRegio) := Ki_ow * NCW/mr28/AnnualisationFactor;
		
		attribute<Eur>    Oi_ow_EIA       (PlanRegio) := Ki_ow * SpecifiekeInstellingen/Beleid/EIA/ow[TypeInfoList_rel];
		attribute<Eur_yr> Oji_ow_EIA      (PlanRegio) := Oi_ow_EIA * NCW/ow28/AnnualisationFactor;
		attribute<Eur_yr> Omi_ow_EIA      (PlanRegio) := Oi_ow_EIA * NCW/mr28/AnnualisationFactor;

		attribute<Eur_yr> Kji_ptow_netto  (PlanRegio) := Kji_pt - Oji_pt_EIA + Kji_ow - Oji_ow_EIA;
		attribute<Eur_yr> Kmi_ptow_netto  (PlanRegio) := Kmi_pt + Kmi_ow;

		attribute<Eur_yr> Kj_pt_oh        (PlanRegio) := Leercurves/OenM/Curve * Kengetallen/Onderhoud/R_pt_onderhoud * Ki_pt;
		attribute<Eur_yr> Kj_pt_adm       (PlanRegio) := Leercurves/OenM/Curve * Kengetallen/Onderhoud/R_pt_admin     * Ki_pt;
		attribute<Eur_yr> Kj_pt           (PlanRegio) := Kj_pt_oh + Kj_pt_adm;

		attribute<Eur_yr> Kj_ow_oh        (PlanRegio) := Leercurves/OenM/Curve * Kengetallen/Onderhoud/R_ow_onderhoud * Ki_ow;
		attribute<Eur_yr> Kj_ow_adm       (PlanRegio) := Leercurves/OenM/Curve * Kengetallen/Onderhoud/R_ow_admin     * Ki_ow;
		attribute<Eur_yr> Kj_ow           (PlanRegio) := Kj_ow_oh + Kj_ow_adm + Kj_WarmteWaarde;
		attribute<Eur_yr> Km_ow           (PlanRegio) := Kj_ow_oh + Kj_ow_adm + Km_WarmteWaarde;

		attribute<Eur_GJ> Kj_GJ           (PlanRegio) := Bronnen/K_GJ [Assignment/Bronnen_rel];
		attribute<Eur_GJ> Km_GJ           (PlanRegio) := Bronnen/Km_GJ [Assignment/Bronnen_rel];
		attribute<Eur_yr> Kj_wd_gas       (PlanRegio) := (1d - Bronnen/P_vol[bronnen_rel]) * KostenBaten/KostenD/Bijstook/Kj_wd_gas;
		attribute<Eur_yr> Km_wd_gas       (PlanRegio) := (1d - Bronnen/P_vol[bronnen_rel]) * KostenBaten/KostenD/Bijstook/Km_wd_gas;
		attribute<GJ_yr>  V_bijstook      (PlanRegio) := (1d - Bronnen/P_vol[bronnen_rel]) * KostenBaten/KostenD/Bijstook/V_bijstook;
		attribute<GJ_yr>  V_warmte        (PlanRegio) := Bronnen/P_vol[bronnen_rel] * KostenBaten/V_WarmtePrimairD;
		attribute<Eur_yr> Kj_WarmteWaarde (PlanRegio) := Kj_GJ * V_warmte;
		attribute<Eur_yr> Km_WarmteWaarde (PlanRegio) := Km_GJ * V_warmte;
		attribute<Eur_GJ> Km_WarmteFactor (PlanRegio) := Km_GJ * Bronnen/P_vol[bronnen_rel];

		//aangepast voor Maatschappelijke afweging
		attribute<Eur_yr> Oji_Netto       (PlanRegio) := KostenBaten/Oji_NettoD - Km_ow - Kj_pt - Kj_wd_gas + KostenBaten/KostenD/Bijstook/Kj_wd_gas;
		attribute<Eur_yr> Oj_SDE          (PlanRegio) := Bronnen/P_vol[bronnen_rel] * KostenBaten/V_WarmtePrimairD * MakeDefined(SpecifiekeInstellingen/Beleid/SDE/SDE[TypeInfoList_rel], 0[Eur_GJ]);


		//verwerking extra onrendabele top voor startanalyse
		parameter<float64> Iternr := Prevstate/iternr;

		parameter<Eur_GJ> Boost  := Iternr > 300d ? 20[Eur_GJ] : 0[Eur_GJ];
		parameter<Eur_GJ> ExtOnr := Voorkeuren/Afweging/OnrendabelMT != 0[Eur_GJ] && Iternr >= 0d ? neg(30d) + sqrt(Iternr-0d) * 0.1 * Voorkeuren/Afweging/OnrendabelMT + Boost : 0[Eur_GJ];

		attribute<Eur_yr> ExtrOnrendabel  (PlanRegio) := Bronnen/P_vol[bronnen_rel] * KostenBaten/V_WarmtePrimairD * ExtOnr;
		//end verwerking onrendabele top


		//aangepast voor Maatschappelijke afweging
		attribute<Eur_MW_yr> Mr            (PlanRegio) := (Oji_Netto + ExtrOnrendabel - Kmi_ptow_netto) / (Bronnen/P_cap[bronnen_rel] * KostenBaten/CapaciteitsVraagD), Descr = "contributiemarge per megawatt";
	}

	attribute<Eur_MW_yr>  Ranking         (PlanRegio) := Assignment/Mr// ranking niet op prijs per GJ maar op opbrengsten per MW capaciteit, itt FO v7a $7.
		* float64((Bronnen/P_cap[Assignment/bronnen_rel] * KostenBaten/CapaciteitsVraagD) <= MWth_capaciteit[Assignment/Bronnen_rel]) // itt FO v7a $7.: te grote gebieden worden overgeslagen zodat kleinere gebieden toch aan de bEurt kunnen komen.
		* float64(Not(PrevState/GebruikRestwarmte))  // Only select once
		* float64(HasWarmteVraag); // don't selecte already allocated planregio

	attribute<Eur_MW_yr>  Threshold_RAW (Bronnen) := -nth_element_weighted(-Ranking, MWth_capaciteit, Bronnen/P_cap[Assignment/Bronnen_rel] * KostenBaten/CapaciteitsVraagD, Assignment/Bronnen_rel);
	attribute<Eur_MW_yr>  Threshold     (Bronnen) := MakeDefined(threshold_RAW, 0[Eur_MW_yr]);
	attribute<MW>         MWth_above    (Bronnen) := sum(float64(Ranking > Threshold[Assignment/Bronnen_rel]) * (Bronnen/P_cap[Assignment/Bronnen_rel] * KostenBaten/CapaciteitsVraagD), Assignment/Bronnen_rel);
	attribute<MW>         MWth_at       (Bronnen) := sum(float64(Ranking = Threshold[Assignment/Bronnen_rel]) * (Bronnen/P_cap[Assignment/Bronnen_rel] * KostenBaten/CapaciteitsVraagD), Assignment/Bronnen_rel);
	attribute<MW>         MWth_below    (Bronnen) := sum(float64(Ranking < Threshold[Assignment/Bronnen_rel]) * (Bronnen/P_cap[Assignment/Bronnen_rel] * KostenBaten/CapaciteitsVraagD), Assignment/Bronnen_rel);
	attribute<Eur_MW_yr>  Max_Mr_bron   (Bronnen) := max(Ranking * float64(HasWarmteVraag) * float64(Not(PrevState/GebruikRestwarmte)), Assignment/Bronnen_rel);

	attribute<bool> AanlegAfweging         (PlanRegio) :=
		= Voorkeuren/Afweging/OnrendabelMT != 0[Eur_GJ] 
			? 'Ranking == Max_Mr_bron[Assignment/Bronnen_rel] && Ranking > max_elem(Threshold[Assignment/Bronnen_rel], 0[Eur_MW_yr])'
			: 'Ranking > max_elem(Threshold[Assignment/Bronnen_rel], 0[Eur_MW_yr])';

	attribute<bool> ExtraGebruikRestWarmte (PlanRegio) := = Voorkeuren/NewRestWarmte ? 'AanlegAfweging' : 'const(false, PlanRegio)';

	attribute<MW >  MWth_ExtraGebruik   (Bronnen) := sum((Bronnen/P_cap[Assignment/Bronnen_rel] * KostenBaten/CapaciteitsVraagD) * float64(ExtraGebruikRestWarmte) , Assignment/Bronnen_rel);

	container NextState
	{
		parameter<float64> iterNR := PrevState/iterNR + 1.0;
		attribute<MW> MWth_capaciteit (Bronnen) := PrevState/MWth_capaciteit - MWth_ExtraGebruik;

		attribute<bool> GebruikRestWarmte(PlanRegio) := ExtraGebruikRestWarmte || PrevState/GebruikRestWarmte,
			IntegrityCheck = "not(any(ExtraGebruikRestWarmte && PrevState/GebruikRestWarmte))"
		{
			attribute<uint32> BrushColor (bool) :  DialogType = "BrushColor", [ rgb(255,255,255), rgb(255,0,0) ];
			parameter<uint32> PenColor          := rgb(167,167,167), DialogType = "PenColor";
			parameter<int16>  PenWidth          := 1s              , DialogType = "PenWidth";
		}

		attribute<Bronnen> CurrBron (PlanRegio) := ExtraGebruikRestWarmte ? Assignment/Bronnen_rel : PrevState/CurrBron;

		unit<uint32> ConnectedPlanRegio := Subset(ExtraGebruikRestWarmte)
		{
			// the following is merely for display only
			unit<uint32> Extrapoints := union_unit(ConnectedPlanRegio, ConnectedPlanRegio)
			{
				attribute<rdc_meter>          point      := union_data(., PrevState/BronConnections/point[Assignment[ConnectedPlanRegio/nr_OrgEntity]],PlanRegio/point[ConnectedPlanRegio/nr_OrgEntity]);
				attribute<ConnectedPlanRegio> SequenceNr := union_data(., id(ConnectedPlanRegio), id(ConnectedPlanRegio));
				attribute<uint32>             Ordinal    := union_data(., const(0, ConnectedPlanRegio), const(1, ConnectedPlanRegio));
			}
			attribute<rdc_meter> ExtraArcs (arc) := points2sequence(Extrapoints/point, Extrapoints/SequenceNr, Extrapoints/Ordinal);
		}

		unit<uint32> BronConnections := union_unit(PrevState/BronConnections, ConnectedPlanRegio)
		{
			attribute<Bronnen>   Bronnen_rel := union_data(., PrevState/BronConnections/Bronnen_rel, Assignment/Bronnen_rel[ConnectedPlanRegio/nr_OrgEntity]);
			attribute<m>         CumulDist   := union_data(., PrevState/BronConnections/CumulDist,   Assignment/CumulDist  [ConnectedPlanRegio/nr_OrgEntity]);
			attribute<MW>        CumulP      := union_data(., PrevState/BronConnections/CumulP + sum(ExtraGebruikRestWarmte ? Assignment/P : 0[MW],  Assignment), Assignment/P[ConnectedPlanRegio/nr_OrgEntity]);
			attribute<rdc_meter> point       := union_data(., PrevState/BronConnections/point,       PlanRegio/point[ConnectedPlanRegio/nr_OrgEntity]);
		}

		attribute<BronConnections> CurrConnection (PlanRegio) := convert(ExtraGebruikRestWarmte ? Assignment : PrevState/CurrConnection, BronConnections);

		unit<uint32> CumulatedArcSet := union_unit(PrevState/CumulatedArcSet, ConnectedPlanRegio), DialogType = "Map", DialogData = "CumulatedArcs"
		{
			attribute<rdc_meter> Bronpoint     := union_data(., PrevState/CumulatedArcSet/Bronpoint, Bronnen/point[Assignment/Bronnen_rel[ConnectedPlanRegio/nr_OrgEntity]]);
			attribute<float64>   BronpointX    := pointCol(Bronpoint);
			attribute<float64>   BronpointY    := pointRow(Bronpoint);
			attribute<PlanRegio> PlanRegio_rel := union_data(., PrevState/CumulatedArcSet/PlanRegio_rel, ConnectedPlanRegio/nr_OrgEntity);
		}

		attribute<rdc_meter> CumulatedArcs (CumulatedArcSet, arc) := union_data(CumulatedArcSet, PrevState/CumulatedArcs, ConnectedPlanRegio/ExtraArcs)
		{
			parameter<uint32> PenColor := rgb(0,0,0), DialogType = "PenColor";
			parameter<int16>  PenWidth := 2s        , DialogType = "PenWidth";
		}
	}
}