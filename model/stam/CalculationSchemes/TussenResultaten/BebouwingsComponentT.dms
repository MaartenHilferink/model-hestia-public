//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) Hestia 2021 - Planbureau voor de Leefomgeving                  //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

template BebouwingsComponentT
{
	// begin case parameters
	parameter<string> BCname;
	parameter<bool>   HasResterendFactors;
	container         ResterendFactorMaps;
	unit<uint32>      ModelObject;
	container         LocatieSpecifiekeOpties;
	container         VraagKentallenComponent;
	parameter<string> NcwRefBase;
	// end of case parameters
	
	parameter<Classifications/BebouwingsSectorBase> BcSector :=	rlookup(BCname, Classifications/BebouwingsSectorBase/name);
	
	unit<uint32>      PrevObject := ='PrevState/Bebouwing/'+ BCname;
	unit<uint8> ModelObjectKeyDomein : ishidden = "true";

	unit<uint32> BeginSituatieResults := = 'BeginSituatie/StartingStateComponenten/'+ BCname +'/Results';
	unit<uint32>   HistorischBouw := = 'subset(BeginSituatieResults/bouwjaar == Zichtjaar_jaar)'
		, Descr = "bebouwing dat in het huidige historische zichtjaar is gebouwd", Source = "BAG"
	{
		attribute<Geography/rdc_meter>                       point             := BeginSituatieResults/point[nr_orgentity];
		attribute<Geography/rdc_meter>                       geometry          := BeginSituatieResults/geometry[nr_orgentity];
		attribute<string>                                    code              := BeginSituatieResults/code[nr_orgentity];
		attribute<string>                                    label             := BeginSituatieResults/label[nr_orgentity], DialogType = "labelText";
		attribute<Invoer/RuimtelijkeData/StudieGebied/buurt> Buurt_rel         := BeginSituatieResults/Buurt_rel[nr_orgentity];
		attribute<Invoer/RuimtelijkeData/BestaandeWarmtenetten/Aflevergebied_data> Aflevergebied_rel := BeginSituatieResults/Aflevergebied_rel[nr_orgentity];
		attribute<BebouwingsTypeDomein>                      BebouwingsType    := BeginSituatieResults/BebouwingsType[nr_orgentity];
		attribute<units/yr_uint16>                           Bouwjaar          := BeginSituatieResults/Bouwjaar[nr_orgentity];
		attribute<units/yr_uint16>                           Sloopjaar         := BeginSituatieResults/Sloopjaar[nr_orgentity];
		attribute<Classifications/Eigendom>                  Eigendom_rel      := BeginSituatieResults/Eigendom_rel[nr_orgentity];
		attribute<ModelObjectKeyDomein>                      ModelObjectKey    := BeginSituatieResults/ModelObjectKey[nr_orgentity];
		attribute<nrAsl>                                     nrAansluitingen_i := BeginSituatieResults/nrAansluitingen_i[nr_orgentity];
		attribute<m2>                                        Oppervlakte_i     := BeginSituatieResults/Oppervlakte_i[nr_orgentity];
		attribute<pand_asl>                                  pand_aandeel      := BeginSituatieResults/pand_aandeel[nr_orgentity];
		attribute<Geography/rdc_grids/m100>                  gridm100_rel      := point[Geography/rdc_grids/m100];
		attribute<Classifications/Schillabel>                Schillabel_rel    := BeginSituatieResults/Schillabel_rel[nr_orgentity];
		attribute<Classifications/Schillabel>                Defaultlabel_rel  := BeginSituatieResults/Defaultlabel_rel[nr_orgentity];
		
		attribute<ModelObject>                               ModelObject_rel := rlookup(ModelObjectKey, ModelObject/ModelObjectKey);
		
		container Functioneel
		{
			container RV_N1_per_Bouwdeel := for_each_nedv(
				Classifications/bouwdeel/name,
				'BeginSituatieResults/Functioneel/RV_N1_per_Bouwdeel/'+Classifications/bouwdeel/name+'[nr_orgentity]',
				..,
				GJ_yr);
			container BaseValues := for_each_nedv(
				Classifications/functionelevraag/name,
				'BeginSituatieResults/Functioneel/BaseValues/'+Classifications/functionelevraag/name+'[nr_orgentity]',
				..,
				GJ_yr);
		}
		container BemeterdeGebouwInput_rel :=  for_each_nedv(
				classifications/Product/name,
				'BeginSituatieResults/BemeterdeGebouwInput_rel/'+classifications/Product/name+'[nr_orgentity]',
			.,
				Classifications/BemeterdeGebouwInput );

		container SPF := for_each_nedv(
			classifications/Product/name,
			'BeginSituatieResults/SPF/'+Classifications/Product/name+'[nr_orgentity]',
			.,
			float64)
		{
			container PerformancePerProduct :=  for_each_nedv(
			classifications/Product/name,
			'BeginSituatieResults/SPF/PerformancePerProduct/'+Classifications/Product/name+'[nr_orgentity]',
			..,
			Classifications/Performance);
		}
		
		container Bouwdelen := for_each_nedv(
			classifications/bouwdeel/name,
			'BeginSituatieResults/bouwdelen/'+classifications/bouwdeel/name+'[nr_orgentity]',
			.,
			m2)
		{
			container Isolatie := for_each_nedv(
				classifications/bouwdeel/name,
				'Classifications/schillabel/default_bouwdeelkwaliteit/'+classifications/bouwdeel/name+'[Defaultlabel_rel]',
				..,
				Classifications/IsolatieNiveau);
				
			attribute<m2>    Totaal             (..) := BeginSituatieResults/Bouwdelen/Totaal[nr_orgentity];
			attribute<ratio> Norm_verliesfactor (..) := BeginSituatieResults/Bouwdelen/Norm_verliesfactor[nr_orgentity];
		}
		
		container Gebied
		{
			attribute<float64> n      (..) := BeginSituatieResults/Gebied/n[nr_orgentity];
			attribute<float64> MEAN_x (..) := BeginSituatieResults/Gebied/MEAN_x[nr_orgentity];
			attribute<float64> MEAN_y (..) := BeginSituatieResults/Gebied/MEAN_y[nr_orgentity];
			attribute<float64> SSD_xx (..) := BeginSituatieResults/Gebied/SSD_xx[nr_orgentity];
			attribute<float64> SSD_xy (..) := BeginSituatieResults/Gebied/SSD_xy[nr_orgentity];
			attribute<float64> SSD_yy (..) := BeginSituatieResults/Gebied/SSD_yy[nr_orgentity];
		}
		
		container Kapitaallasten := for_each_nedv(
			Classifications/GebouwKapitaallasten/name,
			'BeginSituatieResults/Kapitaallasten/'+ Classifications/GebouwKapitaallasten/name +'[nr_orgentity]',
			.,
			Eur_yr);
	}
	unit<uint32>      NieuwbouwBron :=
		= Classifications/Periode/isHistorisch[Periode_rel] ? 'HistorischBouw' :
		 Invoer/DefaultInstellingen/Basis/BC_doNieuwbouw  ? 'Invoer/RuimtelijkeData/Vastgoed/NieuwbouwObjecten/' + Classifications/Periode/name[Periode_rel] + '/BebouwingsObject'   :
		'Bebouwing/'+ BCname;
	
	container NcwRefs
	{
		container _15 := ='NCW/'+NcwRefBase+'15';
		container _30 := ='NCW/'+NcwRefBase+'30';
		container _50 := ='NCW/'+NcwRefBase+'50';
		container _28 := ='NCW/'+NcwRefBase+'28';
		container _20 := ='NCW/'+NcwRefBase+'20';
	}

	unit<uint8> PrijzenElektriciteit := Prijzen/Elektriciteit/Staffel, ishidden = "true";
	unit<uint8> PrijzenAardgas       := Prijzen/AardGas/Staffel, ishidden = "true";

	unit<uint8> BebouwingsTypeDomein := BO/BebouwingsTypeDomein;

	parameter<bool> doNieuwbouw := Invoer/DefaultInstellingen/Basis/BC_doNieuwbouw;
	container union := = doNieuwbouw ? 'CalculationSchemes/BebouwingsOperaties/union(PrevObject, NieuwbouwBron)' : '..';

	unit<uint32> BO_base := = doNieuwbouw ? 'union/result' : 'PrevObject';
	
	unit<uint32> BO := BO_base
	{
		container BebouwingsComponent_UpRef := ..; // TODO_OV: used sporadically, try to avoid this CHECK
		container NcwRefs                   := BebouwingsComponent_UpRef/NcwRefs;
		container Opbrengsten               := BebouwingsComponent_UpRef/BC_kentallen/Opbrengsten;
		container VraagKentallen            := VraagKentallenComponent;
		container BcKentallen               := BC_kentallen;

		unit<uint32>    ModelObjectDomain := ModelObject;
		attribute<Invoer/SpecifiekeInstellingen/PlanRegio> PlanRegio_rel (BO) := BO/buurt_rel;
		attribute<ModelObject>                             Model_rel     (BO) := rlookup(BO/ModelObjectKey, ModelObject/ModelObjectKey), KeepData = "True";
		attribute<PrevObject>                              PrevObject_rel(BO) := = doNieuwbouw ? 'rlookup(BO/code, PrevObject/code)' : 'ID(PrevObject)';

		unit<uint32>  AfnameGebied         := PrevState/AfnameGebied;

		parameter<string> BCname := ../BCname;
		attribute<Classifications/Schillabel>  Schillabel_rel  (BO) := makedefined(PrevObject/Schillabel_rel[PrevObject_rel], ModelObject/SchilLabel_rel[Model_rel]);
		
		attribute<Classifications/WarmteOptie> WarmteOptie_rel (BO) := PrevObject/WarmteOptie_rel[PrevObject_rel];
		attribute<Classifications/Schillabel>  Startlabel_rel  (BO) := PrevObject/Startlabel_rel[PrevObject_rel];
		attribute<BO> Bo_rel (BO) := id(.);
		
		container Aansluitingen
		{
			container BWN := Invoer/RuimtelijkeData/BestaandeWarmtenetten;
			
			attribute<nrAsl> PrevGNet        (BO) := PrevObject/Aansluitingen/GNet[BO/PrevObject_rel];
			attribute<bool> GeenGasafsluiting(BO) := not(WarmteNet) && (PrevGNet > 0[nrAsl]);
			attribute<nrAsl> GNet            (BO) := GeenGasafsluiting ? PrevObject/Aansluitingen/GNet[Bo/PrevObject_rel] : 0[nrAsl];
			
			attribute<bool> WarmteNet(BO) := BWN/Aflevergebied_data/Startjaar[BO/Aflevergebied_rel] <= Zichtjaar_jaar;
			attribute<bool> KoudeNet (BO) := WarmteNet && BWN/AfleverType/HeeftKoude[ BWN/Aflevergebied_data/Type_rel[ BO/Aflevergebied_rel ] ];
//			attribute<bool> HT_Warmte(BO):= WarmteNet && Invoer/RuimtelijkeData/BestaandeWarmtenetten/Aflevergebied_data/IsHT[BO/Aflevergebied_rel];
//			attribute<bool> MT_Warmte(BO):= WarmteNet && Invoer/RuimtelijkeData/BestaandeWarmtenetten/Aflevergebied_data/IsMT[BO/Aflevergebied_rel];
//			attribute<bool> LT_Warmte(BO):= WarmteNet && Invoer/RuimtelijkeData/BestaandeWarmtenetten/Aflevergebied_data/IsLT[BO/Aflevergebied_rel];
		}
		
		// TODO: wat te doen met NieuwbouwBron installaties ? 
		// N.B.: voor nieuwe woningen geldt: not(IsDefined(PrevObject_rel))
		container PrevInstallatiePerProduct := for_each_nedv(Classifications/Product/name
		, replace('PrevObject/InstallatiePerProduct/@PN[PrevObject_rel]', '@PN', Classifications/Product/name)
		, BO, Classifications/Installatie
		);
		
		// Vervang Installaties voor RV en TW wanneer Gas zojuist is afgesloten. \
		// Gebruik daarvoor kenmerk Classifications/Installatie/Gasvervanger
		container InstallatiePerProduct := for_each_nedv(Classifications/Product/name
		,	replace('Aansluitingen/GeenGasafsluiting'
				'? PrevInstallatiePerProduct/@PN '
				': Classifications/Installatie/Gasvervanger[PrevInstallatiePerProduct/@PN]'
			,	'@PN', Classifications/Product/name
			)
		,	BO, Classifications/Installatie
		)
		{
			container LastVervanging := for_each_nedv(Classifications/Product/name
				, 'PrevObject/InstallatiePerProduct/LastVervanging/'+Classifications/Product/name+'[PrevObject_rel]'
				, BO
				, yr_uint16)
				{
					attribute<yr_uint16> KK (BO) := PrevObject/InstallatiePerProduct/LastVervanging/KK[PrevObject_rel];
					attribute<yr_uint16> VT (BO) := PrevObject/InstallatiePerProduct/LastVervanging/VT[PrevObject_rel];
					attribute<yr_uint16> DK (BO) := PrevObject/InstallatiePerProduct/LastVervanging/DK[PrevObject_rel];
				}
			
			attribute<Invoer/Kengetallen/OverigeInstallaties/KK/Installatietypes> KK (BO) := PrevObject/InstallatiePerProduct/KK[PrevObject_rel];
			attribute<Invoer/Kengetallen/OverigeInstallaties/VT/Installatietypes> VT (BO) := PrevObject/InstallatiePerProduct/VT[PrevObject_rel];
			attribute<Invoer/Kengetallen/OverigeInstallaties/DK/Installatietypes> DK (BO) := PrevObject/InstallatiePerProduct/DK[PrevObject_rel];
			attribute<Classifications/AfgifteSysteem>                             AS (BO) := PrevObject/InstallatiePerProduct/AS[PrevObject_rel];
		}
		
		attribute<AfnameGebied>                   AfnameGebied_rel   (BO) := PrevObject/AfnameGebied_rel[PrevObject_rel];
		attribute<Classifications/GebouwOptie>    GebouwOptie_rel    (BO) := PrevObject/GebouwOptie_rel[PrevObject_rel]; // REMOVE, OBSOLETE, vervangen door Schillabel_rel, InstallatiePerProduct en GebiedsOptie
		attribute<Geography/rdc_grids/m100>       gridm100_rel       (BO) := point[Geography/rdc_grids/m100];

		attribute<bool> IsMeergezins (.) := BebouwingsTypeDomein/IsMeergezins[BebouwingsType];

		attribute<ratio> ResterendFactorBase := = HasResterendFactors
			? 'MakeDefined(merge(BebouwingsType, ratio, '+AsItemList('ResterendFactorMaps/'+BebouwingsTypeDomein/ResterendFactorName+'[gridm100_rel]')+'), 1.0)'
			: 'const(1.0, BO)';

		attribute<ratio> ResterendFactor := Bouwjaar > 2021w ? 1.0 : ResterendFactorBase * float64(IsDefined(PlanRegio_rel)); //TODO: huidig jaar parametriseren
		attribute<bool>  Afbouw          := =Classifications/Periode/isHistorisch[Periode_rel] ? 'const(false,.)'
			: 'PrevObject/ResterendNu[PrevObject_rel] > 0.0 && ResterendFactor <= 0.0';
		
		attribute<ratio> ResterendNu     := =Classifications/Periode/isHistorisch[Periode_rel] ?
			'isdefined(Sloopjaar) && Sloopjaar <= Zichtjaar_jaar ? 0.0 : 1.0'
			: 'isdefined(Sloopjaar) && Sloopjaar <= Zichtjaar_jaar ? 0.0 :
			Afbouw ? max_elem(PrevObject/ResterendNu[PrevObject_rel] - 0.1, 0.0) : ResterendFactor';
			//TODO: 0.1 dynamisch afleiden van aantal zichtjaren, werkt nu alleen bij 1-jaar stappen
						
		attribute<nrAsl> nrAansluitingen := ResterendNu * nrAansluitingen_i;
		attribute<m2>    Oppervlakte     := ResterendNu * Oppervlakte_i;
		
		attribute<ratio> StartAfbouw     := PrevObject/ResterendNu[PrevObject_rel] - ResterendNu;

		container AansluitCapaciteit
		{
			attribute<kW> RV    (..) := ASW_RVmt;
			attribute<kW> TW    (..) := ASW_TWmt;
			attribute<kW> Warmte(..) := RV + TW;
			attribute<kW> KD    (..) := ASW_K;
			attribute<kW> eWP   (..) := max_elem(RV, TW);
			attribute<kW> eZ    (..) := ASW_Eapp;
			attribute<kW> eM    (..) := ASW_Eewp;

			parameter<ratio> GTF_RVmt := Vermogens/GTF_RVmt[BCsector];
			parameter<ratio> GTF_RVlt := Vermogens/GTF_RVlt[BCsector];
			parameter<ratio> GTF_TW   := Vermogens/GTF_TW[BCsector];
			parameter<ratio> GTF_K    := Vermogens/GTF_K[BCsector];
			parameter<ratio> GTF_Enet := Vermogens/GTF_Enet[BCsector];

 			attribute<kW>    ASW_RVmt (..) := =
 				  BCsector == Classifications/BebouwingsSectorBase/V/Woning ?
 				  	'IsMeergezins ? Oppervlakte * Vermogens/ASW_RVmt_wh_opp + nrAansluitingen * Vermogens/ASW_RVmt_wh_asl : Oppervlakte * Vermogens/ASW_RVmt_wl_opp + nrAansluitingen * Vermogens/ASW_RVmt_wl_asl'
 				: BCsector == Classifications/BebouwingsSectorBase/V/Util   ? 'Oppervlakte * Vermogens/ASW_RVmt_u_opp_specific[BebouwingsType]'
 				: 'const(0.0[kW],..)';
 			
 			attribute<kW>    ASW_RVlt (..) := =
 				  BCsector == Classifications/BebouwingsSectorBase/V/Woning ?
 				  	'IsMeergezins ? Oppervlakte * Vermogens/ASW_RVlt_wh_opp + nrAansluitingen * Vermogens/ASW_RVlt_wh_asl : Oppervlakte * Vermogens/ASW_RVlt_wl_opp + nrAansluitingen * Vermogens/ASW_RVlt_wl_asl'
 				: BCsector == Classifications/BebouwingsSectorBase/V/Util   ? 'Oppervlakte * Vermogens/ASW_RVlt_u_opp_specific[BebouwingsType]'
 				: 'const(0.0[kW],..)';
 			
			attribute<kW>    ASW_TWmt (..) := = 
				  BCsector == Classifications/BebouwingsSectorBase/V/Woning ?
				  	'IsMeergezins ? Oppervlakte * Vermogens/ASW_TWmt_wl_opp + nrAansluitingen * Vermogens/ASW_TWmt_wl_asl : Oppervlakte * Vermogens/ASW_TWmt_wh_opp + nrAansluitingen * Vermogens/ASW_TWmt_wh_asl'
 				: BCsector == Classifications/BebouwingsSectorBase/V/Util   ? 'Oppervlakte * Vermogens/ASW_TWmt_u_opp + nrAansluitingen * Vermogens/ASW_TWmt_u_asl'
 				: 'const(0.0[kW],..)';
 			
			attribute<kW>    ASW_TWlt (..) :== 
				  BCsector == Classifications/BebouwingsSectorBase/V/Woning ?
				  	'IsMeergezins ? Oppervlakte * Vermogens/ASW_TWlt_wl_opp + nrAansluitingen * Vermogens/ASW_TWlt_wl_asl : Oppervlakte * Vermogens/ASW_TWlt_wh_opp + nrAansluitingen * Vermogens/ASW_TWlt_wh_asl'
 				: BCsector == Classifications/BebouwingsSectorBase/V/Util   ? 'Oppervlakte * Vermogens/ASW_TWlt_u_opp + nrAansluitingen * Vermogens/ASW_TWlt_u_asl'
 				: 'const(0.0[kW],..)';
 			
			attribute<kW>    ASW_K    (..) := = 
				  BCsector == Classifications/BebouwingsSectorBase/V/Woning ?
				  	'IsMeergezins ? Oppervlakte * Vermogens/ASW_K_wl_opp + nrAansluitingen * Vermogens/ASW_K_wl_asl : Oppervlakte * Vermogens/ASW_K_wh_opp + nrAansluitingen * Vermogens/ASW_K_wh_asl'
 				: BCsector == Classifications/BebouwingsSectorBase/V/Util   ? 'Oppervlakte * Vermogens/ASW_K_u_opp + nrAansluitingen * Vermogens/ASW_K_u_asl'
 				: 'const(0.0[kW],..)';
 			
			attribute<kW>    ASW_Eapp (..) := = 
				  BCsector == Classifications/BebouwingsSectorBase/V/Woning ?
				  	'IsMeergezins ? Oppervlakte * Vermogens/ASW_Eapp_wl_opp + nrAansluitingen * Vermogens/ASW_Eapp_wl_asl : Oppervlakte * Vermogens/ASW_Eapp_wh_opp + nrAansluitingen * Vermogens/ASW_Eapp_wh_asl'
 				: BCsector == Classifications/BebouwingsSectorBase/V/Util   ? 'Oppervlakte * Vermogens/ASW_Eapp_u_opp + nrAansluitingen * Vermogens/ASW_Eapp_u_asl'
 				: 'const(0.0[kW],..)';
 			
			attribute<kW>    ASW_Ehwp (..) := = 
				  BCsector == Classifications/BebouwingsSectorBase/V/Woning ?
				  	'IsMeergezins ? Oppervlakte * Vermogens/ASW_Ehwp_wl_opp + nrAansluitingen * Vermogens/ASW_Ehwp_wl_asl : Oppervlakte * Vermogens/ASW_Ehwp_wh_opp + nrAansluitingen * Vermogens/ASW_Ehwp_wh_asl'
 				: BCsector == Classifications/BebouwingsSectorBase/V/Util   ? 'Oppervlakte * Vermogens/ASW_Ehwp_u_opp + nrAansluitingen * Vermogens/ASW_Ehwp_u_asl'
 				: 'const(0.0[kW],..)';
 			
			attribute<kW>    ASW_Eewp (..) := = 
				  BCsector == Classifications/BebouwingsSectorBase/V/Woning ?
				  	'IsMeergezins ? Oppervlakte * Vermogens/ASW_Eewp_wh_opp + nrAansluitingen * Vermogens/ASW_Eewp_wh_asl : Oppervlakte * Vermogens/ASW_Eewp_wl_opp + nrAansluitingen * Vermogens/ASW_Eewp_wl_asl'
 				: BCsector == Classifications/BebouwingsSectorBase/V/Util   ? 'Oppervlakte * Vermogens/ASW_Eewp_u_opp + nrAansluitingen * Vermogens/ASW_Eewp_u_asl'
 				: 'const(0.0[kW],..)';
		}

		container Functioneel_base := =Invoer/DefaultInstellingen/Basis/BC_doNieuwbouw ? 'union/result' : 'PrevObject'
		{
			container Gedragfactor := SpecifiekeInstellingen/RuimtelijkeVraag/Gedrag;
			attribute<ratio> Klimaateffect (..) := KlimaatFactorMap[gridm100_rel];

			attribute<GJ_yr> VT (..) := BaseValues/VT * Gedragfactor/VT * ResterendNu;
			attribute<GJ_yr> KK (..) := BaseValues/KK * Gedragfactor/KK * ResterendNu;
			attribute<GJ_yr> EA (..) := BaseValues/EA * Gedragfactor/EA * ResterendNu;
			attribute<GJ_yr> TW (..) := BaseValues/TW * Gedragfactor/TW * ResterendNu;
			attribute<GJ_yr> KD (..) := BaseValues/KD * Gedragfactor/KD * ResterendNu * ( 1.0 + 3.66 *(1.0 - Klimaateffect));
			
			
			container BaseValues := for_each_nedv(
				Classifications/FunctioneleVraag/name,
				(Invoer/DefaultInstellingen/Basis/BC_doNieuwbouw ? 'union/result' : 'PrevObject') + '/Functioneel/BaseValues/' + Classifications/FunctioneleVraag/name,
				..,
				GJ_yr);
			container RV_N1_per_bouwdeel := for_each_nedv(
				Classifications/bouwdeel/name,
				(Invoer/DefaultInstellingen/Basis/BC_doNieuwbouw ? 'union/result' : 'PrevObject') + '/Functioneel/RV_N1_per_bouwdeel/' + Classifications/bouwdeel/name,
				..,
				GJ_yr);
				
			container RV_N1_per_bouwdeel_now := for_each_nedv(
				Classifications/bouwdeel/name,
				'RV_N1_per_bouwdeel/'+ Classifications/bouwdeel/name+ ' * Gedragfactor/RV * ResterendNu * Klimaateffect',
				..,
				GJ_yr);
		}
		container Functioneel := CalculationSchemes/BerekenFunctioneel(BO, BO, id(.));

		container MetervraagBerekening := CalculationSchemes/FunctioneelToMetervraag(BO, SPF); 
		container Metervraag := MetervraagBerekening/result;
		
		container Activatie
		{
			container Bouwdelen := for_each_nedv(
				classifications/bouwdeel/name,
				'Zichtjaar_jaar - BO/Bouwdelen/LastVervanging/' + classifications/bouwdeel/name +
				'>= Classifications/Bouwdeel/Levensduur[Classifications/Bouwdeel/V/'+ classifications/bouwdeel/name +']',
				(..),
				bool);
			container Producten := for_each_nedv(
				classifications/product/name,
				'Zichtjaar_jaar - InstallatiePerProduct/LastVervanging/' + classifications/product/name +
				'>= Classifications/Installatie/Levensduur[InstallatiePerProduct/'+ classifications/product/name +']',
				(..),
				bool);
			attribute<bool> BouwdeelVervanging (..) := ='add('+AsItemList('uint8(Bouwdelen/'+Classifications/bouwdeel/name+')')+') > 0b';
			attribute<bool> ProductVervanging  (..) := ='add('+AsItemList('uint8(Producten/'+Classifications/product/name+')')+') > 0b';

			attribute<bool> BouwdeelActief (..) := BouwdeelVervanging;
			attribute<bool> ProductActief  (..) := ProductVervanging;


			attribute<classifications/Uitvoering> Uitvoering (..) := switch(
				  case(AND(BouwdeelVervanging, IsMeergezins, Eigendom_rel == Classifications/Eigendom/V/WoonCorp), Classifications/Uitvoering/V/Nat_Mgw_Prj)
				, case(AND(BouwdeelVervanging, IsMeergezins                                                     ), Classifications/Uitvoering/V/Nat_Mgw_Ind)
				, case(AND(BouwdeelVervanging              , Eigendom_rel == Classifications/Eigendom/V/WoonCorp), Classifications/Uitvoering/V/Nat_Egw_Prj)
				, case(AND(BouwdeelVervanging                                                                   ), Classifications/Uitvoering/V/Nat_Egw_Ind)
				, case(AND(                    IsMeergezins, Eigendom_rel == Classifications/Eigendom/V/WoonCorp), Classifications/Uitvoering/V/Zst_Mgw_Prj)
				, case(AND(                    IsMeergezins                                                     ), Classifications/Uitvoering/V/Zst_Mgw_Ind)
				, case(AND(                                  Eigendom_rel == Classifications/Eigendom/V/WoonCorp), Classifications/Uitvoering/V/Zst_Egw_Prj)
				, 		                                                                                           Classifications/Uitvoering/V/Zst_Egw_Ind);

		}
	}
		
	//============== Voorwaarden voor het wel of niet toepassen van een gebouwoptie. Welke geldt is opgegeven in de runinstellingen per Rekenstap.
	container Criteria := BO/Criteria
	{
		//"always" : Wordt altijd toegepast indien technisch mogelijk
		attribute<bool> always (BO) := const(true,  BO);

		//"never" : Wordt nooit toegepast en er worden geen berekeningen voor deze optie gedaan
		attribute<bool> never  (BO) := const(false, BO);

		//"gebied" : Wordt niet op gebouwniveau toegepast maar kan wel in werking gaan bij toekenning van een gebiedsoptie
		attribute<bool> gebied (BO) := never;

		//"Alloc" : Wordt alleen toegepast bij kandidaten die al deelnemer zijn in een gebiedsoptie
		attribute<bool> Alloc  (BO) := Classifications/WarmteOptie/isGebiedsOptie[BO/WarmteOptie_rel];

		//"NoAlloc" : Wordt alleen toegepast bij kandidaten die geen deelnemer zijn in een gebiedsoptie
		attribute<bool> NoAlloc(BO) := not(Alloc);

		//"isUtilGroot" : Wordt alleen toegepast bij kandidaten met een capaciteitsvraag voor verwarming van meer dan 100 kilowatt
		attribute<bool> isUtilGroot(BO) := BO/AansluitCapaciteit/RV >= 100 kW;

		//"isUtilKlein" : Wordt alleen toegepast bij kandidaten met een capaciteitsvraag voor verwarming van meer dan 100 kilowatt
		attribute<bool> isUtilKlein(BO) := not(isUtilGroot);
	}

	container EIA_Opties := ='SpecifiekeInstellingen/Beleid/EIA/E_'+NcwRefBase;
	
	container BC_kentallen := kengetallen/BCkentallen/BC_kentallen(
		LeerCurves/LTAS/Curve,
		Schuiven/KostenMin,
		Schuiven/KostenMax,
		BebouwingsTypeDomein,
		BO)
	{
		container Opbrengsten
		{
			attribute<float64> AansluitTarief (BO) :=
				  (VraagKentallenComponent/Opbrengsten/AansluitTarief_min[BO/BebouwingsType] * Schuiven/OpbrMin
				+  VraagKentallenComponent/Opbrengsten/AansluitTarief_max[BO/BebouwingsType] * Schuiven/OpbrMax);
	
			parameter<Eur_yr_asl> VastRechtMT :=
				( VraagKentallenComponent/Opbrengsten/VastRechtMT_Min * Schuiven/OpbrMin 
				+ VraagKentallenComponent/Opbrengsten/VastRechtMT_Max * Schuiven/OpbrMax);
	
			parameter<Eur_yr_asl> VastRechtLT :=
				( VraagKentallenComponent/Opbrengsten/VastRechtLT_Min * Schuiven/OpbrMin 
				+ VraagKentallenComponent/Opbrengsten/VastRechtLT_Max * Schuiven/OpbrMax);
	
			parameter<Eur_yr_asl> VastRechtK  :=
				( VraagKentallenComponent/Opbrengsten/VastRechtK_Min  * Schuiven/OpbrMin 
				+ VraagKentallenComponent/Opbrengsten/VastRechtK_Max  * Schuiven/OpbrMax);
	
			attribute<Eur>    AansluitBijdrageG  (BO) := =
				  BCsector == Classifications/BebouwingsSectorBase/V/Woning ? 
					'BO/isNuNieuw ? BO/nrAansluitingen * Kengetallen/Infra/AansluitTarief_nw_g : BO/nrAansluitingen * Kengetallen/Infra/AansluitTarief_bw_g'
				: BCsector == Classifications/BebouwingsSectorBase/V/Util ?   
					'BO/isNuNieuw ? BO/oppervlakte     * Kengetallen/Infra/AansluitTarief_nu_g : BO/oppervlakte     * Kengetallen/Infra/AansluitTarief_bu_g'
				: 'const(0[Eur],BO)', Descr = "Aansluitbijdrage voor nieuwe aansluiting op het gasnet";
				
			attribute<Eur>    AansluitBijdrageE  (BO) := =
				  BCsector == Classifications/BebouwingsSectorBase/V/Woning ? 
					'BO/isNuNieuw ? BO/nrAansluitingen * Kengetallen/Infra/AansluitTarief_nw_e : BO/nrAansluitingen * Kengetallen/Infra/AansluitTarief_bw_e'
				: BCsector == Classifications/BebouwingsSectorBase/V/Util ?   
					'BO/isNuNieuw ? BO/oppervlakte     * Kengetallen/Infra/AansluitTarief_nu_e : BO/oppervlakte     * Kengetallen/Infra/AansluitTarief_bu_e'
				: 'const(0[Eur],BO)', Descr = "Aansluitbijdrage voor nieuwe aansluiting op het elektriciteitsnetnet";
				
			attribute<Eur>    AansluitBijdrageT  (BO) := BO/nrAansluitingen * AansluitTarief                       , Descr = "Aansluitbijdrage voor nieuwe aansluiting op warmtenetten";
			attribute<Eur_yr> VastRechtBijdrageG (BO) := BO/nrAansluitingen * Kengetallen/Infra/jaarlijksVast_g    , Descr = "VastRechtBijdrage voor aansluiting op het gasnet";
			attribute<Eur_yr> VastRechtBijdrageE (BO) := BO/nrAansluitingen * Kengetallen/Infra/jaarlijksVast_e    , Descr = "VastRechtBijdrage voor aansluiting op het elektriciteitsnetnet";
			attribute<Eur_yr> VastRechtMT_T      (BO) := BO/nrAansluitingen * VastRechtMT                          , Descr = "VastRechtBijdrage voor aansluiting op warmtenetten";
			attribute<Eur_yr> VastRechtLT_T      (BO) := BO/nrAansluitingen * VastRechtLT                          , Descr = "VastRechtBijdrage voor aansluiting op warmtenetten";
			attribute<Eur_yr> VastRechtK_T       (BO) := BO/nrAansluitingen * VastRechtK                           , Descr = "VastRechtBijdrage voor aansluiting op warmtenetten";
	
			attribute<Eur_yr> HeffingskortingE   (BO) := BO/nrAansluitingen * SpecifiekeInstellingen/Beleid/Heffingskorting;
		}
	}
	container VerbruiksOpties 
	{		
		unit<uint32> Installatie := Classifications/Installatie
		{
			attribute<Eur_asl>   Ki_asl := =replace('(Ki_asl_min_@BC * Schuiven/KostenMin + Ki_asl_max_@BC * Schuiven/KostenMax)* merge(LeerCurve_rel, float64, '+AsItemList('const(LeerCurves/'+Classifications/LeerCurves/name+'/Curve, .)')+')', '@BC', NcwRefBase);
			attribute<Eur_kW>    Ki_cap := =replace('(Ki_cap_min_@BC * Schuiven/KostenMin + Ki_cap_max_@BC * Schuiven/KostenMax)* merge(LeerCurve_rel, float64, '+AsItemList('const(LeerCurves/'+Classifications/LeerCurves/name+'/Curve, .)')+')', '@BC', NcwRefBase);
			attribute<Eur_m2>    Ki_opp := =replace('(Ki_opp_min_@BC * Schuiven/KostenMin + Ki_opp_max_@BC * Schuiven/KostenMax)* merge(LeerCurve_rel, float64, '+AsItemList('const(LeerCurves/'+Classifications/LeerCurves/name+'/Curve, .)')+')', '@BC', NcwRefBase);

			attribute<Eur_kW>    Ki30_cap   := Ki_cap * AT30;
			attribute<Eur_kW>    Ki20_cap   := Ki_cap * AT20;
			attribute<Eur_kW>    Ki15_cap   := Ki_cap * AT15;
			attribute<Eur_yr_kW> Kj_OH_cap  := Ki_cap * R_OH;
			attribute<Eur_yr_kW> Kj_Adm_cap := Ki_cap * R_Adm;
		}
		
		unit<uint8> GebouwOptie := Classifications/GebouwOptie
		{
			attribute<Eur_asl> Ki_asl := sum(Installatie/Ki_asl[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
			attribute<Eur_m2 > Ki_opp := sum(Installatie/Ki_opp[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);

			attribute<Eur_yr_asl> Kj_Adm_asl := sum((Installatie/Ki_asl * Installatie/R_Adm)[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
			attribute<Eur_yr_asl> Kj_OH_asl  := sum((Installatie/Ki_asl * Installatie/R_OH )[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
			attribute<Eur_yr_m2 > Kj_Adm_opp := sum((Installatie/Ki_opp * Installatie/R_Adm)[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
			attribute<Eur_yr_m2 > Kj_OH_opp  := sum((Installatie/Ki_opp * Installatie/R_OH )[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);

			attribute<Eur_asl> Ki30_asl := sum((Installatie/Ki_asl * Installatie/AT30)[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
			attribute<Eur_asl> Ki20_asl := sum((Installatie/Ki_asl * Installatie/AT20)[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
			attribute<Eur_asl> Ki15_asl := sum((Installatie/Ki_asl * Installatie/AT15)[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);

			attribute<Eur_m2 > Ki30_opp := sum((Installatie/Ki_opp * Installatie/AT30)[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
			attribute<Eur_m2 > Ki20_opp := sum((Installatie/Ki_opp * Installatie/AT20)[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
			attribute<Eur_m2 > Ki15_opp := sum((Installatie/Ki_opp * Installatie/AT15)[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
		}
	}
	parameter<ratio>  BTW_Factor    := ='1.0 '+(Classifications/BebouwingsSectorBase/DraagtBTW[BcSector] ? '+ SpecifiekeInstellingen/VAT    / 100[percent]' : '');
	parameter<ratio>  BTW_Factor_gv := ='1.0 '+(Classifications/BebouwingsSectorBase/DraagtBTW[BcSector] ? '+ SpecifiekeInstellingen/VAT_gv / 100[percent]' : '');
	
	#include <ProductActieveWoning.dms>
	#include <BouwdeelActieveWoning.dms>
	#include <ActieveWoning.dms>
	
	unit<uint32> BebouwingsObjectMetGebouwOptie := ActieveWoning/BebouwingsObjectMetGebouwOptie
	{
		container BC_kentallen := ../BC_kentallen;
		
		container functioneel := ActieveWoning/BebouwingsObjectMetGebouwOptie/functioneel
		{
			container BaseValues := BO/Functioneel_base/BaseValues; // TODO: check of dit weg kan
			container RV_N1_Per_Bouwdeel := BO/Functioneel_base/RV_N1_Per_Bouwdeel; // TODO: check of dit weg kan
		}		
	}
	
	unit<uint32> Results := BebouwingsObjectMetGebouwOptie
	{
		container Opbrengsten := BC_kentallen/Opbrengsten;
		container Functioneel := BebouwingsObjectMetGebouwOptie/Functioneel;
		container Metervraag  := BebouwingsObjectMetGebouwOptie/Metervraag;
		
		container OrgKapitaallasten := =Invoer/DefaultInstellingen/Basis/BC_doNieuwbouw ? 'Union/result/Kapitaallasten' : 'PrevObject/Kapitaallasten';
		
		container Warmtewet
		{
			attribute<GJ_yr> V_RV     (BO) := Functioneel/RV;
			attribute<GJ_yr> V_TW     (BO) := Functioneel/TW;
			attribute<GJ_yr> V_Warmte (BO) := V_RV + V_TW;
			attribute<GJ_yr> V_gas    (BO) := Metervraag/gas;
			

			unit<uint32> GasVerbruikers := subset(V_Gas > 0.0[gj_yr])
			{
				attribute<GJ_yr> V_gas    := ../V_gas[nr_OrgEntity];
				attribute<GJ_yr> V_warmte := ../V_warmte[nr_OrgEntity];
				//TODO_OV bij V_warmte aftrek eventuele installaties die al een deel van de vraag vullen binnen deze groep (bijv Zonneboilers, future use)
			}
			parameter<float64> PrijsFactor_impl :=  sum(GasVerbruikers/V_gas) / sum(GasVerbruikers/V_warmte) * Voorkeuren/MinderDanAndersFactor;
			parameter<float64> PrijsFactor_corr :=  MakeDefined(PrijsFactor_impl, 1.25);
			parameter<float64> PrijsFactor      :=  = Classifications/BebouwingsSectorBase/name[Classifications/BebouwingsSectorBase/Warmtewet_BC_rel[BCsector]]+'/results/Warmtewet/PrijsFactor_corr';

			parameter<Eur_GJ> WarmtePrijs := = Voorkeuren/IsVasteWarmtePrijs 
				? 'Voorkeuren/VasteWarmtePrijs'
				: 'PrijsFactor * PrijzenAardgas/KGJ_eindgebruik_excl[classify(0[GJ_yr], PrijzenAardgas/ClassBreak)]';
		
			parameter<ratio> KoudeFactor := =BcSector == Classifications/BebouwingsSector/V/Woning ?
				'1.0[ratio] / SpecifiekeInstellingen/NMDA_Prijzen/KoudePrijs/Woningen'  :
				'1.0[ratio] / SpecifiekeInstellingen/NMDA_Prijzen/KoudePrijs/Utiliteit' ;
			parameter<Eur_GJ> KoudePrijs := KoudeFactor * PrijzenElektriciteit/KGJ_eindgebruik_excl[classify(0[GJ_yr], PrijzenElektriciteit/ClassBreak)];
		}
	}
}