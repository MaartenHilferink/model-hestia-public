
//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) Hestia 2022 - PBL & TNO                                        //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

container TVW
{
	container gemeente
	{
		unit<uint32> gemeente_input
			:	StorageName     = "%HestiaDataDir%/TVW/Gemeente.csv"
			,	StorageType     = "gdal.vect"
			,	StorageReadOnly = "True"
			{
				attribute<string> label :=  uppercase(id__gem_code_);
			}

		unit<uint32> GM := RuimtelijkeData/StudieGebied/Gemeente
		{
			attribute<gemeente_input> input_rel := rlookup(GM_code, uppercase(gemeente_input/label));
			attribute<bool>           has_TVW   := isDefined(input_rel);
			attribute<nrAsl>          nr_Asl    := sum(TussenResultaten/StartJaar/BebouwingsComponenten/Woning/BO/nrAansluitingen, Invoer/RuimtelijkeData/StudieGebied/Buurt/Gemeente_rel[TussenResultaten/StartJaar/BebouwingsComponenten/Woning/BO/PlanRegio_rel]);
		}
	}

	container document
	{
		unit<uint32> document_input
			:	StorageName     = "%HestiaDataDir%/TVW/Document.csv"
			,	StorageType     = "gdal.vect"
			,	StorageReadOnly = "True"
			{
				attribute<string> label :=  uppercase(id__doc_code_);	
			}

		unit<uint32> DC := document_input
		{
			attribute<TVW_Classifications/doctype>   doctype_rel   := uint32(doc_type__code_);
			attribute<TVW_Classifications/docstatus> docstatus_rel := uint32(doc_status__tekst_);
			attribute<gemeente/GM> GM_rel  := rlookup(gemeente__gem_code_, gemeente/GM/GM_code);
		}
	}
	
	container plan
	{
		unit<uint32> plantabel_input
			:	StorageName     = "%HestiaDataDir%/TVW/plan.csv"
			,	StorageType     = "gdal.vect"
			,	StorageReadOnly = "True"
			{
				attribute<string> label :=  uppercase(id__pln_code_);	
				attribute<planshape_input> shp_rel :=  rlookup(uppercase(id__pln_code_), uppercase(planshape_input/pln_code));	
			}
		unit<uint32> planshape_input
			:	StorageName     = "%HestiaDataDir%/TVW/TVW_Plan.shp"
			,	StorageType     = "gdal.vect"
			,	StorageReadOnly = "True"
			{
				attribute<string> label :=  uppercase(pln_code);	

				attribute<bool> geom_ok := isDefined(geometry);

				attribute<geography/rdc_meter> geometry_RD (poly) := LatLongWgs842RD(geometry, geography/rdc_meter);
			}

		unit<uint32> PL := plantabel_input
		{
			attribute<geography/rdc_meter> geometry (poly) := planshape_input/geometry_RD[shp_rel];
			attribute<bool> geom_ok := isDefined(geometry);

			attribute<string> Plan_naam := plantabel_input/naam__tekst_;

			attribute<document/DC> DC_rel_i := rlookup(document__doc_code_, document/DC/label);
			attribute<document/DC> DC_rel   := isDefined(DC_rel_i) ? DC_rel_i : rlookup('DC' + substr(label, 2, 6), uppercase(document/DC/label));
			attribute<bool>        DC_ok    := isDefined(DC_rel);


			attribute<gemeente/GM> GM_rel_i := document/DC/GM_rel[DC_rel];
			attribute<gemeente/GM> GM_rel   := isDefined(GM_rel_i) ? GM_rel_i : rlookup('GM' + substr(label, 2, 4), uppercase(gemeente/GM/GM_code));
			attribute<bool>        GM_ok    := isDefined(GM_rel);
		}

		unit<uint32> VBO := /Invoer/RuimtelijkeData/BAG/import/VBO
		{
			attribute<nrAsl> nr_Asl := const(1.0[nrAsl],.);

			container Matching
			{
				unit<uint32> p := VBO
				{
					attribute<geography/rdc_meter> xy (p) := VBO/geometry;
				}

				// driehoek wordt alleen gebruikt in workaround voor point_in_all_polygons voor GeoDmsVersion < 8.031				
				attribute<geography/rdc_meter> driehoek  (p, poly)  :=
					points2sequence(
						union_data(union_unit(p,p,p,p), p/xy, p/xy+point(0.1,0.0), p/xy+point(0.1,0.1), p/xy),
						union_data(union_unit(p,p,p,p), id(p), id(p), id(p), id(p)),
						union_data(union_unit(p,p,p,p), const(0,p), const(1,p), const(2,p), const(3,p))
									);
				parameter<string> piap_expr := 'point_in_all_polygons(p/xy, PL/geometry)';
				parameter<string> workaround := 'overlay_polygon(driehoek[geography/rdc_mm], PL/geometry[geography/rdc_mm])';
				unit<uint32> kruistabel  := =(GeoDmsVersion() > 8.0305) ? piap_expr : workaround;


				attribute<uint32> PL_count(p) := pcount(kruistabel/first_rel);
				
				attribute<uint32> P_count(PL) := pcount(kruistabel/second_rel);
			}
		}
	}
}