//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) Hestia 2021 - PBL & TNO                                        //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

template StartingStateComponent
{
	// begin case parameters
	unit<uint32> BebouwingsObjectSrc;
	unit<uint32> ModelObject;
	parameter<Classifications/BebouwingsSector> BebouwingsSector_rel;
	// end case parameters

	parameter<yr_uint16> Startjaar_jaar := Classifications/RekenJaar/values[first(Classifications/ZichtJaar/RekenJaar_rel)];

	unit<uint32>  results := BebouwingsObjectSrc
	{
		// =============== ongewijzigde attributen uniform voor alle BC
		attribute<Invoer/SpecifiekeInstellingen/PlanRegio> PlanRegio_rel   := BebouwingsObjectSrc/buurt_rel;
		attribute<ModelObject>                             ModelObject_rel := rlookup(BebouwingsObjectSrc/ModelObjectKey, ModelObject/ModelObjectKey);

		// =============== attributen die per Rekenstap kunnen wijzigen door toepassing van GebouwOpties
		attribute<Classifications/SchilLabel>  SchilLabel_rel  := =(BebouwingsSector_rel == Classifications/BebouwingsSector/V/Woning) 
			? 'MakeDefined(BebouwingsObjectSrc/SchilLabel_rel, Classifications/schillabel/V/N)'
			: 'MakeDefined(BebouwingsObjectSrc/SchilLabel_rel, Default_Energielabel_rel';
		attribute<uint32>                      SchilLabel_date := MakeDefined(BebouwingsObjectSrc/SchilLabel_date, (0/0)[uint32]);

		attribute<Classifications/SchilLabel>  DefaultLabel_rel := MakeDefined(BebouwingsObjectSrc/SchilLabel_rel, Default_Energielabel_rel);

		attribute<units/yr_uint16>             Bouwjaar       := BebouwingsObjectSrc/bouwjaar;
		attribute<units/yr_uint16>             Sloopjaar      := BebouwingsObjectSrc/sloopjaar;
		attribute<Classifications/Eigendom>    Eigendom_rel   := BebouwingsObjectSrc/Eigendom_rel;
		attribute<units/yr_uint16>             BouwjaarOf9999(results) := MakeDefined(Bouwjaar, 9999[yr_uint16]);

		unit<uint32> BestaandAflevergebied := Invoer/RuimtelijkeData/BestaandeWarmtenetten/Aflevergebied_data;
		unit<uint32> BestaandWarmtenet     := Invoer/RuimtelijkeData/BestaandeWarmtenetten/Warmtenetten;
		attribute<BestaandAflevergebied> BestaandAflevergebied_rel := point_in_polygon(BebouwingsObjectSrc/point , BestaandAflevergebied/Geometry);
		attribute<BestaandWarmtenet>     BestaandWarmtenet_rel     := BestaandAflevergebied/Warmtenet_rel[BestaandAflevergebied_rel];
		
		attribute<bool> Gasloos := =Invoer/StartgegevensAan ? 'BebouwingsObjectSrc/Gasloos' : 'const(false,.)';
		attribute<bool> isMeergezins := BebouwingsTypeDomein/IsMeergezins [ Woningtype_rel ] ;

		#include <StartGebouwOpties.dms>
		attribute<Classifications/GebouwOptie> GebouwOptie_rel := StartGebouwOpties/GebouwOptie_rel;

		//====================== INITIELE BEREKENING RUIMTEVERWARMING ================

 		//=====warmteverlies per bouwdeel als functie van oppervlak van bouwdeel en waarde horende bij isolatiegraad
 		container HuishoudensGrootte := model/calculationschemes/HuishoudensGrootteSchatting(.);
		container warmteverlies_theoretisch_startjaar := for_each_nedv(
			Classifications/Bouwdeel/name
			,replace('bouwdelen/@BD@ * merge(uint8(bouwdelen/isolatie/@BD@), GJ_yr_m2,' + AsItemList('Invoer/Kengetallen/WarmteVraag/Vrv_opp_'+Classifications/IsolatieNiveau/name+'[Classifications/Bouwdeel/V/@BD@]')+')','@BD@',Classifications/Bouwdeel/name)
			,.
			,GJ_yr)
		{
			container warmtewinst := Model/CalculationSchemes/BerekenWarmtewinst(.., 'Theoretisch_RV');
			
			container gemeten_correctie
			{
				attribute<Geography/RegioIndelingen/Wijk>                                WK_rel         (...) := Invoer/RuimtelijkeData/StudieGebied/Buurt/Wijk_rel[Planregio_rel];
				attribute<Invoer/Kengetallen/Bebouwing/Woning/Verschilfactordata/W_E>    W_E_rel        (...) := combine_data(Invoer/Kengetallen/Bebouwing/Woning/Verschilfactordata/W_E, Woningtype_rel, Eigendom_rel);
				attribute<Invoer/Kengetallen/Bebouwing/Woning/Verschilfactordata/WK_W_E> WK_W_E_rel     (...) := combine_data(Invoer/Kengetallen/Bebouwing/Woning/Verschilfactordata/WK_W_E, WK_rel, W_E_rel);
				attribute<ratio>                                                         Verschilfactor (...) := Invoer/Kengetallen/Bebouwing/Woning/Verschilfactordata/WK_W_E/Verschilfactor[WK_W_E_rel];
			}

			//========= warmteverlies ventilatie
			attribute<GJ_yr>     Vrv_VT_asl     (..) := Invoer/Kengetallen/OverigeInstallaties/VT/Installatietypes/V_RV_asl[InstallatiePerProduct/VT] * nrAansluitingen_i, descr = "warmteverlies ventilatie vast per aansluiting";
			
			//========= theoretische verlies ruimteverwarming (excl warmtewinsten)
			attribute<GJ_yr>     Theoretisch_RV (..) := VL + DP + DS + MG + MS + DR + PL + RO + RB + KR + Vrv_VT_asl;
			attribute<Kwh_yr_m2> Kwh_m2_RV      (..) := makedefined((Theoretisch_RV / 3.6[MJ / kWh] * 1000 [ MJ / GJ]) / Oppervlakte,0.0[Kwh_yr_m2]);
			attribute<ratio>     Correction_RV  (..) := 1.0[ratio] + Invoer/Kengetallen/Constanten/BinnenTemp_A * Invoer/Kengetallen/Constanten/BinnenTemp_B ^ Kwh_m2_RV;

			//========= gemeten vraag ruimteverwarming gecorrigeerd voor warmtewinsten
			attribute<GJ_yr>     Gemeten_RV_i                  (..) := gemeten_correctie/verschilfactor * Functioneel/BaseValues/RV;
			attribute<GJ_yr>     Gemeten_RV_incl_tempcorrectie (..) := Gemeten_RV_i + warmtewinst/totaal;

			container TemperatuurCorrectie
			{
				attribute<Kwh_yr_m2> R_cor     (...) := makedefined((Gemeten_RV_incl_tempcorrectie / 3.6[MJ / kWh] * 1000 [ MJ / GJ]) / Oppervlakte,0.0[Kwh_yr_m2]);
				parameter<uint32>    NrIterations := 20[uint32];
				parameter<Kwh_yr_m2> Tolerance    := 1[Kwh_yr_m2];
				container StartingState
				{
				attribute<Kwh_yr_m2> R_guess_new (....) := 
					  R_cor > 170[Kwh_yr_m2] ? R_cor
					: R_cor > 160[Kwh_yr_m2] ? 147[Kwh_yr_m2]
					: R_cor > 150[Kwh_yr_m2] ? 147[Kwh_yr_m2]
					: R_cor > 140[Kwh_yr_m2] ? 136[Kwh_yr_m2]
					: R_cor > 130[Kwh_yr_m2] ? 124[Kwh_yr_m2]
					: R_cor > 120[Kwh_yr_m2] ? 112[Kwh_yr_m2]
					: R_cor > 110[Kwh_yr_m2] ?  96[Kwh_yr_m2]
					: R_cor > 100[Kwh_yr_m2] ?  74[Kwh_yr_m2]
					: R_cor >  99[Kwh_yr_m2] ?  70[Kwh_yr_m2]
					: R_cor >  98[Kwh_yr_m2] ?  65[Kwh_yr_m2]
					: R_cor >  97[Kwh_yr_m2] ?  56[Kwh_yr_m2]
					: R_cor >  96[Kwh_yr_m2] ?  38[Kwh_yr_m2]
					: R_cor >  95[Kwh_yr_m2] ?  34[Kwh_yr_m2]
					: R_cor >  90[Kwh_yr_m2] ?  25[Kwh_yr_m2]
					: R_cor >  85[Kwh_yr_m2] ?  21[Kwh_yr_m2]
					: 10[Kwh_yr_m2];
				}
				unit<uint32> Iteration := Range(uint32, 0, NrIterations)
    		 	{
     				attribute<string> name          := 'I' + string(id(.));
    				attribute<string> PrevStateName := MakeDefined(Iteration/name[sub_or_null(id(Iteration), 1)], 'StartingState');
     			}
     
    			container Iterations := for_each_ne(Iteration/name, 'IterationTemplate('+Iteration/PrevStateName+')');

    			template IterationTemplate
    			{
    				container PrevStateName;

    				attribute<Kwh_yr_m2> R_guess     (....) := PrevStateName/R_guess_new;
    				attribute<Kwh_yr_m2> Result      (....) := R_guess * (1.0[ratio] + Invoer/Kengetallen/Constanten/BinnenTemp_A * Invoer/Kengetallen/Constanten/BinnenTemp_B ^ R_guess);
    				attribute<Kwh_yr_m2> R_guess_new (....) := (Result - R_cor) > 0.5[Kwh_yr_m2] ? (R_guess + 1[Kwh_yr_m2]) : (Result - R_cor) < -0.5[Kwh_yr_m2] ? (R_guess + 1[Kwh_yr_m2]) : R_guess;
    			}

			//	R * (1 + 7.2 * 0.96 ^ R);

				attribute<Kwh_yr_m2> R      (...) := ='Iterations/I' + string(NrIterations-1[uint32]) + '/R_guess_new';
				attribute<ratio>     factor (...) := R / R_cor;
			}
			attribute<GJ_yr> Gemeten_RV (..) := Gemeten_RV_incl_tempcorrectie * TemperatuurCorrectie/factor;

			//========= relatief verschil als fitfactor
			attribute<ratio>     Fitfactor  (..) := Gemeten_RV / Theoretisch_RV;

			//========= gefit verlies bij isolatiegraad N0 als referentiepunt voor berekeningen per zichtjaar
			container RV_N0_per_Bouwdeel := for_each_nedv(
				  Classifications/Bouwdeel/name
				, 'bouwdelen/'+Classifications/Bouwdeel/name+' * Invoer/Kengetallen/WarmteVraag/Baselevel[Classifications/Bouwdeel/V/'+Classifications/Bouwdeel/name+'] * Fitfactor'
				, (..)
				, GJ_yr
				)
			{
				//========= gefit verlies totaal
				attribute<GJ_yr> Total (...) := ='add('+AsItemList(Classifications/bouwdeel/name)+')';
			}
		}

		container AansluitCapaciteit
		{
			container Vermogens := Invoer/Kengetallen/Vermogens ( /Tussenresultaten/Startjaar/Schuiven/EfficiencySchuif ) ;
			attribute<nrAsl> nrAansluitingen (results) := nrAansluitingen_i;
			parameter<Classifications/BebouwingsSectorBase> BCsector := BebouwingsSector_rel;
			attribute<kW> RV (results) := functioneel/RV * 0.25[kW_GJ_yr];
			attribute<kW> TW (results) :=  = 
				  BCsector == Classifications/BebouwingsSectorBase/V/Woning ?
				  	'IsMeergezins ? Oppervlakte * Vermogens/ASW_TWmt_wl_opp + nrAansluitingen * Vermogens/ASW_TWmt_wl_asl : Oppervlakte * Vermogens/ASW_TWmt_wh_opp + nrAansluitingen * Vermogens/ASW_TWmt_wh_asl'
 				: BCsector == Classifications/BebouwingsSectorBase/V/Util   ? 'Oppervlakte * Vermogens/ASW_TWmt_u_opp + nrAansluitingen * Vermogens/ASW_TWmt_u_asl'
 				: 'const(0.0[kW],..)';
			attribute<kW> KD (results) :=  = 
				  BCsector == Classifications/BebouwingsSectorBase/V/Woning ?
				  	'IsMeergezins ? Oppervlakte * Vermogens/ASW_K_wl_opp + nrAansluitingen * Vermogens/ASW_K_wl_asl : Oppervlakte * Vermogens/ASW_K_wh_opp + nrAansluitingen * Vermogens/ASW_K_wh_asl'
 				: BCsector == Classifications/BebouwingsSectorBase/V/Util   ? 'Oppervlakte * Vermogens/ASW_K_u_opp + nrAansluitingen * Vermogens/ASW_K_u_asl'
 				: 'const(0.0[kW],..)';
		}

		container Functioneel := for_each_nedv(
				Classifications/FunctioneleVraag/name,
				'BaseValues/'+ Classifications/FunctioneleVraag/name,
				.,
				GJ_yr)
		{
			container RV_N0_per_Bouwdeel := warmteverlies_theoretisch_startjaar/RV_N0_per_Bouwdeel;
			attribute<ratio> Fitfactor_VT (..) := warmteverlies_theoretisch_startjaar/Fitfactor;

			attribute<nrPers> Personen (..) := HuishoudensGrootte/nrPersonen_rnd;

			container TWprofiel := Model/CalculationSchemes/TWprofiel_selectie(..);

			container BaseValues := for_each_nedv(
				Classifications/FunctioneleVraag/name,

				Classifications/FunctioneleVraag/name == 'TW' ? 'nrAansluitingen_i * Invoer/Kengetallen/Bebouwing/Woning/TWprofiel/VTW_asl[ TWprofiel/TWprofiel_rel ]'
					:
				Classifications/FunctioneleVraag/name == 'KK' ?  
				                                           'Invoer/Kengetallen/OverigeInstallaties/KK/Installatietypes/Vkk_prs * HuishoudensGrootte/nrPersonen
																+ (  HuishoudensGrootte/nrPersonen_rnd < 2d ? Invoer/Kengetallen/OverigeInstallaties/KK/Installatietypes/Vkk_asl_1p
																   : HuishoudensGrootte/nrPersonen_rnd < 4d ? Invoer/Kengetallen/OverigeInstallaties/KK/Installatietypes/Vkk_asl_23p
																   :                                          Invoer/Kengetallen/OverigeInstallaties/KK/Installatietypes/Vkk_asl_45p) * nrAansluitingen_i 
																+ Invoer/Kengetallen/OverigeInstallaties/KK/Installatietypes/Vkk_zjr * (float64(2009) - float64( first(/rekenstap/jaar) ))*1[ _yr ] * nrAansluitingen_i'
					: 
				Classifications/FunctioneleVraag/name == 'RV' ? 
				'nrAansluitingen_i * merge(SchilLabel_rel, GJ_yr_asl,'
					+ AsItemList('Invoer/Kengetallen/Bebouwing/Woning/Results/Asl/RV_'+Classifications/SchilLabel/name+'[ModelObject_rel]')+')'
					'+ Oppervlakte_i   * merge(SchilLabel_rel, GJ_yr_m2,'
					+ AsItemList('Invoer/Kengetallen/Bebouwing/Woning/Results/Opp/RV_'+Classifications/SchilLabel/name+'[ModelObject_rel]')+')'
					:
				Classifications/FunctioneleVraag/name == 'VT' ?
					'Invoer/Kengetallen/OverigeInstallaties/VT/Installatietypes/V_E_asl[InstallatiePerProduct/VT] * nrAansluitingen_i'
					:
				'Invoer/Kengetallen/Bebouwing/'+Classifications/BebouwingsSector/name[BebouwingsSector_rel]+'/Results/Asl/'+Classifications/FunctioneleVraag/name+'[ModelObject_rel]* nrAansluitingen_i +
				 Invoer/Kengetallen/Bebouwing/'+Classifications/BebouwingsSector/name[BebouwingsSector_rel]+'/Results/Opp/'+Classifications/FunctioneleVraag/name+'[ModelObject_rel] * Oppervlakte_i',
				..,
				GJ_yr);
		}
		
			
		container InstallatiePerProduct := for_each_nedv(Classifications/Product/name
			, 'Classifications/GebouwOptie/PerProduct/'+Classifications/Product/name+'[GebouwOptie_rel]'
			, .
			, Classifications/Installatie)
		{
			container LastVervanging := for_each_nedv(
				Classifications/Product/name,
				'(uint16(Startjaar_jaar) - mod(uint16(sub_or_null(Startjaar_jaar, Bouwjaar)), Classifications/Installatie/Levensduur[InstallatiePerProduct/' + Classifications/Product/name + ']))[yr_uint16]',
				..,
				yr_uint16)
				{
					attribute<yr_uint16> KK (...) := (uint16(Startjaar_jaar) - mod(uint16(sub_or_null(Startjaar_jaar, Bouwjaar)), Invoer/Kengetallen/OverigeInstallaties/KK/Installatietypes/Levensduur[InstallatiePerProduct/KK]))[yr_uint16];
					attribute<yr_uint16> VT (...) := (uint16(Startjaar_jaar) - mod(uint16(sub_or_null(Startjaar_jaar, Bouwjaar)), Invoer/Kengetallen/OverigeInstallaties/VT/Installatietypes/Levensduur[InstallatiePerProduct/VT]))[yr_uint16];
					attribute<yr_uint16> DK (...) := (uint16(Startjaar_jaar) - mod(uint16(sub_or_null(Startjaar_jaar, Bouwjaar)), Invoer/Kengetallen/OverigeInstallaties/DK/Installatietypes/Levensduur[InstallatiePerProduct/DK]))[yr_uint16];
				}
				
			container KokenAllocatieInitieel := Model/CalculationSchemes/KokenAllocatieInitieel(..);
			attribute<Invoer/Kengetallen/OverigeInstallaties/KK/Installatietypes> KK (..) := KokenAllocatieInitieel/Installatietype_rel;
			
			attribute<Invoer/Kengetallen/OverigeInstallaties/VT/Installatietypes> VT (..) := Bouwjaar > 1995[yr_uint16] ? Invoer/Kengetallen/OverigeInstallaties/VT/Installatietypes/V/Mec_Vst_Wis : Invoer/Kengetallen/OverigeInstallaties/VT/Installatietypes/V/Nat;

			attribute<Invoer/Kengetallen/OverigeInstallaties/DK/Installatietypes> DK (..) := const(Invoer/Kengetallen/OverigeInstallaties/DK/Installatietypes/V/geen,..);

			attribute<Classifications/AfgifteSysteem> AfgifteSysteem_init (..) := const(Classifications/AfgifteSysteem/V/MTAS, ..);
			attribute<Classifications/AfgifteSysteem> AS (..) := max_elem(
				 AfgifteSysteem_init
				,Classifications/Performance/AfgifteSysteem_rel[SPF/PerformancePerProduct/RVb]
				,Classifications/Performance/AfgifteSysteem_rel[SPF/PerformancePerProduct/RVp]
			);
		}
		
		container Func2Meter := CalculationSchemes/FunctioneelToMetervraag(., false);
		container BemeterdeGebouwInput_rel := for_each_nedv(Classifications/Product/name
			, 'rlookup(Classifications/Performance/Input_rel, Classifications/BemeterdeGebouwInput/org_rel)[SPF/PerformancePerProduct/'+Classifications/Product/name+']'
			, .
			, Classifications/BemeterdeGebouwInput
			);

		container SPF := Func2Meter/SPF
		{
			container PerformancePerProduct := Func2Meter/SPF/PerformancePerProduct;
		}

		container Bouwdelen := BebouwingsObjectSrc/Bouwdelen
		{
			container BouwDeelVerliesFactor := for_each_nedv(
				Classifications/Bouwdeel/name,
				'Classifications/Bouwdeel/Verlies[Classifications/Bouwdeel/V/'+Classifications/Bouwdeel/name+'] * Bouwdelen/'+Classifications/Bouwdeel/name+'',
				(..),
				m2);
			
			
			attribute<ratio> Norm_verliesfactor (..) := ='add('+AsItemList('BouwDeelVerliesFactor/'+Classifications/Bouwdeel/name)+') / Totaal';

			container Isolatie := for_each_nedv(
					Classifications/bouwdeel/name,
					'BebouwingsObjectSrc/Bouwdelen/Isolatie/'+Classifications/bouwdeel/name,
					..,
					Classifications/IsolatieNiveau);
		}
		
		container Kapitaallasten := for_each_nedv(Classifications/gebouw_kapitaallasten/name , 'const(0[Eur_yr], results)', results, Eur_yr), IsHidden = "True";
		container Jaarlijks      := for_each_nedv(Classifications/GebouwOptie_jaarlijks/name , 'const(0[Eur_yr], results)', results, Eur_yr), IsHidden = "True";

		unit<uint32> VIVETexports := /Invoer/RuimtelijkeData/BAG/vbo_woonfunctie_studiegebied
		{
			attribute<string> BAG_id := Results/identificatie;

			attribute<string> BU_code := Invoer/SpecifiekeInstellingen/PlanRegio/label[results/Planregio_rel];
			attribute<string> GM_code := Invoer/SpecifiekeInstellingen/PlanRegio/GM_code[results/Planregio_rel];

			attribute<string> adres := Results/Label;

			attribute<m2> oppervlak := Results/Oppervlakte_i;

			attribute<yr_uint16> Bouwjaar := Results/bouwjaar;
			attribute<yr_uint16> sloopjaar := Results/sloopjaar;

			attribute<ModelObject> TBE := Results/ModelObject_rel;
			attribute<string> TBE_string := ModelObject/Type_str[TBE] + '_' + ModelObject/Bouwjaar_str[TBE] + '_' + ModelObject/eigendom_str[TBE];

			attribute<ratio> Verschilfactor := Results/warmteverlies_theoretisch_startjaar/gemeten_correctie/verschilfactor;

			attribute<Classifications/Schillabel>  SchilLabel := Results/Schillabel_rel;
			attribute<uint32>                      Labeldatum := Results/Schillabel_date;

			attribute<Classifications/Installatie> Inst_RVb := Results/InstallatiePerProduct/RVb;
			attribute<Classifications/Installatie> Inst_RVp := Results/InstallatiePerProduct/RVp;
			attribute<Classifications/Installatie> Inst_TWb := Results/InstallatiePerProduct/TWb;
			attribute<Classifications/Installatie> Inst_TWp := Results/InstallatiePerProduct/TWp;

			attribute<Invoer/Kengetallen/OverigeInstallaties/KK/Installatietypes> Koken := Results/InstallatiePerProduct/KK;

			attribute<GJ_yr> V_RV := Results/Functioneel/BaseValues/RV;
			attribute<GJ_yr> V_TW := Results/Functioneel/BaseValues/TW;
			attribute<GJ_yr> V_KK := Results/Functioneel/BaseValues/KK;

			attribute<GJ_yr> V_elek_kk   := Results/Func2Meter/koken/Vj_elek;
			attribute<GJ_yr> V_elek_twrv := Results/Func2Meter/metervraag_per_input/E;
			attribute<GJ_yr> V_elek_pomp := Results/Func2Meter/eEffect/Vj_elek;
			attribute<GJ_yr> V_gas       := Results/Func2Meter/result/gas;

			attribute<ratio> klimaatfactor := /TussenResultaten/StartJaar/KlimaatFactorMap[point [ Geography/rdc_grids/m100 ] ];

			container gemeenteBestanden := for_each_ne(Invoer/RuimtelijkeData/StudieGebied/Gemeente/GM_code, 'gemeenteBestand('+ quote(Invoer/RuimtelijkeData/StudieGebied/Gemeente/GM_code)+')');

			template gemeenteBestand
			{
				parameter<string> GM_code_sel;
				unit<uint32> table := select_with_org_rel(VIVETexports/GM_code == GM_code_sel)
				{
					attribute<string>                      BAG_id         := VIVETexports/BAG_id[org_rel];
					attribute<string>                      BU_code        := VIVETexports/BU_code[org_rel];
					attribute<string>                      GM_code        := VIVETexports/GM_code[org_rel];
					attribute<string>                      adres          := VIVETexports/adres[org_rel];
					attribute<m2>                          oppervlak      := VIVETexports/oppervlak[org_rel];
					attribute<yr_uint16>                   Bouwjaar       := VIVETexports/Bouwjaar[org_rel];
					attribute<yr_uint16>                   sloopjaar      := VIVETexports/sloopjaar[org_rel];
					attribute<ModelObject>                 TBE            := VIVETexports/TBE[org_rel];
					attribute<string>                      TBE_string     := VIVETexports/TBE_string[org_rel];
					attribute<ratio>                       Verschilfactor := VIVETexports/Verschilfactor[org_rel];
					attribute<Classifications/Schillabel>  SchilLabel     := VIVETexports/SchilLabel[org_rel];
					attribute<uint32>                      Labeldatum     := VIVETexports/Labeldatum[org_rel];
					attribute<Classifications/Installatie> Inst_RVb       := VIVETexports/Inst_RVb[org_rel];
					attribute<Classifications/Installatie> Inst_RVp       := VIVETexports/Inst_RVp[org_rel];
					attribute<Classifications/Installatie> Inst_TWb       := VIVETexports/Inst_TWb[org_rel];
					attribute<Classifications/Installatie> Inst_TWp       := VIVETexports/Inst_TWp[org_rel];
					attribute<Invoer/Kengetallen/OverigeInstallaties/KK/Installatietypes> Koken := VIVETexports/Koken[org_rel];
					attribute<GJ_yr>                       V_RV           := VIVETexports/V_RV[org_rel];
					attribute<GJ_yr>                       V_TW           := VIVETexports/V_TW[org_rel];
					attribute<GJ_yr>                       V_KK           := VIVETexports/V_KK[org_rel];
					attribute<GJ_yr>                       V_elek_kk      := VIVETexports/V_elek_kk[org_rel];
					attribute<GJ_yr>                       V_elek_twrv    := VIVETexports/V_elek_twrv[org_rel];
					attribute<GJ_yr>                       V_elek_pomp    := VIVETexports/V_elek_pomp[org_rel];
					attribute<GJ_yr>                       V_gas          := VIVETexports/V_gas[org_rel];
					attribute<ratio>                       klimaatfactor  := VIVETexports/klimaatfactor[org_rel];
				}
				parameter<string> OutputFolder := '%localDataProjDir%/Results/VIVET_exports/';
        		unit<uint32> variable := SubItem_PropValues(table,'name');
        		container export_csv := Model/CalculationSchemes/Rapportage/WriteTable32ToCSV(table, AsList(variable/name, ';'), OutputFolder+GM_code_sel+'.csv');	
			}
			parameter<string> supplierlist := AsList('gemeenteBestanden/'+Invoer/RuimtelijkeData/StudieGebied/Gemeente/GM_code + '/export_csv/result',';');
        	parameter<string> ExportAll    := 'Ready', ExplicitSuppliers = "= supplierlist";

		}
	}
	unit<uint32> PreStartJaar := select_with_org_rel(Results/bouwjaar < Startjaar_jaar)
	{
		unit<uint32> buurt         := Invoer/RuimtelijkeData/StudieGebied/buurt;
		unit<uint32> Aflevergebied := Invoer/RuimtelijkeData/BestaandeWarmtenetten/Aflevergebied_data;
		unit<uint16> ModelObjectKeyDomein := Results/ModelObjectKeyDomein;
		
		attribute<Geography/rdc_meter>         geometry          := Results/geometry[org_rel];
		attribute<string>                      code              := Results/code[org_rel];
		attribute<string>                      label             := Results/label[org_rel], DialogType = "labelText";
		attribute<buurt>                       Buurt_rel         := Results/Buurt_rel[org_rel];
		attribute<Aflevergebied>               Aflevergebied_rel := Results/Aflevergebied_rel[org_rel];
		attribute<BebouwingsTypeDomein>        Woningtype_rel    := Results/Woningtype_rel[org_rel];
		attribute<units/yr_uint16>             Bouwjaar          := Results/Bouwjaar[org_rel];
		attribute<units/yr_uint16>             Sloopjaar         := Results/Sloopjaar[org_rel];
		attribute<Classifications/Eigendom>    Eigendom_rel      := Results/Eigendom_rel[org_rel];
		attribute<ratio>                       ResterendNu       := const(1.0,.);
		attribute<ModelObjectKeyDomein>        ModelObjectKey    := Results/ModelObjectKey[org_rel];
		attribute<nrAsl>                       nrAansluitingen_i := Results/nrAansluitingen_i[org_rel];
		attribute<m2>                          Oppervlakte_i     := Results/Oppervlakte_i[org_rel];
		attribute<pand_asl>                    pand_aandeel      := Results/pand_aandeel[org_rel];
		attribute<Classifications/Schillabel>  Schillabel_rel    := Results/Schillabel_rel[org_rel];
		attribute<Classifications/Schillabel>  Energielabel_rel  := SchilLabel_rel;
		attribute<Classifications/Schillabel>  Defaultlabel_rel  := Results/Defaultlabel_rel[org_rel];
		attribute<bool>                        Gasloos           := Results/gasloos[org_rel];
		
		unit<uint8>  BebouwingsTypeDomein := Results/BebouwingsTypeDomein;
		attribute<Classifications/GebouwOptie> GebouwOptie_rel    := Results/GebouwOptie_rel[org_rel];
		
		container Aansluitingen
		{
			attribute<nrAsl> GNet(PreStartJaar) :=				
				not(MakeDefined(Aflevergebied/StartJaar[Aflevergebied_rel], 9999w) <= Startjaar_jaar) && MakeDefined(Results/bouwjaar[org_rel], 9999w) < 2020w // TODO: Check! 
				? nrAansluitingen_i
				: 0[nrAsl];
		}
		
		container Functioneel
		{
			container RV_N0_per_Bouwdeel := for_each_nedv(
				Classifications/Bouwdeel/name,
				'Results/Functioneel/RV_N0_per_Bouwdeel/'+Classifications/Bouwdeel/name+'[org_rel]',
				..,
				GJ_yr);
			attribute<ratio> Fitfactor_VT (..) := Results/Functioneel/Fitfactor_VT[org_rel];
			container BaseValues := for_each_nedv(
				Classifications/FunctioneleVraag/name,
				'Results/Functioneel/BaseValues/'+Classifications/FunctioneleVraag/name+'[org_rel]',
				..,
				GJ_yr);
		}

		container BemeterdeGebouwInput_rel :=  for_each_nedv(
			classifications/Product/name,
			'Results/BemeterdeGebouwInput_rel/' + Classifications/Product/Name + '[org_rel]',
			.,
			Classifications/BemeterdeGebouwInput );
		
		container SPF := for_each_nedv(
			classifications/Product/name,
			'Results/SPF/' + Classifications/Product/Name + '[org_rel]',
			.,
			float64)
		{
			container PerformancePerProduct :=  for_each_nedv(
			classifications/Product/name,
			'Results/SPF/PerformancePerProduct/' + Classifications/Product/Name + '[org_rel]',
			..,
			Classifications/Performance);
		}

		Container Bouwdelen := for_each_nedv(
			classifications/bouwdeel/name,
			'Results/Bouwdelen/' + Classifications/Bouwdeel/Name + '[org_rel]',
			.,
			m2)
		{
			container LastVervanging := for_each_nedv(
				classifications/bouwdeel/name,
				'(uint16(Startjaar_jaar) - mod(uint16(Startjaar_jaar - Bouwjaar), classifications/bouwdeel/levensduur[/Classifications/Bouwdeel/V/' +  /Classifications/Bouwdeel/name + ']))[yr_uint16]',
				..,
				yr_uint16);
			container Isolatie := for_each_nedv(
				classifications/bouwdeel/name,
				'BebouwingsObjectSrc/Bouwdelen/Isolatie/'+classifications/bouwdeel/name+'[org_rel]',
				..,
				Classifications/IsolatieNiveau);
			container IsChangedNow := for_each_nedv(
				classifications/bouwdeel/name,
				'const(false,...)',
				..,
				bool);
		}
		
		container Gebied
		{
			attribute<float64> n      (..) := Results/Gebied/n[org_rel];
			attribute<float64> MEAN_x (..) := Results/Gebied/MEAN_x[org_rel];
			attribute<float64> MEAN_y (..) := Results/Gebied/MEAN_y[org_rel];
			attribute<float64> SSD_xx (..) := Results/Gebied/SSD_xx[org_rel];
			attribute<float64> SSD_xy (..) := Results/Gebied/SSD_xy[org_rel];
			attribute<float64> SSD_yy (..) := Results/Gebied/SSD_yy[org_rel];
		}
		
		container Kapitaallasten := for_each_nedv( classifications/gebouw_kapitaallasten/name, 'Results/Kapitaallasten/' + classifications/gebouw_kapitaallasten/name + '[org_rel]', ., Eur_yr);
		container Jaarlijks      := for_each_nedv( classifications/GebouwOptie_jaarlijks/name, 'Results/Jaarlijks/'      + classifications/GebouwOptie_jaarlijks/name + '[org_rel]', ., Eur_yr);
		
		container InstallatiePerProduct := for_each_nedv(Classifications/Product/name
		, 'Results/InstallatiePerProduct/'+Classifications/Product/name+'[org_rel]'
		, .
		, Classifications/Installatie)
		{
			container LastVervanging := for_each_nedv(
				Classifications/Product/name,
				'Results/InstallatiePerProduct/LastVervanging/'+Classifications/Product/name+'[org_rel]',
				..,
				yr_uint16)
				{
					attribute<yr_uint16> KK (...) := Results/InstallatiePerProduct/LastVervanging/KK[org_rel];
					attribute<yr_uint16> VT (...) := Results/InstallatiePerProduct/LastVervanging/VT[org_rel];
					attribute<yr_uint16> DK (...) := Results/InstallatiePerProduct/LastVervanging/DK[org_rel];
					attribute<yr_uint16> AS (...) := Results/InstallatiePerProduct/LastVervanging/AS[org_rel];
				}
			
			attribute<Invoer/Kengetallen/OverigeInstallaties/KK/Installatietypes> KK (..) := Results/InstallatiePerProduct/KK[org_rel];
			attribute<Invoer/Kengetallen/OverigeInstallaties/VT/Installatietypes> VT (..) := Results/InstallatiePerProduct/VT[org_rel];
			attribute<Invoer/Kengetallen/OverigeInstallaties/DK/Installatietypes> DK (..) := Results/InstallatiePerProduct/DK[org_rel];
			attribute<Classifications/AfgifteSysteem>                             AS (..) := Results/InstallatiePerProduct/AS[org_rel];
		}
	}
}
