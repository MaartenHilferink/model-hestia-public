//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) Hestia 2021 - PBL & TNO                                        //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

template WarmtenetTempl
{
	// begin case parameters
	container BeginStatus;
	parameter<Classifications/GebiedsOptie> Optie;
	// end case parameters

	parameter<Celsius> T_sec         := Classifications/GebiedsOptie/T_sec[Optie]        , Descr = "aflevertemperatuur van deze gebiedsoptie";
	parameter<bool>    KoudeLevering := Classifications/GebiedsOptie/KoudeLevering[Optie], Descr = "levert deze gebiedsoptie ook koude of niet";
	
	parameter<Classifications/ClusterOptie> BronClusterOptie_rel   := Classifications/ClusterOptie/V/MST;
	parameter<Classifications/ClusterOptie> AfnameClusterOptie_rel := Classifications/ClusterOptie/V/MST;

	// stap 4
	parameter<bool> KavelPerGemeente := true; // TODO: nog enumeratie toevoegen aan classifications

	// stap 7
	parameter<Float64> MinimaleRentabiliteitLeverancier := 1.1, Descr = "minimale ratio tussen CW van de verwachtte opbrengsten per hoeveelheid investeringen.";
	
	parameter<EUR_kW> Ki_distr_max := 200000[EUR_kW]; // TODO: reconsider and move naar kentallen

	container WarmteBronnen
	{
		unit<uint32> Brontype := Kengetallen/WarmteBronnen/MetaData/Brontype, IsHidden = "True";

		unit<uint32> PuntBronnen_zichtjaar := = 'Invoer/RuimtelijkeData/WarmteBronnen/Puntbronnen/BronSelecties/'+Classifications/Rekenjaar/name[Classifications/ZichtJaar/RekenJaar_rel[Zichtjaar_rel]]+'/BronElementen';
		unit<uint32> Puntbronnen_all := PuntBronnen_zichtjaar
		{
			attribute<rdc_meter> Geometry        := PuntBronnen_zichtjaar/geometry;
			attribute<Brontype>  Brontype_rel    := PuntBronnen_zichtjaar/Brontype_rel;
			attribute<bool>      Koude           := Brontype/Koude[Brontype_rel];
			attribute<bool>      Geschikt        := = KoudeLevering ? 'Koude' : 'const(true,.)';
		}
		unit<uint32> Puntbronnen := subset(Puntbronnen_all/Geschikt)
		{
			attribute<rdc_meter> Geometry        := nr_orgEntity->geometry;
			attribute<Brontype>  Brontype_rel    := nr_orgEntity->Brontype_rel;
			attribute<string>    Label           := nr_orgEntity->Label;
			attribute<celsius>   T_bron          := Puntbronnen_all/T_bron[nr_orgentity];
			attribute<ratio>     P_vol           := Puntbronnen_all/P_vol[nr_orgentity];
			attribute<ratio>     P_cap           := Puntbronnen_all/P_cap[nr_orgentity];
			attribute<Eur_kW>    Ki_cap_min      := Puntbronnen_all/Ki_cap_min[nr_orgentity];
			attribute<Eur_kW>    Ki_cap_max      := Puntbronnen_all/Ki_cap_max[nr_orgentity];
			attribute<_yr>       R_adm           := Puntbronnen_all/R_adm[nr_orgentity];
			attribute<_yr>       R_oh            := Puntbronnen_all/R_oh[nr_orgentity];
			attribute<MW>        MWth_max        := Puntbronnen_all/MWth_max[nr_orgentity];
			attribute<Eur_GJ>    K_GJ            := Puntbronnen_all/K_GJ[nr_orgentity];
			attribute<Eur_GJ>    Km_GJ           := Puntbronnen_all/Km_GJ[nr_orgentity];
			
			attribute<Bron>      Bron_rel        := convert(ID(.)+1, bron);
			attribute<m>         max_dist        := 20[km] * 1000[m / km] * sqrt(min_elem(MWth_max, 25[MW]) / 1[MW]);
		}

		unit<uint32> VlakBronnen_zichtjaar := = 'Invoer/RuimtelijkeData/WarmteBronnen/Contourbronnen/BronSelecties/'+Classifications/Rekenjaar/name[Classifications/ZichtJaar/RekenJaar_rel[Zichtjaar_rel]]+'/BronElementen';
		unit<uint32> VlakBronnen_all := VlakBronnen_zichtjaar
		{
			attribute<rdc_meter> Geometry (poly) := VlakBronnen_zichtjaar/geometry;
			attribute<Brontype>  Brontype_rel    := VlakBronnen_zichtjaar/Brontype_rel;
			attribute<bool>      Koude           := Brontype/Koude[Brontype_rel];
			attribute<bool>      Geschikt        := const(false, .); // = KoudeLevering ? 'Koude' : 'const(true,.)'; // DEBUG, TODO; Vlakbronnen even uit t.b.v. Rotterdam debuggen.
		}
		unit<uint32> VlakBronnen := subset(VlakBronnen_all/Geschikt)
		{
			attribute<rdc_meter> Geometry (poly) := VlakBronnen_all/geometry[nr_orgentity];
			attribute<Brontype>  Brontype_rel    := VlakBronnen_all/Brontype_rel[nr_orgentity];
			attribute<string>    Label           := nr_orgEntity->Label;
			attribute<celsius>   T_bron          := VlakBronnen_all/T_bron[nr_orgentity];
			attribute<ratio>     P_vol           := VlakBronnen_all/P_vol[nr_orgentity];
			attribute<ratio>     P_cap           := VlakBronnen_all/P_cap[nr_orgentity];
			attribute<Eur_kW>    Ki_cap_min      := VlakBronnen_all/Ki_cap_min[nr_orgentity];
			attribute<Eur_kW>    Ki_cap_max      := VlakBronnen_all/Ki_cap_max[nr_orgentity];
			attribute<_yr>       R_adm           := VlakBronnen_all/R_adm[nr_orgentity];
			attribute<_yr>       R_oh            := VlakBronnen_all/R_oh[nr_orgentity];
			attribute<MW>        MWth_max        := VlakBronnen_all/MWth_max[nr_orgentity];
			attribute<Eur_GJ>    K_GJ            := VlakBronnen_all/K_GJ[nr_orgentity];
			attribute<Eur_GJ>    Km_GJ           := VlakBronnen_all/Km_GJ[nr_orgentity];
			
			attribute<Bron>      Bron_rel        := convert(ID(.)+1+#Puntbronnen, bron);
			attribute<m>         max_dist        := nr_orgentity->max_dist;
		}

		unit<uint32> Lijnbronnen_zichtjaar := = 'Invoer/RuimtelijkeData/WarmteBronnen/Lijnbronnen/BronSelecties/'+Classifications/Rekenjaar/name[Classifications/ZichtJaar/RekenJaar_rel[Zichtjaar_rel]]+'/BronElementen';
		unit<uint32> Lijnbronnen_all := Lijnbronnen_zichtjaar
		{
			attribute<rdc_meter> Geometry (arc)  := Lijnbronnen_zichtjaar/geometry;
			attribute<Brontype>  Brontype_rel    := Lijnbronnen_zichtjaar/Brontype_rel;
			attribute<bool>      Koude           := Brontype/Koude[Brontype_rel];
			attribute<bool>      Geschikt        := = KoudeLevering ? 'Koude' : 'const(true,.)';
		}
		unit<uint32> Lijnbronnen := subset(Lijnbronnen_all/Geschikt)
		{
			attribute<rdc_meter> Geometry (arc)  := Lijnbronnen_all/geometry[nr_orgentity];
			attribute<string>    Label           := nr_orgEntity->Label;
			attribute<Brontype>  Brontype_rel    := Lijnbronnen_all/Brontype_rel[nr_orgentity];
			attribute<celsius>   T_bron          := Lijnbronnen_all/T_bron[nr_orgentity];
			attribute<ratio>     P_vol           := Lijnbronnen_all/P_vol[nr_orgentity];
			attribute<ratio>     P_cap           := Lijnbronnen_all/P_cap[nr_orgentity];
			attribute<Eur_kW>    Ki_cap_min      := Lijnbronnen_all/Ki_cap_min[nr_orgentity];
			attribute<Eur_kW>    Ki_cap_max      := Lijnbronnen_all/Ki_cap_max[nr_orgentity];
			attribute<_yr>       R_adm           := Lijnbronnen_all/R_adm[nr_orgentity];
			attribute<_yr>       R_oh            := Lijnbronnen_all/R_oh[nr_orgentity];
			attribute<MW>        MWth_max        := Lijnbronnen_all/MWth_max[nr_orgentity];
			attribute<Eur_GJ>    K_GJ            := Lijnbronnen_all/K_GJ[nr_orgentity];
			attribute<Eur_GJ>    Km_GJ           := Lijnbronnen_all/Km_GJ[nr_orgentity];
			
			attribute<Bron>      Bron_rel        := convert(ID(.)+1+#Puntbronnen+#VlakBronnen, bron);
			attribute<m>         max_dist        := max_elem(20[km] * 1000[m / km] * sqrt(min_elem(MWth_max, 25[MW]) / 1[MW]) - arc_length(Geometry, m), 1000[m]);
		}
		
		unit<uint32> Lijnbronsegmenten := arc2segm(lijnbronnen/Geometry);
		unit<uint32> Lijnbron_aansluitpunten_BASE := dyna_point_with_ends(Lijnbronsegmenten/point, Lijnbronsegmenten/nextpoint, 100[m])
		{
			attribute<lijnbronnen> Lijnbron_rel := SequenceNr->SequenceNr;
			attribute<bron> bron_rel := Lijnbron_rel->bron_rel;
		}
		unit<uint32> Lijnbron_aansluitpunten := SubSet(IsDefined(Lijnbron_aansluitpunten_BASE/Point) && IsDefined(Lijnbron_aansluitpunten_BASE/Lijnbron_rel))
		{
			attribute<lijnbronnen> Lijnbron_rel := nr_OrgEntity->Lijnbron_rel;
			attribute<bron> bron_rel := nr_OrgEntity->bron_rel;
			attribute<rdc_meter> point := nr_OrgEntity->point;
		}
		
		unit<uint32> Bron := union_unit(Void, Puntbronnen, VlakBronnen, Lijnbronnen)
			,	KeepData = "True" // facilitate debugging; REMOVE when done		
		{
			attribute<rdc_meter> Geometry := union_data(., Point(0.0,0.0), Puntbronnen/Geometry, centroid_or_mid(Vlakbronnen/Geometry), first_point(Lijnbronnen/Geometry)); // for display only
			
			attribute<string> label := union_data(., 'GeenBron', Puntbronnen/Label, VlakBronnen/Label, Lijnbronnen/Label);
			
			attribute<EUR_kW> Ki_cap_min := union_data(., Ki_distr_max, Puntbronnen/Ki_cap_min, VlakBronnen/Ki_cap_min, Lijnbronnen/Ki_cap_min);
			attribute<EUR_kW> Ki_cap_max := union_data(., Ki_distr_max, Puntbronnen/Ki_cap_max, VlakBronnen/Ki_cap_max, Lijnbronnen/Ki_cap_max);
			attribute<EUR_kw> Ki_cap := Schuiven/KostenMin * Ki_cap_min + Schuiven/KostenMax * Ki_cap_max;
			
			attribute<MW> MWth_max := union_data(., 1e+10[MW], Puntbronnen/MWth_max, VlakBronnen/MWth_max, Lijnbronnen/MWth_max);
			attribute<kW> kWth_max := MWth_max * (1000KW / 1MW);
			attribute<m>  max_dist := union_data(., 100000[m], Puntbronnen/max_dist, VlakBronnen/max_dist, lijnbronnen/max_dist);
		}
	}

	unit<uint32> BO := BebouwingsComponenten/Woning/BebouwingsObjectMetGebouwOptie
	{
		//====== checks of bebouwingscomponenten geschikt zijn voor aansluiting op een warmtenet
		attribute<bool> heeftGasOK    := BO/Metervraag/gas > 0.0[GJ_yr];
		attribute<bool> gebouwOptieOK := Classifications/gebouwoptie/kanGebiedsOptie[BO/gebouwoptie_rel];
		attribute<bool> labelOK       := = T_sec < 65[Celsius] ? 'BO/Schillabel_rel <= Classifications/Schillabel/V/E' : 'const(true,BO)';
		attribute<bool> IsCandidate   := heeftGasOK && gebouwOptieOK && labelOK;
	}
	unit<uint32> AllCandidate := subset(BO/IsCandidate)
	{
		unit<uint32>    pand     := Invoer/RuimtelijkeData/BAG/import/pand;
		attribute<pand> pand_rel := BO/pand_rel[BO_rel];
		attribute<bool> isUtil   := const(false,.); //TODO: later hier opnemen of vbo utiliteit is of niet
		attribute<bool> vraagtKD := not(isdefined(BO/BemeterdeGebouwInput_rel/KDb[BO_rel])) && not(isdefined(BO/BemeterdeGebouwInput_rel/KDb[BO_rel]));

		unit<uint32> StudieGebiedPand_candidate := subset(pand/vbo_count_studiegebied > 0.0[uint32])
		{
			attribute<pand>                pand_rel    := nr_orgentity;
			attribute<kW>                  P_wd        := sum(PartialContributie/P_wd, rlookup(AllCandidate/pand_rel, pand_rel)); 
			attribute<Eur_yr>              Contributie := sum(PartialContributie/Contributie, rlookup(AllCandidate/pand_rel, pand_rel)); 
		}
		unit<uint32> StudieGebiedPand := subset(StudieGebiedPand_candidate/P_wd > 0[kW])
		,	KeepData = "True" // facilitate debugging; REMOVE when done		
		{
			attribute<pand>                pand_rel        := nr_orgentity->pand_rel;
			attribute<geography/rdc_meter> geometry (poly) := pand_rel->geometry;
			attribute<geography/rdc_meter> point           := Centroid_or_mid(geometry);
			attribute<kW>                  P_wd            := nr_orgentity->P_wd; 
			attribute<Eur_yr>              Contributie     := nr_orgentity->Contributie;
		}
		attribute<StudieGebiedPand> StudieGebiedPand_rel := rlookup(pand_rel, StudieGebiedPand_candidate/nr_orgentity[StudieGebiedPand/nr_orgentity]);

		attribute<rdc_meter> Geometry      := BO/geometry[BO_rel];
		attribute<BO>        BO_rel        := nr_orgentity;	
		attribute<PlanRegio> PlanRegio_rel := BO/PlanRegio_rel[BO_rel];

		container PartialContributie
		{
			//====== kengetallen efficiency en aandeel eigen opwekking individuele opwaardering ruimteverwarming
			attribute<float64> SPF_ind_RV_30 (Classifications/Schillabel) : [8.00, 4.20, 3.20, 3.20, 3.20, 1.00, 1.00, 1.00], Descr = "efficientie van de individuele warmtepomp voor ruimteverwarming, aflevertemperatuur 30C";
			attribute<float64> SPF_ind_RV_50 (Classifications/Schillabel) : [8.00, 8.00, 4.20, 4.20, 4.20, 1.00, 1.00, 1.00], Descr = "efficientie van de individuele warmtepomp voor ruimteverwarming, aflevertemperatuur 50C";
			attribute<float64> AEO_ind_RV_30 (Classifications/Schillabel) : [0.60, 0.90, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00], Descr = "aandeel eigen opwekking individuele warmtepomp voor ruimteverwarming, aflevertemperatuur 30C";
			attribute<float64> AEO_ind_RV_50 (Classifications/Schillabel) : [0.30, 0.60, 0.90, 1.00, 1.00, 1.00, 1.00, 1.00], Descr = "aandeel eigen opwekking individuele warmtepomp voor ruimteverwarming, aflevertemperatuur 50C";

			//====== aandeel eigen opwekking en efficiency specifiek per kandidaat in context huidig temperatuurregime
			attribute<float64> AEO_ind_rv    (AllCandidate) := = T_sec <= 35[Celsius] ? 'AEO_ind_RV_30[BO/Schillabel_rel[BO_rel]]' : T_sec <= 55[Celsius] ? 'AEO_ind_RV_50[BO/Schillabel_rel[BO_rel]]' : 'const(0.0[float64],AllCandidate)';
			attribute<float64> SPF_ind_rv    (AllCandidate) := = T_sec <= 35[Celsius] ? 'SPF_ind_RV_30[BO/Schillabel_rel[BO_rel]]' : 'SPF_ind_RV_50[BO/Schillabel_rel[BO_rel]]';

			//====== kengetallen efficiency en aandeel eigen opwekking individuele opwaardering warm tapwater
			parameter<float64> AEO_ind_tw                   := T_sec <= 35[Celsius] ? 0.60[float64] : T_sec <= 55[Celsius] ? 0.30[float64] : 0.00[float64];
			parameter<float64> SPF_ind_tw_WP                := T_sec <= 35[Celsius] ? 2.75[float64] : T_sec <= 55[Celsius] ? 2.75[float64] : 1.00[float64];
			parameter<float64> SPF_ind_tw_Booster           := T_sec <= 35[Celsius] ? 4.40[float64] : T_sec <= 55[Celsius] ? 4.40[float64] : 1.00[float64];

			//====== indiciatie of een combi-WP of lokale tapwaterbooster nodig is in context huidig temperatuurregime
			attribute<bool>    WP            (AllCandidate) := AEO_ind_rv > 0.0[GJ_yr];
			attribute<bool>    Booster       (AllCandidate) := not(WP) && AEO_ind_tw > 0.0[GJ_yr];

			//====== volume vraag elektriciteit inpandig en vraag warmte en koude aan wijkdistributienet
			attribute<Gj_yr>   V_id_elek     (AllCandidate) := (BO/Functioneel/RV[BO_rel] * AEO_ind_rv) / SPF_ind_rv + (BO/Functioneel/TW[BO_rel] * AEO_ind_tw) / ( WP ? SPF_ind_tw_WP : SPF_ind_tw_Booster); // <- resultaat
			attribute<Gj_yr>   V_warmte      (AllCandidate) := BO/Functioneel/RV[BO_rel] * (1.0 - AEO_ind_rv) + BO/Functioneel/TW[BO_rel] * (1.0 - AEO_ind_tw); // <- resultaat
			attribute<Gj_yr>   V_koude       (AllCandidate) := =not(KoudeLevering) ? 'const(0.0[GJ_yr],AllCandidate)' : 'float64(vraagtKD) * BO/Functioneel/KD[BO_rel]'; // <- resultaat

			//====== vermogensvraag inpandig niveau (tot en met aansluitleiding)
			attribute<kW>      P_id_RV       (AllCandidate) := BO/AansluitCapaciteit/RV[BO_rel]; 
			attribute<kW>      P_id_TW       (AllCandidate) := BO/AansluitCapaciteit/TW[BO_rel];
			attribute<kW>      P_id_KD       (AllCandidate) := = not(KoudeLevering) ? 'const(0.0[kW],AllCandidate)' : 'float64(vraagtKD) * BO/AansluitCapaciteit/KD[BO_rel]';
			attribute<kW>      P_id          (AllCandidate) := max_elem(P_id_KD,P_id_RV+P_id_TW);

			//====== vermogensvraag aan het wijkdistributienet (na aansluitleiding, tot en met WOS/hulpinstallatie)
			parameter<ratio>   Vermogensverlies             := Schuiven/EfficiencySchuif * 0.1[ratio] + (1.0 - Schuiven/EfficiencySchuif) * 0.0[ratio];
			attribute<kW>      P_wd_RV       (AllCandidate) := = T_sec <= 55[Celsius] ? 'P_id_RV * BO/AansluitCapaciteit/GTF_RVlt' : 'P_id_RV * BO/AansluitCapaciteit/GTF_RVmt'; 
			attribute<kW>      P_wd_TW       (AllCandidate) := P_id_TW * BO/AansluitCapaciteit/GTF_TW;
			attribute<kW>      P_wd_KD       (AllCandidate) := = not(KoudeLevering) ? 'const(0.0[kW],AllCandidate)' : 'float64(vraagtKD) * P_id_KD * BO/AansluitCapaciteit/GTF_K';
			attribute<kW>      P_wd          (AllCandidate) := max_elem(P_wd_KD,P_wd_RV+P_wd_TW)  / (1.0 - Vermogensverlies);

			//====== extra vraag in het wijkdistributienet door leidingverlies en bepaling van verschil tussen aanlever- en retourtemperatuur
			attribute<Celsius>   DeltaT_wd     (AllCandidate) := T_sec <= 35[Celsius] && Booster ? 10[Celsius] : T_sec <= 35[Celsius] && WP ? 20[Celsius] : 30[Celsius];
			attribute<GJ_yr_asl> Volumeverlies (AllCandidate) := leerCurves/Verl/Curve * (T_sec <= 35[Celsius] ? ( DeltaT_wd <= 10[Celsius] ? 3.2[GJ_yr_asl] : DeltaT_wd <= 15[Celsius] ? 2.6[GJ_yr_asl] : 1.9[GJ_yr_asl] ) : 10.5[GJ_yr_asl]);
			attribute<GJ_yr>     V_wd_verlies  (AllCandidate) := BO/nrAansluitingen[BO_rel] * Volumeverlies; // <- resultaat
			
						//====== berekening kosten aansluitleiding (van gevel tot straat)
			attribute<kW>      P_id_pand     (StudieGebiedPand) := sum(P_id, StudieGebiedPand_rel);

			unit<uint32>         network       := /Invoer/RuimtelijkeData/OSM/Read_Final_Network;
		
			container            connect_info  := connect_info(network/geometry, StudieGebiedPand/point);

			attribute<m>       L_asl_pand    (StudieGebiedPand) := connect_info/dist[m];
			attribute<Celsius> DeltaT_pand   (StudieGebiedPand) := mean(DeltaT_wd, StudieGebiedPand_rel);
			attribute<eur>     Ki_asl_pand   (StudieGebiedPand) := LeidingKosten_asl/Ki * L_asl_pand;
			attribute<ratio>   pand_aandeel      (AllCandidate) := BO/pand_aandeel[BO_rel] / 1.0[pand_asl];
			attribute<eur>     Ki_wd_asl         (AllCandidate) := leerCurves/Aansl/Curve * Ki_asl_pand[StudieGebiedPand_rel] * pand_aandeel;
			container LeidingKosten_asl := LeidingKosten_T(StudieGebiedPand, P_id_pand, DeltaT_pand);

			//====== investeringskosten inpandig
			parameter<eur_asl> K_id_bouw_mgw := leerCurves/Inpand/Curve * (Schuiven/VerketelingMax * (Schuiven/KostenMin * 400[eur_asl] + Schuiven/KostenMax * 2500[eur_asl]) + Schuiven/VerketelingMin * (Schuiven/KostenMin *   0[eur_asl] + Schuiven/KostenMax * 400[eur_asl]));
			parameter<eur_asl> K_id_bouw_egw := leerCurves/Inpand/Curve * (Schuiven/KostenMin * 400[eur_asl] + Schuiven/KostenMax * 4500[eur_asl]);
			attribute<eur>     Ki_id_bouw (AllCandidate) := BO/nrAansluitingen[BO_rel] * (BO/isMeergezins[BO_rel] ? K_id_bouw_mgw : K_id_bouw_egw),
					Descr  = "bouwkundige kosten t/m de afleverset (herstel tuin, sparingen en mantelbuizen)",
					Source = "CE Delft 210347 Eindconceptadvies Warmtenetten in Vesta MAIS (versie 2022-08-09) pp.53 tabel 30";

			parameter<eur_asl> K_id_dist_mgw := leerCurves/Inpand/Curve * (Schuiven/VerketelingMax * (Schuiven/KostenMin * 350[eur_asl] + Schuiven/KostenMax * 4050[eur_asl]) + Schuiven/VerketelingMin * (Schuiven/KostenMin * 350[eur_asl] + Schuiven/KostenMax * 1500[eur_asl]));
			parameter<eur_asl> K_id_dist_egw := leerCurves/Inpand/Curve * (Schuiven/KostenMin * 350[eur_asl] + Schuiven/KostenMax * 5450[eur_asl]);
			attribute<eur>     Ki_id_dist (AllCandidate) := BO/nrAansluitingen[BO_rel] * (BO/isMeergezins[BO_rel] ? K_id_dist_mgw : K_id_dist_egw),
					Descr  = "installatietechnische en bouwkundige inpandige distributiekosten",
					Source = "CE Delft 210347 Eindconceptadvies Warmtenetten in Vesta MAIS (versie 2022-08-09) pp.54 tabel 31";

			parameter<eur_asl> K_id_meter_asl := leerCurves/Inpand/Curve * (Schuiven/KostenMin * 898.69[eur_asl] + Schuiven/KostenMax * 926.78[eur_asl]);
			parameter<Eur_kW>  K_id_meter_cap := leerCurves/Inpand/Curve * (Schuiven/KostenMin *   1.24[Eur_kW]  + Schuiven/KostenMax *   1.46[Eur_kW]);
			attribute<eur>     Ki_id_meter (AllCandidate) := BO/nrAansluitingen[BO_rel] * K_id_meter_asl + P_id * K_id_meter_cap,
					Descr  = "kosten warmtemeters",
					Source = "CE Delft 210347 Eindconceptadvies Warmtenetten in Vesta MAIS (versie 2022-08-09) pp.55 tabel 32";

			parameter<eur_asl> K_id_booster := leerCurves/eWPww/Curve * (Schuiven/KostenMin * 2225.98[eur_asl] + Schuiven/KostenMax * 2560.84[eur_asl]);
			attribute<eur>     Ki_id_booster (AllCandidate) := =T_sec > 55[Celsius] ? 'const(0.0[eur],AllCandidate)' :  'BO/nrAansluitingen[BO_rel] * float64(Booster) * K_id_booster',
					Descr  = "Kosten boosterwarmtepomp voor tapwater, indien van toepassing",
					Source = "CE Delft 210347 Eindconceptadvies Warmtenetten in Vesta MAIS (versie 2022-08-09) pp.55 tabel 32";
			
			attribute<eur>     Ki_id_ewp (AllCandidate) := =T_sec > 55[Celsius] ? 'const(0.0[eur],AllCandidate)' : 'leerCurves/eWPww/Curve * (float64(WP) * (not(isUtil) ? BO/nrAansluitingen[BO_rel] * (BO/Schillabel_rel[BO_rel] <= Classifications/Schillabel/V/B ? 4500[eur_asl] : 7000[eur_asl]) : P_id * 700[eur_kw]))',
					Descr  = "Inpandige w/w warmtepomp, indien van toepassing",
					Source = "CE Delft 210347 Eindconceptadvies Warmtenetten in Vesta MAIS (versie 2022-08-09) pp.55 tabel 32";

			parameter<eur_m2>  K_LTAS_u   := leerCurves/LTAS/Curve * (Schuiven/KostenMin * Invoer/Kengetallen/BCkentallen/Ki_LTAS_u_min  + Schuiven/KostenMax * Invoer/Kengetallen/BCkentallen/Ki_LTAS_u_max);
			parameter<eur_asl> K_LTAS_egw := leerCurves/LTAS/Curve * (Schuiven/KostenMin * Invoer/Kengetallen/BCkentallen/Ki_LTAS_wl_min + Schuiven/KostenMax * Invoer/Kengetallen/BCkentallen/Ki_LTAS_wl_max);
			parameter<eur_asl> K_LTAS_mgw := leerCurves/LTAS/Curve * (Schuiven/KostenMin * Invoer/Kengetallen/BCkentallen/Ki_LTAS_wh_min + Schuiven/KostenMax * Invoer/Kengetallen/BCkentallen/Ki_LTAS_wh_max);			
			attribute<eur>     Ki_id_LTAS (AllCandidate) := =T_sec > 55[Celsius] ? 'const(0.0[eur],AllCandidate)' : 'isUtil ? BO/oppervlakte[BO_rel] * K_LTAS_u : BO/isMeergezins[BO_rel] ? K_LTAS_mgw * BO/nrAansluitingen[BO_rel] : K_LTAS_egw * BO/nrAansluitingen[BO_rel]',
					Descr  = "Kosten LT-afgiftesysteem, indien van toepassing",
					Source = "CE Delft 210347 Eindconceptadvies Warmtenetten in Vesta MAIS (versie 2022-08-09) pp.55 tabel 32";

			attribute<eur>     Ki_id_aflever (AllCandidate) := WP ? 0.0[eur] : leerCurves/Inpand/Curve * BO/nrAansluitingen[BO_rel] * 1300[eur_asl],
					Descr  = "Kosten afleverset voor warmtelevering wanneer geen opwaardering nodig is",
					Source = "CE Delft 210347 Eindconceptadvies Warmtenetten in Vesta MAIS (versie 2022-08-09) pp.55 tabel 32";

			attribute<eur>     Ki_id    (AllCandidate) := add(Ki_id_dist, Ki_id_bouw, Ki_id_meter, Ki_id_aflever, Ki_id_booster, Ki_id_ewp, Ki_id_LTAS);

			//====== vergoedingen betaald door gebouweigenaar
			parameter<eur_asl> K_ge_pm                 := Schuiven/KostenMin * 56.17[eur_asl] + Schuiven/KostenMax * 168.51[eur_asl];
			attribute<eur>     Ki_ge_pm (AllCandidate) := BO/nrAansluitingen[BO_rel] * K_ge_pm;
			attribute<eur>     Ki_ge_ov (AllCandidate) := BO/nrAansluitingen[BO_rel] * 140.42[eur_asl];
			attribute<eur>     Ki_ge    (AllCandidate) := Ki_ge_ov + Ki_ge_pm;

			//====== subsidies
			attribute<eur> Oi_ge_EIA     (AllCandidate) := Ki_ge_ov  * SpecifiekeInstellingen/Beleid/EIA/E_w/Rs_OngeriefsVergoeding + Ki_ge_pm * SpecifiekeInstellingen/Beleid/EIA/E_w/Rs_ProjectManagement;
			attribute<eur> Oi_id_EIA     (AllCandidate) := Ki_id     * SpecifiekeInstellingen/Beleid/EIA/id + Subsidie/Oi_subsidie;
			attribute<eur> Oi_wd_asl_EIA (AllCandidate) := Ki_wd_asl * SpecifiekeInstellingen/Beleid/EIA/wd;

			container subsidie
			{
				unit<uint32> ZBS   := ZichtjaarBeleid/Subsidie;
				unit<uint32> ZBS_w := subset(ZBS/Maatregel/Infra/WnetAansl)
				{
					attribute<string> name := ZBS/name[nr_orgentity];
				}

				container SubsidieBerekening := for_each_ne(ZBS_w/name, 'ImplSubs(ZBS/V/'+ZBS_w/name+')');

				template ImplSubs : ishidden = "True"
				{
					//case parameters
					parameter<ZBS> ZBS_rel;
					//end case parameters

					parameter<ratio>   Aandeel  := makedefined(ZBS/Subsidieaandeel[ZBS_rel],0.0[ratio]), ishidden = "True";
					parameter<eur_asl> Bedrag   := makedefined(ZBS/Subsidiebedrag[ZBS_rel],0.0[eur_asl]), ishidden = "True";

					attribute<bool>    InDoelgroep (AllCandidate) := ='OR('+AsItemList(replace('ZBS/doelgroep/@ED[ZBS_rel] && BO/Eigendom_rel[BO_rel] == Classifications/Eigendom/V/@ED','@ED',Classifications/Eigendom/label))+')', ishidden = "True";
					attribute<bool>    Naleving    (AllCandidate) := rnd_uniform(JaarSeed * 403u, AllCandidate, range(float64, 0d, 1d)) <= ZBS/Naleving[ZBS_rel];
					attribute<bool>    Geldig      (AllCandidate) := InDoelgroep && Naleving;

					attribute<eur>     Oi_subsidie (AllCandidate) := BO/nrAansluitingen[BO_rel] * Bedrag + Ki_id * Aandeel;
				}

				attribute<Eur>    Oi_subsidie    (AllCandidate) := = count(id(ZBS_w)) > 0u ? 'add('+AsItemList('Subsidieberekening/'+ZBS_w/name+'/Oi_subsidie')+')'   : 'const(0.0[Eur],AllCandidate)';
			}
			
			container jaarlijks
			{
				attribute<Eur_yr> Kj_id_elek     (AllCandidate) := prijzen/Elektriciteit/Staffel/KGJ_eindgebruik_excl[ind_gebruiksgrootteklasse_rel] * V_id_Elek;
				attribute<Eur_yr> Kji_ge_net     (AllCandidate) := (Ki_ge     - Oi_ge_EIA    ) * NCW/wd28/StartDiscountFactor * NCW/wd28/AnnualisationFactor;

				attribute<Eur_yr> Kji_id_30      (AllCandidate) := add(Ki_id_dist   , Ki_id_bouw ) * NCW/id30/AnnualisationFactor;
				attribute<Eur_yr> Kji_id_20      (AllCandidate) := add(Ki_id_booster, Ki_id_eWP  ) * NCW/id20/AnnualisationFactor;
				attribute<Eur_yr> Kji_id_15      (AllCandidate) := add(Ki_id_aflever, Ki_id_meter) * NCW/id15/AnnualisationFactor;
				attribute<Eur_yr> Kji_id         (AllCandidate) := add(Kji_id_30, Kji_id_20, Kji_id_15);
				attribute<Eur_yr> Kmi_id_30      (AllCandidate) := add(Ki_id_dist   , Ki_id_bouw ) * NCW/mr30/AnnualisationFactor;
				attribute<Eur_yr> Kmi_id_20      (AllCandidate) := add(Ki_id_booster, Ki_id_eWP  ) * NCW/mr20/AnnualisationFactor;
				attribute<Eur_yr> Kmi_id_15      (AllCandidate) := add(Ki_id_aflever, Ki_id_meter) * NCW/mr15/AnnualisationFactor;
				attribute<Eur_yr> Kmi_id         (AllCandidate) := add(Kmi_id_30, Kmi_id_20, Kmi_id_15);
				attribute<Eur_yr> Kji_id_net     (AllCandidate) := Kji_id - (Oi_id_EIA  * NCW/id28/StartDiscountFactor * NCW/id28/AnnualisationFactor);

				attribute<Eur_yr> Kji_wd_Asl_net (AllCandidate) := (Ki_wd_asl - Oi_wd_asl_EIA) * NCW/wd28/StartDiscountFactor * NCW/wd28/AnnualisationFactor;
				attribute<Eur_yr> Kj_id_oh       (AllCandidate) := leerCurves/OenM/Curve * ((Ki_id - Ki_id_meter) * Invoer/Kengetallen/Onderhoud/R_id_onderhoud + Ki_id_meter * Invoer/Kengetallen/Onderhoud/R_Inst_onderhoud);
				attribute<Eur_yr> Kj_id_adm      (AllCandidate) := leerCurves/OenM/Curve * ((Ki_id - Ki_id_meter) * Invoer/Kengetallen/Onderhoud/R_id_admin     + Ki_id_meter * Invoer/Kengetallen/Onderhoud/R_Inst_admin    );
				attribute<Eur_yr> Kj_wd_asl_oh   (AllCandidate) := leerCurves/OenM/Curve * Ki_wd_asl * Invoer/Kengetallen/Onderhoud/R_wd_onderhoud;
				attribute<Eur_yr> Kj_wd_asl_adm  (AllCandidate) := leerCurves/OenM/Curve * Ki_wd_asl * Invoer/Kengetallen/Onderhoud/R_wd_admin;

				attribute<Eur_yr> kosten         (AllCandidate) := add(Kj_id_elek, Kji_ge_net, Kji_id_net, Kji_wd_Asl_net, Kj_id_oh, Kj_id_adm, Kj_wd_asl_oh, Kj_wd_asl_adm);
			}

			container alternatief
			{
				//====== OenM kosten alternatief
				attribute<Eur_yr> Kj_oh_LO       (AllCandidate) := BO/jaarlijks/Kj_oh_LO[BO_rel]  - BO/jaarlijks/oh_KD[BO_rel] , Descr = "jaarlijkse onderhoudskosten van alternatief, exclusief eventuele onderhoudskosten koudeinstallatie";
				attribute<Eur_yr> Kj_adm_LO      (AllCandidate) := BO/jaarlijks/Kj_adm_LO[BO_rel] - BO/jaarlijks/adm_KD[BO_rel], Descr = "jaarlijkse administratiekosten van alternatief, exclusief eventuele administratiekosten koudeinstallatie";
				
				//====== Energiekosten alternatief
				attribute<Eur_yr> Kj_elek        (AllCandidate) := BO/jaarlijks/Kj_elek[BO_rel] - ((BO/Metervraag/wv_e_koude[BO_rel] + BO/metervraagberekening/eEffect/Vj_elek[BO_rel]) * prijzen/Elektriciteit/Staffel/KGJ_eindgebruik_excl[ind_gebruiksgrootteklasse_rel]);
				attribute<Eur_yr> Kj_gas         (AllCandidate) := BO/jaarlijks/Kj_gas[BO_rel];
				attribute<Eur_yr> Kj_biomassa    (AllCandidate) := BO/jaarlijks/Kj_biomassa[BO_rel];
				attribute<Eur_yr> Kj_pellets     (AllCandidate) := BO/jaarlijks/Kj_pellets[BO_rel];
				attribute<Eur_yr> Kj_olie        (AllCandidate) := BO/jaarlijks/Kj_olie[BO_rel];
				attribute<Eur_yr> Kj_H2          (AllCandidate) := BO/jaarlijks/Kj_H2[BO_rel];

				//====== Kapitaallasten alternatief
				attribute<Eur_yr> Kji30_LO_net   (AllCandidate) := BO/kapitaallasten/Kji30_LO[BO_rel] - BO/kapitaallasten/Oji30_LO[BO_rel];
				attribute<Eur_yr> Kji20_LO_net   (AllCandidate) := BO/kapitaallasten/Kji20_LO[BO_rel] - BO/kapitaallasten/Oji20_LO[BO_rel];
				attribute<Eur_yr> Kji15_LO_net   (AllCandidate) := BO/kapitaallasten/Kji15_LO[BO_rel] - BO/kapitaallasten/Oji15_LO[BO_rel];

				attribute<Eur_yr> kosten         (AllCandidate) := add(Kj_oh_LO, Kj_adm_LO, Kj_elek, Kj_gas, Kj_biomassa, Kj_pellets, Kj_olie, Kj_H2, Kji30_LO_net, Kji20_LO_net, Kji15_LO_net);
			}		

			attribute<classifications/gebruiksgrootteklasse> ind_gebruiksgrootteklasse_rel (AllCandidate) := classify((V_id_Elek + BO/metervraagberekening/eEffect/Vj_elek[BO_rel]), Prijzen/Elektriciteit/Staffel/ClassBreak);
			parameter<classifications/gebruiksgrootteklasse> col_gebruiksgrootteklasse_rel                := last(id(Prijzen/Elektriciteit/Staffel));

			//====== Template voor bepalen van kosten warmteleidingen, parameters: domein, vermogensvraag per object, delta-T per object
			template LeidingKosten_T
			{
				//case parameters
				unit<uint32> ObjectDomain;
				attribute<kw> P (ObjectDomain);
				attribute<Celsius> DT (ObjectDomain);
				//end parameters

				//====== berekening ondergrens en bovengrens investeringskosten o.b.v. formule per niveau van delta-T
				attribute<eur_m> Ki_max_DT10 (ObjectDomain) := (1585.4 * P ^ 0.36)[eur_m], Descr = "bovengrens leidingkosten delta-T 10C", Source = "CE Delft 210347 Eindconceptadvies Warmtenetten in Vesta MAIS (versie 2022-08-09) pp.34 formule 1 ";
				attribute<eur_m> Ki_min_DT10 (ObjectDomain) := (1069.2 * P ^ 0.41)[eur_m], Descr = "ondergrens leidingkosten delta-T 10C", Source = "CE Delft 210347 Eindconceptadvies Warmtenetten in Vesta MAIS (versie 2022-08-09) pp.34 formule 2 ";
				attribute<eur_m> Ki_max_DT20 (ObjectDomain) := (1114.4 * P ^ 0.38)[eur_m], Descr = "bovengrens leidingkosten delta-T 20C", Source = "CE Delft 210347 Eindconceptadvies Warmtenetten in Vesta MAIS (versie 2022-08-09) pp.34 formule 3 ";
				attribute<eur_m> Ki_min_DT20 (ObjectDomain) := ( 776.1 * P ^ 0.42)[eur_m], Descr = "ondergrens leidingkosten delta-T 20C", Source = "CE Delft 210347 Eindconceptadvies Warmtenetten in Vesta MAIS (versie 2022-08-09) pp.34 formule 4 ";
				attribute<eur_m> Ki_max_DT30 (ObjectDomain) := (1075.5 * P ^ 0.35)[eur_m], Descr = "bovengrens leidingkosten delta-T 30C", Source = "CE Delft 210347 Eindconceptadvies Warmtenetten in Vesta MAIS (versie 2022-08-09) pp.34 formule 5 ";
				attribute<eur_m> Ki_min_DT30 (ObjectDomain) := ( 680.3 * P ^ 0.41)[eur_m], Descr = "ondergrens leidingkosten delta-T 30C", Source = "CE Delft 210347 Eindconceptadvies Warmtenetten in Vesta MAIS (versie 2022-08-09) pp.34 formule 6 ";
				attribute<eur_m> Ki_max_DT50 (ObjectDomain) := ( 890.4 * P ^ 0.36)[eur_m], Descr = "bovengrens leidingkosten delta-T 50C", Source = "CE Delft 210347 Eindconceptadvies Warmtenetten in Vesta MAIS (versie 2022-08-09) pp.34 formule 7 ";
				attribute<eur_m> Ki_min_DT50 (ObjectDomain) := ( 407.8 * P ^ 0.48)[eur_m], Descr = "ondergrens leidingkosten delta-T 50C", Source = "CE Delft 210347 Eindconceptadvies Warmtenetten in Vesta MAIS (versie 2022-08-09) pp.34 formule 8 ";
				attribute<eur_m> Ki_max_DT70 (ObjectDomain) := ( 320.5 * P ^ 0.50)[eur_m], Descr = "bovengrens leidingkosten delta-T 70C", Source = "CE Delft 210347 Eindconceptadvies Warmtenetten in Vesta MAIS (versie 2022-08-09) pp.34 formule 9 ";
				attribute<eur_m> Ki_min_DT70 (ObjectDomain) := ( 871.4 * P ^ 0.33)[eur_m], Descr = "ondergrens leidingkosten delta-T 70C", Source = "CE Delft 210347 Eindconceptadvies Warmtenetten in Vesta MAIS (versie 2022-08-09) pp.34 formule 10";

				//====== bepaling welke delta-T van toepassing is per object en waarde binnen bandbreedte bepalen o.b.v. invoerschuif
				attribute<eur_m> Ki_max      (ObjectDomain) := DT <= 10[Celsius] ? Ki_max_DT10 : DT <= 20[Celsius] ? Ki_max_DT20 : DT <= 30[Celsius] ? Ki_max_DT30 : DT <= 50[Celsius] ? Ki_max_DT50 : Ki_max_DT70;
				attribute<eur_m> Ki_min      (ObjectDomain) := DT <= 10[Celsius] ? Ki_min_DT10 : DT <= 20[Celsius] ? Ki_min_DT20 : DT <= 30[Celsius] ? Ki_min_DT30 : DT <= 50[Celsius] ? Ki_min_DT50 : Ki_min_DT70;
				attribute<eur_m> Ki          (ObjectDomain) := Schuiven/KostenMin * Ki_min + Schuiven/KostenMax * Ki_max;
			}

			//====== partiele berekening van contributiemarge t.b.v. filtering en koppeling kandidaten<->bronnen
			attribute<Eur_yr>  Contributie   (AllCandidate) := alternatief/kosten - jaarlijks/kosten;
		}
	}

	container BronAllocatie: KeepData = "True" // facilitate debugging this; REMOVE when done.
	{
		unit<uint32> ContributiePand := subset(AllCandidate/StudieGebiedPand/Contributie > 0.0[Eur_yr])
		{
			attribute<rdc_meter> Geometry := Point;
			attribute<rdc_meter> Point    := nr_orgEntity->point;
			attribute<kW>        P_wd     := nr_orgEntity->P_wd;
		}

		parameter<Float64> Ki_Buis_kW := 10[EUR / m / kW];
		
		unit<uint32> AansluitPunten := union_unit(WarmteBronnen/Puntbronnen, WarmteBronnen/Lijnbron_aansluitpunten, ContributiePand)
		{
			attribute<rdc_meter> Point := union_data(., WarmteBronnen/Puntbronnen/Geometry, WarmteBronnen/Lijnbron_aansluitpunten/Point, ContributiePand/Point);
		}
		
		unit<uint32>  network       := /Invoer/RuimtelijkeData/OSM/Read_Final_Network;
		
		unit<uint32> Edge0 := connect(network/Geometry, AansluitPunten/point),	DialogType = "Map",	DialogData = "UnionData"
		{
			attribute<rdc_meter> Point     := first_point(UnionData);
			attribute<rdc_meter> NextPoint := last_point(UnionData);
			attribute<Vertex0>   from      := rlookup(Point,     Vertex0/Values);
			attribute<Vertex0>   to        := rlookup(NextPoint, Vertex0/Values);
			attribute<m>         dist      := arc_length(UnionData, m);
		}
		unit<uint32>  PointSet := union_unit(Edge0, Edge0) { attribute<rdc_meter> Point := union_data(., Edge0/Point, Edge0/NextPoint); }
		unit<uint32>  Vertex0  := unique(PointSet/Point);
		
		// add an edge from each bron to network in order to identify each bron as different source; TODO: cluster co-located and nearby bronnen.
		unit<uint32>  Vertex := union_unit(Vertex0, WarmteBronnen/bron)
		{
			attribute<rdc_meter> Point  := union_data(., Vertex0/Values, WarmteBronnen/bron/geometry);
			attribute<.>         Per_Pand (ContributiePand) := rlookup(ContributiePand/Point, Vertex0/Values);
			
		}
		attribute<Vertex> PuntBron_Vertex_rel  (WarmteBronnen/Puntbronnen)             := rlookup(WarmteBronnen/Puntbronnen/Geometry, Vertex/Point);
		attribute<Vertex> LijnBron_Vertex_rel  (WarmteBronnen/Lijnbron_aansluitpunten) := rlookup(WarmteBronnen/Lijnbron_aansluitpunten/Point, Vertex/Point);
		
		unit<uint32>      Vlakbron_Vertex_xrel := point_in_all_polygons(Vertex0/Values, WarmteBronnen/VlakBronnen/geometry)
		{
			attribute<WarmteBronnen/bron> bron_rel := WarmteBronnen/VlakBronnen/bron_rel[second_rel];
		}
		
		unit<uint32> Edge := union_unit(Edge0, WarmteBronnen/Puntbronnen, WarmteBronnen/Lijnbron_aansluitpunten, Vlakbron_Vertex_xrel)
		{
			attribute<rdc_meter> geometry(arc) := union_data(., Edge0/UnionData
			,	points2sequence(
					union_data(union_unit(WarmteBronnen/Puntbronnen, WarmteBronnen/Puntbronnen), WarmteBronnen/Puntbronnen/geometry, Vertex/Point[PuntBron_Vertex_rel])
				,	union_data(union_unit(WarmteBronnen/Puntbronnen, WarmteBronnen/Puntbronnen), ID(WarmteBronnen/Puntbronnen), ID(WarmteBronnen/Puntbronnen))
				)
			,	points2sequence(
					union_data(union_unit(WarmteBronnen/Lijnbron_aansluitpunten, WarmteBronnen/Lijnbron_aansluitpunten), WarmteBronnen/Lijnbron_aansluitpunten/Point, Vertex/Point[LijnBron_Vertex_rel])
				,	union_data(union_unit(WarmteBronnen/Lijnbron_aansluitpunten, WarmteBronnen/Lijnbron_aansluitpunten), ID(WarmteBronnen/Lijnbron_aansluitpunten), ID(WarmteBronnen/Lijnbron_aansluitpunten))
				)
			,	points2sequence(
					union_data(union_unit(Vlakbron_Vertex_xrel, Vlakbron_Vertex_xrel), centroid_or_mid(WarmteBronnen/VlakBronnen/geometry)[Vlakbron_Vertex_xrel/second_rel], Vertex0/Values[Vlakbron_Vertex_xrel/first_rel])
				,	union_data(union_unit(Vlakbron_Vertex_xrel, Vlakbron_Vertex_xrel), ID(Vlakbron_Vertex_xrel), ID(Vlakbron_Vertex_xrel))
				)
			);
			attribute<bool> bothDirs:= union_data(., const(true, Edge0), const(false, WarmteBronnen/Puntbronnen), const(false, WarmteBronnen/Lijnbron_aansluitpunten), const(false, Vlakbron_Vertex_xrel));
			attribute<Vertex> from  := union_data(., Edge0/from, #Vertex0 + WarmteBronnen/Puntbronnen/bron_rel, #Vertex0 + WarmteBronnen/Lijnbron_aansluitpunten/bron_rel, #Vertex0 + Vlakbron_Vertex_xrel/bron_rel);
			attribute<Vertex> to    := union_data(., Edge0/to,   PuntBron_Vertex_rel, LijnBron_Vertex_rel, Vlakbron_Vertex_xrel/second_rel);
			attribute<m>      dist  := union_data(., Edge0/dist, const(0m, WarmteBronnen/Puntbronnen), const(0m, WarmteBronnen/Lijnbron_aansluitpunten), const(0m, Vlakbron_Vertex_xrel));
		}
		
		attribute<Vertex> StudieGebiedPand_Vertex_rel(ContributiePand) := rlookup(ContributiePand/Point, Vertex0/Values);
		
		
		// startpoints maken met alle aansluitpunten van alle bronnen (ook vlakbronnen ? )
		attribute<Vertex> bron_Vertex_rel(WarmteBronnen/bron) := #Vertex0 + ID(WarmteBronnen/bron);
/*		
		unit<uint32> startPoint := 
		{
			attribute<Vertex> Vertex_rel := #Vertex0 + ID(.);
			attribute<.> per_Vertex(Vertex) := invert(Vertex_rel), IntegrityCheck = "per_Vertex[Vertex_rel] == ID(.)";
			attribute<uint32> count(Vertex) := pcount(Vertex_rel);
//			attribute<WarmteBronnen/bron> bron_rel := union_data(.,	WarmteBronnen/Puntbronnen/bron_rel,	WarmteBronnen/Lijnbron_aansluitpunten/bron_rel, Vlakbron_Vertex_xrel/second_rel->bron_rel);
			// 20km max voor typische connectie van 1 bron op 100 afnemers van ieder 10kW, maar minder bij veel startPoints
		}
		// endpoints zijn alle AllCandidate/StudieGebiedPand(en)
*/				
			
		parameter<uint32> nrBronAllocatieIteraties := 20; // TODO: reconsider and move to kentallen
		unit<uint32> allocIter := range(uint32, 0, nrBronAllocatieIteraties)
		{
			attribute<string> name := 'I'+string(id(.));
			attribute<string> prevName := MakeDefined(name[ID(.)-1]+'/nextAugmentation', 'initialAugmentation');
		}
		
		attribute<m> initialAugmentation(WarmteBronnen/bron) := (1.0 - WarmteBronnen/bron/Ki_cap / max(WarmteBronnen/bron/Ki_cap)) * WarmteBronnen/bron/max_dist, KeepData = "False";
		// round 1
		template allocIterT 
		{
		
			attribute<m> currAugmentation(WarmteBronnen/bron);
			attribute<m> bron_handicap   (WarmteBronnen/bron) := currAugmentation + (max(WarmteBronnen/bron/max_dist)- WarmteBronnen/bron/max_dist);
			
			// afstandentabel via dijkstra
			attribute<m> bron_dist(ContributiePand) := dijkstra_s('bidirectional(link_flag);startPoint(Node_rel,impedance);endPoint(Node_rel);cut(OrgZone_max_imp);node:TraceBack'
				,	Edge/dist, Edge/from, Edge/to, Edge/bothDirs
				,	bron_Vertex_rel, bron_handicap
				,	rlookup(ContributiePand/Point, Vertex/Point)
				,	max(initialAugmentation) + 20[km] * 1000[m / km]
				);
				
			attribute<Vertex>              Vertex_Vertex_rel (Vertex)          := service_area(Edge/from, Edge/to, bron_dist/TraceBack);
			attribute<WarmteBronnen/bron>  Vertex_bron_rel   (Vertex)          := rlookup(Vertex_Vertex_rel, bron_Vertex_rel);
			attribute<WarmteBronnen/bron>  Dest_bron_rel     (ContributiePand) := Vertex_bron_rel[Vertex/Per_Pand];

			attribute<kW>    bron_P_wd     (Warmtebronnen/bron) := sum(ContributiePand/P_wd, dest_bron_rel);
			
			attribute<ratio> bron_cap_ratio(Warmtebronnen/bron) := bron_P_wd / Warmtebronnen/bron/kWth_max;

			// te volle bronnen moeten duurder met een aantal augmentedImpedances van een andere bron - bron_dist: de impedance van de huidige bron, oplopend gesorteerd
			// mits deze bron vol
			// zaag bij overvolle bronnen afnemers weg die redelijke alternatieven hebben						
			
			attribute<m> zaaglijn(Warmtebronnen/bron) := nth_element_weighted(
					bron_dist
				,	Warmtebronnen/bron/kWth_max // zoveel moeten we houden
				,	ContributiePand/P_wd
				,	dest_bron_rel
			);
			attribute<m> nextAugmentation(Warmtebronnen/bron) := currAugmentation + (bron_cap_ratio > 1.0 ? max(bron_dist, dest_bron_rel) - zaaglijn : 0[m]);
		}
		container X : KeepData = "False"
		{
			container Iterations := for_each_ne(allocIter/name, 'allocIterT('+allocIter/prevName+')');
		}
		container LastIter := ='X/Iterations/'+last(allocIter/name);
		
		attribute<m>                  best_augmentation (WarmteBronnen/bron) := LastIter/currAugmentation;
		attribute<Warmtebronnen/bron> best_bron_rel     (ContributiePand)    := lastIter/dest_bron_rel;
		attribute<uint32>             SGP_count         (WarmteBronnen/bron) := count(best_bron_rel, Best_bron_rel);
/*		
		attribute<m> reroute(AllCandidate/StudieGebiedPand):= dijkstra_s('bidirectional;startPoint(Node_rel,impedance);endPoint(Node_rel);cut(OrgZone_max_imp);node:TraceBack'
			,	Edge/dist, Edge/from, Edge/to
			,	startPoint/Vertex_rel, best_augmentation[startPoint/bron_rel]
			,	rlookup(AllCandidate/StudieGebiedPand/Point, Vertex/Values)
			,	max(WarmteBronnen/bron/max_dist))
		{
				attribute<Edge> TraceBack(Vertex);
		}
*/		
		attribute<kW> NodeDemand(Vertex) := MakeDefined((ContributiePand/P_wd * Float64(best_bron_rel!=0))[invert(Vertex/Per_pand)], 0[kW]);
	
		attribute<kW> edge_flow(Edge) := trace_back(Edge/From, Edge/To, LastIter/bron_dist/TraceBack, NodeDemand);
		
		attribute<Vertex> Vertex_bron_Vertex_rel(Vertex) := service_area(Edge/From, Edge/To, LastIter/bron_dist/TraceBack); 
		attribute<WarmteBronnen/bron> Vertex_bron_rel(Vertex) := invert(bron_Vertex_rel)[Vertex_bron_Vertex_rel];

		attribute<Celsius> DT_edge (Edge) := const(0[celsius], Edge); // TODO: DT beter invullen.
		
		container edge_cost_calc := AllCandidate/PartialContributie/LeidingKosten_T(Edge, edge_flow, DT_edge);
		
		attribute<EUR> edge_cost  (Edge) := edge_cost_calc/Ki * Edge/dist;
		attribute<EUR> bron_Ki_buis(WarmteBronnen/bron) := sum(edge_cost, Vertex_bron_rel[Edge/From]);
		
		// TODO: vlakbronnen per raster
		// TODO: Rotterdam case
}	
	// Prospects: potentiele businesscases voor warmtenetten
	unit<uint32> Prospect := subset(BronAllocatie/SGP_count > 0[uint32])
	{
		attribute<BronAllocatie/ContributiePand> ContributiePand_rel (AllCandidate/StudieGebiedPand) := invert(BronAllocatie/ContributiePand/nr_orgentity);
		attribute<WarmteBronnen/bron>            Bron_rel            (AllCandidate/StudieGebiedPand) := BronAllocatie/Best_bron_rel[ContributiePand_rel];

		unit<uint32> Afnemer := subset(IsDefined(Bron_rel[AllCandidate/StudieGebiedPand_rel]))
		{
			attribute<rdc_meter>    Geometry     := nr_orgEntity->AllCandidate/Geometry;
			attribute<Prospect>     Prospect_rel := rlookup( Bron_rel[AllCandidate/StudieGebiedPand_rel][nr_orgentity] , Prospect/nr_orgentity);
			
			container Kosten
			{
				attribute<Eur_yr> Kj_id_elek     (Afnemer) := AllCandidate/PartialContributie/Jaarlijks/Kj_id_elek[nr_orgentity];
				attribute<Eur_yr> Kji_id_net     (Afnemer) := AllCandidate/PartialContributie/Jaarlijks/Kji_id_net[nr_orgentity];
				attribute<Eur_yr> Kj_id_oh       (Afnemer) := AllCandidate/PartialContributie/Jaarlijks/Kj_id_oh[nr_orgentity];
				attribute<Eur_yr> Kj_id_adm      (Afnemer) := AllCandidate/PartialContributie/Jaarlijks/Kj_id_adm[nr_orgentity];
				attribute<Eur_yr> Kji_ge_net     (Afnemer) := AllCandidate/PartialContributie/Jaarlijks/Kji_ge_net[nr_orgentity];
				attribute<Eur_yr> Kji_wd_asl_net (Afnemer) := AllCandidate/PartialContributie/Jaarlijks/Kji_wd_asl_net[nr_orgentity];
				attribute<Eur_yr> Kj_wd_asl_oh   (Afnemer) := AllCandidate/PartialContributie/Jaarlijks/Kj_wd_asl_oh[nr_orgentity];
				attribute<Eur_yr> Kj_wd_asl_adm  (Afnemer) := AllCandidate/PartialContributie/Jaarlijks/Kj_wd_asl_adm[nr_orgentity];
			}

			container Vraag
			{
				attribute<GJ_yr> V_Wd_warmte  (Afnemer) := AllCandidate/PartialContributie/V_warmte[nr_orgentity] + AllCandidate/PartialContributie/V_wd_verlies[nr_orgentity];
				attribute<GJ_yr> V_wd_koude   (Afnemer) := AllCandidate/PartialContributie/V_koude[nr_orgentity];
				attribute<kW>    P_wd         (Afnemer) := AllCandidate/PartialContributie/P_wd[nr_orgentity], Descr = "Capaciteitsvraag aan secundair net inclusief capaciteitsverlies";
			}
		}
	}
	
	unit<uint32> Candidate := subset(AllCandidate/PartialContributie/Contributie > 0.0[Eur_yr])
	{
		attribute<BO>        BO_rel        := AllCandidate/BO_rel[nr_orgentity];
		attribute<rdc_meter> Geometry      := AllCandidate/geometry[nr_orgentity];
		attribute<PlanRegio> PlanRegio_rel := AllCandidate/PlanRegio_rel[nr_orgentity];
	}
	
	//====== berekening van jaarlijke vraag en verlies energiedragers
	unit<uint32> VerbruikBerekening := Candidate
	{
		attribute<Gj_yr> V_wd_gas     := const(0[Gj_yr], .), Descr = "gasverbruik in systemen die onderdeel zijn van het distributienet";
		attribute<Gj_yr> V_ow_gas     := const(0[Gj_yr], .), Descr = "gasverbruik bij de primaire bron van het warmtenet";
		attribute<Gj_yr> V_wd_elek    := const(0[Gj_yr], .), Descr = "elektriciteitsverbruik in systemen die onderdeel zijn van het distributienet";
		attribute<Gj_yr> V_ow_elek    := const(0[Gj_yr], .), Descr = "elektriciteitsverbruik bij de primaire bron van het warmtenet";
		attribute<Gj_yr> V_pt_verlies := const(0[Gj_yr], .), Descr = "warmteverlies in leidingen die onderdeel zijn van het transportnet";

		//====== resultaten van berekening, gereed voor rapportage in resultaten
		attribute<Gj_yr> V_warmte     := AllCandidate/PartialContributie/V_warmte[nr_orgentity]    , Descr = "warmtevraag van gebouwen aan het warmtenet";
		attribute<Gj_yr> V_koude      := AllCandidate/PartialContributie/V_koude[nr_orgentity]     , Descr = "koudevraag van gebouwen aan het koudenet";
		attribute<Gj_yr> V_id_elek    := AllCandidate/PartialContributie/V_id_elek[nr_orgentity]   , Descr = "elektriciteitsverbruik in inpandige systemen als onderdeel van het warmtenet";
		attribute<Gj_yr> V_wd_verlies := AllCandidate/PartialContributie/V_wd_verlies[nr_orgentity], Descr = "warmteverlies in leidingen die onderdeel zijn van het distributienet";

		attribute<classifications/gebruiksgrootteklasse> ind_gebruiksgrootteklasse_rel := AllCandidate/PartialContributie/ind_gebruiksgrootteklasse_rel[nr_orgentity];
	}

	//====== berekening van kosten van aanleg en operatie
	unit<uint32> KostenBerekening := Candidate
	{
		attribute<Eur_yr> Kj_ow_productie := const(0[Eur_yr], .), Descr = "jaarlijkse kosten productie uit primaire bron";
		
		attribute<Eur> Ki_wd       := const(0.0[Eur], .), Descr = "investeringen in wijkdistributienet";
		attribute<Eur> Ki_pt       := const(0.0[Eur], .), Descr = "investeringen in transportnet";
		attribute<Eur> Ki_ow       := const(0.0[Eur], .), Descr = "investeringen primaire bron";
		attribute<Eur> Oi_lv_Aansl := const(0[Eur], .), Descr = "opbrengst van aansluitbijdrages";

		//====== resultaten van berekening, gereed voor rapportage in resultaten
		attribute<Eur>    Ki_id     := AllCandidate/PartialContributie/Ki_id[nr_orgentity]              , Descr = "investeringen inpandige systemen";
		attribute<Eur>    Ki_ge_ov  := AllCandidate/PartialContributie/Ki_ge_ov[nr_orgentity]           , Descr = "investeringen gebouweigenaar in ongeriefsvergoeding";
		attribute<Eur>    Ki_ge_pm  := AllCandidate/PartialContributie/Ki_ge_pm[nr_orgentity]           , Descr = "investeringen gebouweigenaar in projectmanagement";
		attribute<Eur>    Oi_ge_EIA := AllCandidate/PartialContributie/Oi_ge_EIA[nr_orgentity]          , Descr = "investeringssubsidies op kosten ongeriefsvergoeding en projectmanagement";
		attribute<Eur_yr> Kj_id_oh  := AllCandidate/PartialContributie/jaarlijks/Kj_id_oh[nr_orgentity] , Descr = "jaarlijkse onderhoudskosten inpandige componenten van het warmtenet";
		attribute<Eur_yr> Kj_id_adm := AllCandidate/PartialContributie/jaarlijks/Kj_id_adm[nr_orgentity], Descr = "jaarlijkse administratiekosten inpandige componenten van het warmtenet";
		attribute<Eur_yr> Kji_id    := AllCandidate/PartialContributie/jaarlijks/Kji_id[nr_orgentity]   , Descr = "geannualiseerde investeringskosten inpandige componenten van het warmtenet (eindgebruikerskosten)";
		attribute<Eur_yr> Kmi_id    := AllCandidate/PartialContributie/jaarlijks/Kmi_id[nr_orgentity]   , Descr = "geannualiseerde investeringskosten inpandige componenten van het warmtenet (nationale kosten)";
	}

	//====== berekening van opbrengsten van leverancier
	unit<uint32> OpbrengstenBerekening := Candidate
	{
		attribute<Eur_yr> Oj_lv_verbruik  := const(0[Eur_yr], .), Descr = "jaarlijkse opbrensten voor leverancier: component verbruik";
		attribute<Eur_yr> Oj_lv_vastrecht := const(0[Eur_yr], .), Descr = "jaarlijkse opbrensten voor leverancier: component vastrecht";
		attribute<Eur_yr> Oj_lv_SDE       := const(0[Eur_yr], .), Descr = "jaarlijkse opbrensten voor leverancier: component productiesubsidie";
	}


	//====== indicatie per kandidaat of deze nu is aangesloten op een nieuw warmtenet
	attribute<bool> connect (Candidate) := const(false, Candidate);
	

	//====== resultaten van warmteoptie voor verder gebruik
	unit<uint32> PlanRegio := /Invoer/RuimtelijkeData/StudieGebied/Buurt;
	container Results := BeginStatus
	{
		container BebouwingMutatie := PlanRegioOptieResultaat(BeginStatus/Bebouwing/Woning, Optie, connect[invert(Candidate/BO_rel)]);
		container Bebouwing
		{
			unit<uint32> Woning := BebouwingMutatie/Results;
		}
		container PlanregioResults 
		{
			container jaarlijks
			{
				container ge
				{
					//====== jaarlijkse kosten gebouweigenaar
					attribute<Eur_yr> Kji_ge_ov       (PlanRegio) := eenmalig/Ki_ge_ov    * NCW/wd28/StartDiscountFactor * NCW/wd28/AnnualisationFactor, Descr = "geannualiseerde investeringen ongeriefsvergoeding, eindgebruikerskosten";
					attribute<Eur_yr> Kji_ge_pm       (PlanRegio) := eenmalig/Ki_ge_pm    * NCW/wd28/StartDiscountFactor * NCW/wd28/AnnualisationFactor, Descr = "geannualiseerde investeringen projectmanagement, eindgebruikerskosten";
					attribute<Eur_yr> Kmi_ge_ov       (PlanRegio) := eenmalig/Ki_ge_ov    * NCW/mr28/StartDiscountFactor * NCW/mr28/AnnualisationFactor, Descr = "geannualiseerde investeringen ongeriefsvergoeding, nationale kosten";
					attribute<Eur_yr> Kmi_ge_pm       (PlanRegio) := eenmalig/Ki_ge_pm    * NCW/mr28/StartDiscountFactor * NCW/mr28/AnnualisationFactor, Descr = "geannualiseerde investeringen projectmanagement, nationale kosten";
					attribute<Eur_yr> Bji_ge_Aansl    (PlanRegio) := eenmalig/Oi_lv_Aansl * NCW/wd28/StartDiscountFactor * NCW/wd28/AnnualisationFactor, Descr = "geannualiseerde aansluitbijdrages inpandig, eindgebruikerskosten";
					attribute<Eur_yr> Oji_ge_EIA      (PlanRegio) := eenmalig/Oi_ge_EIA   * NCW/wd28/StartDiscountFactor * NCW/wd28/AnnualisationFactor, Descr = "geannualiseerde subsidies projectmanagement en ongeriefsvergoeding, eindgebruikerskosten";
					attribute<Eur_yr> Omi_ge_EIA      (PlanRegio) := eenmalig/Oi_ge_EIA   * NCW/mr28/StartDiscountFactor * NCW/mr28/AnnualisationFactor, Descr = "geannualiseerde subsidies projectmanagement en ongeriefsvergoeding, nationale kosten";

					attribute<Eur_yr> Kj_ge_hv      (PlanRegio) := const(0.0[Eur_yr],PlanRegio); //TODO: remove
					attribute<Eur_yr> Om_ge_comfort (PlanRegio) := const(0.0[Eur_yr],PlanRegio); //TODO: remove
				}

				container id
				{
					//====== jaarlijkse kosten inpandige distributie
					attribute<Eur_yr> Kj_id_elek      (PlanRegio) := sum(float64(connect) * VerbruikBerekening/V_id_elek * prijzen/Elektriciteit/Staffel/KGJ_eindgebruik_excl [VerbruikBerekening/ind_gebruiksgrootteklasse_rel] , Candidate/PlanRegio_rel) , Descr = "Kosten elektriciteitsverbruik inpandig (eindgebruikerskosten)";
					attribute<Eur_yr> Kj_id_elek_EH   (PlanRegio) := sum(float64(connect) * VerbruikBerekening/V_id_elek * prijzen/Elektriciteit/Staffel/KGJ_EnergieHeffing   [VerbruikBerekening/ind_gebruiksgrootteklasse_rel] , Candidate/PlanRegio_rel) , Descr = "Kosten elektriciteitsverbruik inpandig (energieheffing)";
					attribute<Eur_yr> Km_id_elek      (PlanRegio) := sum(float64(connect) * VerbruikBerekening/V_id_elek * prijzen/Elektriciteit/Staffel/KGJ_Maatschappelijk  [VerbruikBerekening/ind_gebruiksgrootteklasse_rel] , Candidate/PlanRegio_rel) , Descr = "Kosten elektriciteitsverbruik inpandig (nationale kosten)";
					attribute<Eur_yr> Kj_id_oh        (PlanRegio) := sum(float64(connect) * KostenBerekening/Kj_id_oh, Candidate/PlanRegio_rel)        , Descr = "onderhoudskosten inpandig";
					attribute<Eur_yr> Kj_id_adm       (PlanRegio) := sum(float64(connect) * KostenBerekening/Kj_id_adm, Candidate/PlanRegio_rel)       , Descr = "administratiekosten inpandig";
					attribute<Eur_yr> Kji_id          (PlanRegio) := sum(float64(connect) * KostenBerekening/Kji_id, Candidate/PlanRegio_rel)          , Descr = "geannualiseerde investeringen inpandig, eindgebruikerskosten";
					attribute<Eur_yr> Kmi_id          (PlanRegio) := sum(float64(connect) * KostenBerekening/Kmi_id, Candidate/PlanRegio_rel)          , Descr = "geannualiseerde investeringen inpandig, nationale kosten";
					attribute<Eur_yr> Oji_id_EIA      (PlanRegio) := eenmalig/Oi_id_EIA * NCW/id28/StartDiscountFactor * NCW/id28/AnnualisationFactor  , Descr = "geannualiseerde investeringssubsidies inpandig, eindgebruikerskosten";
					attribute<Eur_yr> Omi_id_EIA      (PlanRegio) := eenmalig/Oi_id_EIA * NCW/mr28/StartDiscountFactor * NCW/mr28/AnnualisationFactor  , Descr = "geannualiseerde investeringssubsidies inpandig, nationale kosten";  

					attribute<Eur_yr> Oj_id_SDE       (PlanRegio) := const(0.0[Eur_yr],PlanRegio); //TODO: remove
					attribute<Eur_yr> Kji_id_LO       (PlanRegio) := const(0.0[Eur_yr],PlanRegio); //TODO: remove
					attribute<Eur_yr> Kmi_id_LO       (PlanRegio) := const(0.0[Eur_yr],PlanRegio); //TODO: remove
					attribute<Eur_yr> Kj_id_LO_oh     (PlanRegio) := const(0.0[Eur_yr],PlanRegio); //TODO: remove
					attribute<Eur_yr> Kj_id_gas       (PlanRegio) := const(0.0[Eur_yr],PlanRegio); //TODO: remove
					attribute<Eur_yr> Kj_id_gas_EH    (PlanRegio) := const(0.0[Eur_yr],PlanRegio); //TODO: remove 
					attribute<Eur_yr> Km_id_gas       (PlanRegio) := const(0.0[Eur_yr],PlanRegio); //TODO: remove
				}

				container wd
				{
					//====== jaarlijkse kosten wijkdistributie
					attribute<Eur_yr> Kj_wd_gas       (PlanRegio) := Verbruik/V_wd_gas  * last(prijzen/AardGas/Staffel/KGJ_eindgebruik_excl)                 , Descr = "Kosten aardgasverbruik wijkdistributienet (eindgebruikerskosten)";
					attribute<Eur_yr> Kj_wd_gas_EH    (PlanRegio) := Verbruik/V_wd_gas  * last(prijzen/AardGas/Staffel/KGJ_EnergieHeffing)                   , Descr = "Kosten aardgasverbruik wijkdistributienet (energieheffing)";
					attribute<Eur_yr> Km_wd_gas       (PlanRegio) := Verbruik/V_wd_gas  * last(prijzen/AardGas/Staffel/KGJ_Maatschappelijk)                  , Descr = "Kosten aardgasverbruik wijkdistributienet (nationale kosten)";
					attribute<Eur_yr> Kj_wd_elek      (PlanRegio) := Verbruik/V_wd_elek * last(prijzen/Elektriciteit/Staffel/KGJ_eindgebruik_excl)           , Descr = "Kosten elektriciteitsverbruik wijkdistributienet (eindgebruikerskosten)";
					attribute<Eur_yr> Kj_wd_elek_EH   (PlanRegio) := Verbruik/V_wd_elek * last(prijzen/Elektriciteit/Staffel/KGJ_EnergieHeffing)             , Descr = "Kosten elektriciteitsverbruik wijkdistributienet (energieheffing)";
					attribute<Eur_yr> Km_wd_elek      (PlanRegio) := Verbruik/V_wd_elek * last(prijzen/Elektriciteit/Staffel/KGJ_Maatschappelijk)            , Descr = "Kosten elektriciteitsverbruik wijkdistributienet (nationale kosten)";
					attribute<Eur_yr> Kj_wd_oh        (PlanRegio) := eenmalig/Ki_wd     * leerCurves/OenM/Curve * Invoer/Kengetallen/Onderhoud/R_wd_onderhoud, Descr = "onderhoudskosten wijkdistributienet";
					attribute<Eur_yr> Kj_wd_adm       (PlanRegio) := eenmalig/Ki_wd     * leerCurves/OenM/Curve * Invoer/Kengetallen/Onderhoud/R_wd_admin    , Descr = "administratiekosten wijkdistributienet";
					attribute<Eur_yr> Kji_wd          (PlanRegio) := eenmalig/Ki_wd     * NCW/wd28/StartDiscountFactor * NCW/wd28/AnnualisationFactor        , Descr = "geannualiseerde investeringen wijkdistributienet, eindgebruikerskosten";
					attribute<Eur_yr> Kmi_wd          (PlanRegio) := eenmalig/Ki_wd     * NCW/mr28/StartDiscountFactor * NCW/mr28/AnnualisationFactor        , Descr = "geannualiseerde investeringen wijkdistributienet, nationale kosten";
					attribute<Eur_yr> Oji_wd_EIA      (PlanRegio) := eenmalig/Oi_wd_EIA * NCW/wd28/StartDiscountFactor * NCW/wd28/AnnualisationFactor        , Descr = "geannualiseerde investeringssubsidies wijkdistributienet, eindgebruikerskosten";
					attribute<Eur_yr> Omi_wd_EIA      (PlanRegio) := eenmalig/Oi_wd_EIA * NCW/mr28/StartDiscountFactor * NCW/mr28/AnnualisationFactor        , Descr = "geannualiseerde investeringssubsidies wijkdistributienet, nationale kosten";

					attribute<Eur_yr> Oj_wd_SDE     (PlanRegio) := const(0.0[Eur_yr],PlanRegio); //TODO: remove
					attribute<Eur_yr> Kji_wd_Gnet   (PlanRegio) := const(0.0[Eur_yr],PlanRegio); //TODO: remove
					attribute<Eur_yr> Kmi_wd_Gnet   (PlanRegio) := const(0.0[Eur_yr],PlanRegio); //TODO: remove
					attribute<Eur_yr> Kj_wd_Gnet_oh (PlanRegio) := const(0.0[Eur_yr],PlanRegio); //TODO: remove
				}

				container pt
				{
					//====== jaarlijkse kosten primair transport
					attribute<Eur_yr> Kj_pt_oh        (PlanRegio) := eenmalig/Ki_pt     * leerCurves/OenM/Curve * Invoer/Kengetallen/Onderhoud/R_pt_onderhoud, Descr = "onderhoudskosten transportnet";
					attribute<Eur_yr> Kj_pt_adm       (PlanRegio) := eenmalig/Ki_pt     * leerCurves/OenM/Curve * Invoer/Kengetallen/Onderhoud/R_pt_admin    , Descr = "administratiekosten transportnet";
					attribute<Eur_yr> Kji_pt          (PlanRegio) := eenmalig/Ki_pt     * NCW/pt28/StartDiscountFactor * NCW/pt28/AnnualisationFactor        , Descr = "geannualiseerde investeringen transportnet, eindgebruikerskosten";
					attribute<Eur_yr> Kmi_pt          (PlanRegio) := eenmalig/Ki_pt     * NCW/mr28/StartDiscountFactor * NCW/mr28/AnnualisationFactor        , Descr = "geannualiseerde investeringen transportnet, nationale kosten";
					attribute<Eur_yr> Oji_pt_EIA      (PlanRegio) := eenmalig/Oi_pt_EIA * NCW/pt28/StartDiscountFactor * NCW/pt28/AnnualisationFactor        , Descr = "geannualiseerde investeringssubsidies transportnet, eindgebruikerskosten";
					attribute<Eur_yr> Omi_pt_EIA      (PlanRegio) := eenmalig/Oi_pt_EIA * NCW/mr28/StartDiscountFactor * NCW/mr28/AnnualisationFactor        , Descr = "geannualiseerde investeringssubsidies transportnet, nationale Kosten";
				}
				container ow
				{
					//====== Jaarlijkse kosten en subsidies primaire bron
					attribute<Eur_yr> Kj_ow_productie (PlanRegio) := sum(float64(connect) * KostenBerekening/Kj_ow_productie, Candidate/PlanRegio_rel)       , Descr = "jaarlijkse kosten productie uit primaire bron";
					attribute<Eur_yr> Kj_ow_oh        (PlanRegio) := eenmalig/Ki_ow     * leerCurves/OenM/Curve * Invoer/Kengetallen/Onderhoud/R_ow_onderhoud, Descr = "onderhoudskosten primaire bron";
					attribute<Eur_yr> Kj_ow_adm       (PlanRegio) := eenmalig/Ki_ow     * leerCurves/OenM/Curve * Invoer/Kengetallen/Onderhoud/R_ow_admin    , Descr = "administratiekosten primaire bron";
					attribute<Eur_yr> Kji_ow          (PlanRegio) := eenmalig/Ki_ow     * NCW/ow28/StartDiscountFactor * NCW/ow28/AnnualisationFactor        , Descr = "geannualiseerde investeringen primaire bron (eindgebruikerskosten)";
					attribute<Eur_yr> Kmi_ow          (PlanRegio) := eenmalig/Ki_ow     * NCW/mr28/StartDiscountFactor * NCW/mr28/AnnualisationFactor        , Descr = "geannualiseerde investeringen primaire bron (nationale kosten)";
					attribute<Eur_yr> Oji_ow_EIA      (PlanRegio) := eenmalig/Oi_ow_EIA * NCW/ow28/StartDiscountFactor * NCW/ow28/AnnualisationFactor        , Descr = "geannualiseerde subsidies primaire bron (eindgebruikerskosten)";
					attribute<Eur_yr> Omi_ow_EIA      (PlanRegio) := eenmalig/Oi_ow_EIA * NCW/mr28/StartDiscountFactor * NCW/mr28/AnnualisationFactor        , Descr = "geannualiseerde subsidies primaire bron (nationale kosten)";
					attribute<Eur_yr> Kj_ow_gas       (PlanRegio) := Verbruik/V_ow_gas  * last(prijzen/AardGas/Staffel/KGJ_eindgebruik_excl)                 , Descr = "Kosten aardgasverbruik primaire bron (eindgebruikerskosten)";
					attribute<Eur_yr> Kj_ow_gas_EH    (PlanRegio) := Verbruik/V_ow_gas  * last(prijzen/AardGas/Staffel/KGJ_EnergieHeffing)                   , Descr = "Kosten aardgasverbruik primaire bron (energieheffing)";
					attribute<Eur_yr> Km_ow_gas       (PlanRegio) := Verbruik/V_ow_gas  * last(prijzen/AardGas/Staffel/KGJ_Maatschappelijk)                  , Descr = "Kosten aardgasverbruik primaire bron (nationale kosten)";
					attribute<Eur_yr> Kj_ow_elek      (PlanRegio) := Verbruik/V_ow_elek * last(prijzen/Elektriciteit/Staffel/KGJ_eindgebruik_excl)           , Descr = "Kosten elektriciteitsverbruik primaire bron (eindgebruikerskosten)";
					attribute<Eur_yr> Kj_ow_elek_EH   (PlanRegio) := Verbruik/V_ow_elek * last(prijzen/Elektriciteit/Staffel/KGJ_EnergieHeffing)             , Descr = "Kosten elektriciteitsverbruik primaire bron (energieheffing)";
					attribute<Eur_yr> Km_ow_elek      (PlanRegio) := Verbruik/V_ow_elek * last(prijzen/Elektriciteit/Staffel/KGJ_Maatschappelijk)            , Descr = "Kosten elektriciteitsverbruik primaire bron (nationale kosten)";

					attribute<Eur_yr> Oj_ow_SDE (PlanRegio) := const(0.0[Eur_yr],PlanRegio); //TODO: remove
				}

				container lv
				{
					//====== opbrengsten voor leverancier
					attribute<Eur_yr> Oj_lv_verbruik  (PlanRegio) := sum(float64(connect) * OpbrengstenBerekening/Oj_lv_verbruik , Candidate/PlanRegio_rel)  , Descr = "jaarlijkse opbrensten voor leverancier: component verbruik";
					attribute<Eur_yr> Oj_lv_vastrecht (PlanRegio) := sum(float64(connect) * OpbrengstenBerekening/Oj_lv_vastrecht, Candidate/PlanRegio_rel)  , Descr = "jaarlijkse opbrensten voor leverancier: component vastrecht";
					attribute<Eur_yr> Oj_lv_SDE       (PlanRegio) := sum(float64(connect) * OpbrengstenBerekening/Oj_lv_SDE      , Candidate/PlanRegio_rel)  , Descr = "jaarlijkse opbrensten voor leverancier: component productiesubsidie";

					//====== geannualiseerde opbrengsten aansluitbijdrages
					attribute<Eur_yr> Oji_lv_Aansl    (PlanRegio) := eenmalig/Oi_lv_Aansl * NCW/wd28/StartDiscountFactor * NCW/wd28/AnnualisationFactor      , Descr = "geannualiseerde opbrengsten aansluitbijdrages, eindgebruikerskosten";
					attribute<Eur_yr> Omi_lv_Aansl    (PlanRegio) := eenmalig/Oi_lv_Aansl * NCW/mr28/StartDiscountFactor * NCW/mr28/AnnualisationFactor      , Descr = "geannualiseerde opbrengsten aansluitbijdrages, nationale kosten";
				}
			}

			container eenmalig
			{
				//====== eenmalige kosten aanleg warmtenet
				attribute<Eur> Oi_lv_Aansl    (PlanRegio) := sum(float64(connect) * KostenBerekening/Oi_lv_Aansl, Candidate/PlanRegio_rel), Descr = "opbrengst van aansluitbijdrages";
				attribute<Eur> Ki_ge_ov       (PlanRegio) := sum(float64(connect) * KostenBerekening/Ki_ge_ov   , Candidate/PlanRegio_rel), Descr = "investeringen gebouweigenaar in ongeriefsvergoeding";
				attribute<Eur> Ki_ge_pm       (PlanRegio) := sum(float64(connect) * KostenBerekening/Ki_ge_pm   , Candidate/PlanRegio_rel), Descr = "investeringen gebouweigenaar in projectmanagement";
				attribute<Eur> Oi_ge_EIA      (PlanRegio) := sum(float64(connect) * KostenBerekening/Oi_ge_EIA  , Candidate/PlanRegio_rel), Descr = "investeringssubsidies op kosten ongeriefsvergoeding en projectmanagement";
				attribute<Eur> Ki_id          (PlanRegio) := sum(float64(connect) * KostenBerekening/Ki_id      , Candidate/PlanRegio_rel), Descr = "investeringen inpandige systemen";
				attribute<Eur> Ki_wd          (PlanRegio) := sum(float64(connect) * KostenBerekening/Ki_wd      , Candidate/PlanRegio_rel), Descr = "investeringen in wijkdistributienet";
				attribute<Eur> Ki_pt          (PlanRegio) := sum(float64(connect) * KostenBerekening/Ki_pt      , Candidate/PlanRegio_rel), Descr = "investeringen in transportnet";
				attribute<Eur> Ki_ow          (PlanRegio) := sum(float64(connect) * KostenBerekening/Ki_ow      , Candidate/PlanRegio_rel), Descr = "investeringen primaire bron";

				//====== Investeringssubsidies
				attribute<Eur> Oi_id_EIA      (PlanRegio) := Ki_id * SpecifiekeInstellingen/Beleid/EIA/id, Descr = "investeringssubsidies op investering inpandige systemen";
				attribute<Eur> Oi_wd_EIA      (PlanRegio) := Ki_wd * SpecifiekeInstellingen/Beleid/EIA/wd, Descr = "investeringssubsidies op investering in wijkdistributienet";
				attribute<Eur> Oi_pt_EIA      (PlanRegio) := Ki_pt * SpecifiekeInstellingen/Beleid/EIA/pt, Descr = "investeringssubsidies op investering in transportnet";
				attribute<Eur> Oi_ow_EIA      (PlanRegio) := Ki_ow * SpecifiekeInstellingen/Beleid/EIA/ow, Descr = "investeringssubsidies op investering primaire bron";

				attribute<Eur> Ki_wd_Gnet (PlanRegio) := const(0.0[Eur], PlanRegio); //TODO:remove
				attribute<Eur> Ki_id_lo   (PlanRegio) := const(0.0[Eur], PlanRegio); //TODO:remove
			}

			container Verbruik
			{
				//====== jarlijks verbruik en verlies energiedragers
				attribute<Gj_yr> V_id_gas     (PlanRegio) := const(0.0[GJ_yr], PlanRegio); //TODO:remove
				attribute<Gj_yr> V_wd_gas     (PlanRegio) := sum(float64(connect) * VerbruikBerekening/V_wd_gas    , Candidate/PlanRegio_rel), Descr = "gasverbruik in systemen die onderdeel zijn van het distributienet";
				attribute<Gj_yr> V_ow_gas     (PlanRegio) := sum(float64(connect) * VerbruikBerekening/V_ow_gas    , Candidate/PlanRegio_rel), Descr = "gasverbruik bij de primaire bron van het warmtenet";
				attribute<Gj_yr> V_id_elek    (PlanRegio) := sum(float64(connect) * VerbruikBerekening/V_id_elek   , Candidate/PlanRegio_rel), Descr = "elektriciteitsverbruik in inpandige systemen als onderdeel van het warmtenet";
				attribute<Gj_yr> V_wd_elek    (PlanRegio) := sum(float64(connect) * VerbruikBerekening/V_wd_elek   , Candidate/PlanRegio_rel), Descr = "elektriciteitsverbruik in systemen die onderdeel zijn van het distributienet";
				attribute<Gj_yr> V_ow_elek    (PlanRegio) := sum(float64(connect) * VerbruikBerekening/V_ow_elek   , Candidate/PlanRegio_rel), Descr = "elektriciteitsverbruik bij de primaire bron van het warmtenet";
				attribute<Gj_yr> V_id_verlies (PlanRegio) := const(0.0[GJ_yr], PlanRegio); //TODO:remove
				attribute<Gj_yr> V_wd_verlies (PlanRegio) := sum(float64(connect) * VerbruikBerekening/V_wd_verlies, Candidate/PlanRegio_rel), Descr = "warmteverlies in leidingen die onderdeel zijn van het distributienet";
				attribute<Gj_yr> V_pt_verlies (PlanRegio) := sum(float64(connect) * VerbruikBerekening/V_pt_verlies, Candidate/PlanRegio_rel), Descr = "warmteverlies in leidingen die onderdeel zijn van het transportnet";
				attribute<Gj_yr> V_warmte     (PlanRegio) := sum(float64(connect) * VerbruikBerekening/V_warmte    , Candidate/PlanRegio_rel), Descr = "warmtevraag van gebouwen aan het warmtenet";
				attribute<Gj_yr> V_koude      (PlanRegio) := sum(float64(connect) * VerbruikBerekening/V_koude     , Candidate/PlanRegio_rel), Descr = "koudevraag van gebouwen aan het koudenet";

				//====== Netto warmteonttrekking per netcomponent
				attribute<Gj_yr> V_id_warmte  (PlanRegio) := V_warmte    - (V_id_gas + V_id_elek - V_id_verlies), Descr = "warmtevraag van het inpandige deel van het warmtenet aan het wijkdistributienet";
				attribute<Gj_yr> V_wd_warmte  (PlanRegio) := V_id_warmte - (V_wd_gas + V_wd_elek - V_wd_verlies), Descr = "warmtevraag van het wijkdistributienet aan het transportnet";
				attribute<Gj_yr> V_ow_warmte  (PlanRegio) := V_wd_warmte - (V_ow_gas + V_ow_elek - V_pt_verlies), Descr = "warmtevraag van het leidingnet aan de primaire bron";
				attribute<Gj_yr> V_ow_koude   (PlanRegio) := V_Koude                                            , Descr = "koudevraag van het leidingnet aan de primaire bron";

				attribute<Gj_yr> V_H2 (PlanRegio) := const(0.0[GJ_yr], PlanRegio); //TODO:remove
			}

			container Uitstoot
			{
				attribute<KG_yr> CO2_id_gas    (PlanRegio) := Verbruik/V_id_gas  * prijzen/Aardgas/CO2_GJ      , Descr = "CO2-emissies van gasverbruik door inpandige systemen";
				attribute<KG_yr> CO2_wd_gas    (PlanRegio) := Verbruik/V_wd_gas  * prijzen/Aardgas/CO2_GJ      , Descr = "CO2-emissies van gasverbruik in het wijkdistributienet";
				attribute<KG_yr> CO2_ow_gas    (PlanRegio) := Verbruik/V_ow_gas  * prijzen/Aardgas/CO2_GJ      , Descr = "CO2-emissies van gasverbruik bij de primaire bron";
				attribute<KG_yr> CO2_id_elek   (PlanRegio) := Verbruik/V_id_elek * prijzen/Elektriciteit/CO2_GJ, Descr = "CO2-emissies van elektriciteitsverbruik door inpandige systemen";
				attribute<KG_yr> CO2_wd_elek   (PlanRegio) := Verbruik/V_wd_elek * prijzen/Elektriciteit/CO2_GJ, Descr = "CO2-emissies van elektriciteitsverbruik in het wijkdistributienet";
				attribute<KG_yr> CO2_ow_elek   (PlanRegio) := Verbruik/V_ow_elek * prijzen/Elektriciteit/CO2_GJ, Descr = "CO2-emissies van elektriciteitsverbruik bij de primaire bron";
			}
		}
	}
}
