
//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) Hestia 2022 - PBL & TNO                                        //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

container TVW
{
	container gemeente
	{
		unit<uint32> gemeente_input
			:	StorageName     = "%HestiaDataDir%/TVW/Gemeente.csv"
			,	StorageType     = "gdal.vect"
			,	StorageReadOnly = "True"
			{
				attribute<string> label :=  uppercase(id__gm_code_);
			}

		unit<uint32> GM := RuimtelijkeData/StudieGebied/Gemeente
		{
			attribute<gemeente_input> input_rel := rlookup(GM_code, uppercase(gemeente_input/label));
			attribute<bool>           has_TVW   := isDefined(input_rel);
			attribute<nrAsl>          nr_Asl    := sum(TussenResultaten/StartJaar/BebouwingsComponenten/Woning/BO/nrAansluitingen, Invoer/RuimtelijkeData/StudieGebied/Buurt/Gemeente_rel[TussenResultaten/StartJaar/BebouwingsComponenten/Woning/BO/PlanRegio_rel]);
		}
	}

	container document
	{
		unit<uint32> document_input
			:	StorageName     = "%HestiaDataDir%/TVW/Document.csv"
			,	StorageType     = "gdal.vect"
			,	StorageReadOnly = "True"
			{
				attribute<string> label :=  uppercase(id__doc_code_);	
			}

		unit<uint32> DC := document_input
		{
			attribute<Class/doctype>   doctype_rel   := uint32(doc_type__code_);
			attribute<Class/docstatus> docstatus_rel := uint32(doc_status__tekst_);
			attribute<gemeente/GM>     GM_rel        := rlookup(gemeente__gem_code_, gemeente/GM/GM_code);
		}
	}
	
	container plan
	{
		unit<uint32> plantabel_input
			:	StorageName     = "%HestiaDataDir%/TVW/plan.csv"
			,	StorageType     = "gdal.vect"
			,	StorageReadOnly = "True"
			{
				attribute<string> label :=  uppercase(id__pln_code_);	
				attribute<planshape_input> shp_rel :=  rlookup(uppercase(id__pln_code_), uppercase(planshape_input/pln_code));	
			}
		unit<uint32> planshape_input_complex
			:	StorageName     = "%HestiaDataDir%/TVW/TVW_Plan.shp"
			,	StorageType     = "gdal.vect"
			,	StorageReadOnly = "True"
			{
				attribute<string> label :=  uppercase(pln_code);	

				attribute<bool> geom_ok := isDefined(geometry);

				attribute<geography/rdc_meter> geometry_RD (poly) := LatLongWgs842RD(geometry, geography/rdc_meter);
			}

		unit<uint32> planshape_input
			:	StorageName     = "%HestiaDataDir%/TVW/TVW_Plan_simplified.shp"
			,	StorageType     = "gdal.vect"
			,	StorageReadOnly = "True"
			{
				attribute<string> label :=  uppercase(pln_code);	

				attribute<bool> geom_ok := isDefined(geometry);

				attribute<geography/rdc_meter> geometry (poly);
				attribute<geography/rdc_meter> geometry_RD (poly) := geometry;
			}

		unit<uint32> PL := plantabel_input
		{
			attribute<geography/rdc_meter>  geometry (poly)    := planshape_input/geometry_RD[shp_rel], IntegrityCheck = "isDefined(this)";
			attribute<string>               Plan_naam          := plantabel_input/naam__tekst_;
			attribute<document/DC>          DC_rel             := isDefined(rlookup(document__doc_code_, document/DC/label)) ? rlookup(document__doc_code_, document/DC/label) : rlookup('DC' + substr(label, 2, 6), uppercase(document/DC/label)), IntegrityCheck = "isDefined(this)";
			attribute<gemeente/GM>          GM_rel             := isDefined(document/DC/GM_rel[DC_rel]) ? document/DC/GM_rel[DC_rel] : rlookup('GM' + substr(label, 2, 4), uppercase(gemeente/GM/GM_code)), IntegrityCheck = "isDefined(this)";

			attribute<Class/Plansoort>      Plansoort_rel      := uint32(Plansoort__code_)              , IntegrityCheck = "isDefined(this)";
			attribute<Class/Planstatus>     Planstatus_rel     := uint32(pln_planstatus_code__code_)    , IntegrityCheck = "isDefined(this)";
			attribute<Class/Techniekstatus> Techniekstatus_rel := uint32(pln_techniekstatus_code__code_), IntegrityCheck = "isDefined(this)";
			attribute<Class/Isolatiegraad>  Isolatiegraad_rel  := uint32(isolatiegraad_code__code_)     , IntegrityCheck = "isDefined(this)";
			attribute<Class/Installatie>    Installatie_rel    := uint32(installatie_code__code_)       , IntegrityCheck = "isDefined(this)";
			attribute<Class/Infrastructuur> Infrastructuur_rel := uint32(infrastructuur_code__code_)    , IntegrityCheck = "isDefined(this)";
			attribute<Class/Energiebron>    Energiebron_rel    := uint32(energiebron_code__code_)       , IntegrityCheck = "isDefined(this)";

			attribute<nrAsl>                nrAansluitingen    := VBO/Matching/VBO_count                , IntegrityCheck = "isDefined(this)";
		}

		unit<uint32> VBO := /Invoer/RuimtelijkeData/BAG/import/VBO
		{
			attribute<nrAsl> nr_Asl := const(1.0[nrAsl],.);

			container Matching
			{
				unit<uint32> p := VBO
				{
					attribute<geography/rdc_meter> xy (p) := VBO/geometry;
				}

				// driehoek wordt alleen gebruikt in workaround voor point_in_all_polygons voor GeoDmsVersion < 8.031				
				attribute<geography/rdc_meter> driehoek  (p, poly)  :=
					points2sequence(
						union_data(union_unit(p,p,p,p), p/xy, p/xy+point(0.1,0.0), p/xy+point(0.1,0.1), p/xy),
						union_data(union_unit(p,p,p,p), id(p), id(p), id(p), id(p)),
						union_data(union_unit(p,p,p,p), const(0,p), const(1,p), const(2,p), const(3,p))
									);
				parameter<string> piap_expr := 'point_in_all_polygons(p/xy, PL/geometry)';
				parameter<string> workaround := 'overlay_polygon(driehoek[geography/rdc_mm], PL/geometry[geography/rdc_mm])';
				unit<uint32> kruistabel  := =(GeoDmsVersion() > 8.0305) ? piap_expr : workaround;


				attribute<uint32> PL_count(p) := pcount(kruistabel/first_rel);
				
				attribute<uint32> P_count   (PL) := pcount(kruistabel/second_rel);
				attribute<nrAsl>  VBO_count (PL) := sum(nr_Asl[kruistabel/first_rel], kruistabel/second_rel);
			}

			container Techniekkeuze
			{
				attribute<bool>  Any_hWP  (VBO) := any(Class/Installatie/hWP [PL/Installatie_rel[Matching/kruistabel/second_rel]], Matching/kruistabel/first_rel);
				attribute<bool>  Any_eWP  (VBO) := any(Class/Installatie/eWP [PL/Installatie_rel[Matching/kruistabel/second_rel]], Matching/kruistabel/first_rel);
				attribute<bool>  Any_Wnet (VBO) := any(Class/Installatie/Wnet[PL/Installatie_rel[Matching/kruistabel/second_rel]], Matching/kruistabel/first_rel);
				attribute<bool>  Any_Hr   (VBO) := any(Class/Installatie/Hr  [PL/Installatie_rel[Matching/kruistabel/second_rel]], Matching/kruistabel/first_rel);

				attribute<nrAsl> Wnet (VBO) := float64(Any_Wnet && not(Any_hWP) && not(Any_eWP))*VBO/nr_Asl;
				parameter<nrAsl> hWP   := sum(float64(not(Any_Wnet) && not(Any_hWP) && Any_eWP)*VBO/nr_Asl);
				parameter<nrAsl> eWP   := sum(float64(not(Any_Wnet) && Any_hWP && not(Any_eWP))*VBO/nr_Asl);

				parameter<nrAsl> eWPhWP  := sum(float64(not(Any_Wnet) && Any_hWP && Any_eWP)*VBO/nr_Asl);
				parameter<nrAsl> eWPWnet := sum(float64(Any_Wnet && not(Any_hWP) && Any_eWP)*VBO/nr_Asl);
				parameter<nrAsl> hWPWnet := sum(float64(Any_Wnet && Any_hWP && not(Any_eWP))*VBO/nr_Asl);

				parameter<nrAsl> eWPhWPWnet := sum(float64(Any_Wnet && Any_hWP && Any_eWP)*VBO/nr_Asl);

			}
			
			container CBSKoppeling
			{	
				container VBONiveau
				{
					attribute<Uint32> MateVanStedelijkheidVBO (VBO) := /Geography/RegioIndelingen/Buurt/STED[buurt_rel][Uint32];
					attribute<nrAsl> ZeerSterkStedelijk      (VBO) := float64(MateVanStedelijkheidVBO == 1[Uint32]) *nr_Asl;
					attribute<nrAsl> SterkStedelijk 		 (VBO) := float64(MateVanStedelijkheidVBO == 2[Uint32]) *nr_Asl;
					attribute<nrAsl> MatigStedelijk 		 (VBO) := float64(MateVanStedelijkheidVBO == 3[Uint32]) *nr_Asl;
					attribute<nrAsl> WeinigStedelijk 		 (VBO) := float64(MateVanStedelijkheidVBO == 4[Uint32]) *nr_Asl;
					attribute<nrAsl> NietStedelijk 			 (VBO) := float64(MateVanStedelijkheidVBO == 5[Uint32]) *nr_Asl;
				  //attribute<nrAsl> Overigstedelijk 		 (VBO) := float64(MateVanStedelijkheidVBO == -99999999[Uint32] ) *nr_Asl;
				  
					attribute<Uint32> OmgevingsAdressenDichtheid (VBO) := /Geography/RegioIndelingen/Buurt/OAD[buurt_rel][Uint32];
				}
				
				container PlanNiveau
				{
					attribute<nrAsl>  VBO_count_ZeerSterkStedelijk (PL) := sum(VBONiveau/ZeerSterkStedelijk[Matching/kruistabel/first_rel], Matching/kruistabel/second_rel);
					attribute<nrAsl>  VBO_count_SterkStedelijk     (PL) := sum(VBONiveau/SterkStedelijk    [Matching/kruistabel/first_rel], Matching/kruistabel/second_rel);
					attribute<nrAsl>  VBO_count_MatigStedelijk 	   (PL) := sum(VBONiveau/MatigStedelijk	   [Matching/kruistabel/first_rel], Matching/kruistabel/second_rel);
					attribute<nrAsl>  VBO_count_WeinigStedelijk    (PL) := sum(VBONiveau/WeinigStedelijk   [Matching/kruistabel/first_rel], Matching/kruistabel/second_rel);
					attribute<nrAsl>  VBO_count_NietStedelijk 	   (PL) := sum(VBONiveau/NietStedelijk	   [Matching/kruistabel/first_rel], Matching/kruistabel/second_rel);
				  //attribute<nrAsl>  VBO_count_Overigstedelijk    (PL) := sum(VBONiveau/Overigstedelijk   [Matching/kruistabel/first_rel], Matching/kruistabel/second_rel);
				  
				  	attribute<Uint32>  OmgevingsAdressenDichtheid  (PL) := mean(VBONiveau/OmgevingsAdressenDichtheid	   [Matching/kruistabel/first_rel], Matching/kruistabel/second_rel);

				}		
			}
		}
		
		unit<uint32> woning := /Invoer/RuimtelijkeData/BAG/vbo_woonfunctie_studiegebied
		{
			attribute<nrAsl> nr_Asl := const(1.0[nrAsl],.);

			container Matching
			{
				unit<uint32> p := woning
				{
					attribute<geography/rdc_meter> xy (p) := woning/geometry;
				}

				// driehoek wordt alleen gebruikt in workaround voor point_in_all_polygons voor GeoDmsVersion < 8.031				
				attribute<geography/rdc_meter> driehoek  (p, poly)  :=
					points2sequence(
						union_data(union_unit(p,p,p,p), p/xy, p/xy+point(0.1,0.0), p/xy+point(0.1,0.1), p/xy),
						union_data(union_unit(p,p,p,p), id(p), id(p), id(p), id(p)),
						union_data(union_unit(p,p,p,p), const(0,p), const(1,p), const(2,p), const(3,p))
									);
				parameter<string> piap_expr := 'point_in_all_polygons(p/xy, PL/geometry)';
				parameter<string> workaround := 'overlay_polygon(driehoek[geography/rdc_mm], PL/geometry[geography/rdc_mm])';
				unit<uint32> kruistabel  := =(GeoDmsVersion() > 8.0305) ? piap_expr : workaround;
				
				attribute<woning> invert_first_rel (woning) := invert(kruistabel/first_rel);
				attribute<kruistabel> woning_kruistabel_rel (woning) := rlookup(invert_first_rel, kruistabel/first_rel);

				attribute<uint32> PL_count(p) := pcount(kruistabel/first_rel);
				
				attribute<Invoer/RuimtelijkeData/Bebouwing/Woning>   				ruimtelijkedata_rel  (woning):= rlookup(woning/identificatie, /Invoer/RuimtelijkeData/Bebouwing/Woning/code);							
				attribute<BeginSituatie/StartingStateComponenten/Woning/PreStartJaar>   StartingStateComponenten_rel  (woning):= rlookup(woning/identificatie, /BeginSituatie/StartingStateComponenten/Woning/PreStartJaar/code);							
			}
			
			container eigendom 
			{
				attribute<nrAsl> Koop     (woning) := float64(woning/eigendom_rel == Classifications/Eigendom/V/Koop)     * nr_Asl;
				attribute<nrAsl> PartHuur (woning) := float64(woning/eigendom_rel == Classifications/Eigendom/V/Parthuur) * nr_Asl;
				attribute<nrAsl> WoonCorp (woning) := float64(woning/eigendom_rel == Classifications/Eigendom/V/Wooncorp) * nr_Asl;			
			}
					
			container StandaardGasvraag
			{ 
				attribute<Units/GJ_yr> RV (woning) := /BeginSituatie/StartingStateComponenten/Woning/PreStartJaar/BemeterdeGebouwInput_rel/RVb[Matching/StartingStateComponenten_rel] == /Classifications/BemeterdeGebouwInput/V/Gas 
				? /BeginSituatie/StartingStateComponenten/Woning/Results/Func2Meter/metervraag_per_product/RVb[Matching/ruimtelijkedata_rel] + /BeginSituatie/StartingStateComponenten/Woning/Results/Func2Meter/metervraag_per_product/RVp[Matching/ruimtelijkedata_rel]
				: 0[GJ_yr];
				
				attribute<Units/GJ_yr> TW (woning) := /BeginSituatie/StartingStateComponenten/Woning/PreStartJaar/BemeterdeGebouwInput_rel/TWb[Matching/StartingStateComponenten_rel] == /Classifications/BemeterdeGebouwInput/V/Gas 
				? /BeginSituatie/StartingStateComponenten/Woning/Results/Func2Meter/metervraag_per_product/TWb[Matching/ruimtelijkedata_rel] + /BeginSituatie/StartingStateComponenten/Woning/Results/Func2Meter/metervraag_per_product/twp[Matching/ruimtelijkedata_rel]
				: 0[GJ_yr];
			}
			
			container isolatie
			{
				container Any_IsolatiegraadKlasse
				{
					attribute<bool>  onbekend  			(woning) := any(Class/Isolatiegraad/onbekend 						[PL/Isolatiegraad_rel[Matching/kruistabel/second_rel]], Matching/kruistabel/first_rel);
					attribute<bool>  GeenMaatregelen  	(woning) := any(Class/Isolatiegraad/geen_maatregelen 				[PL/Isolatiegraad_rel[Matching/kruistabel/second_rel]], Matching/kruistabel/first_rel);
					attribute<bool>  IsolatieGeenNiveau (woning) := any(Class/Isolatiegraad/isolatie_geen_specifiek_niveau 	[PL/Isolatiegraad_rel[Matching/kruistabel/second_rel]], Matching/kruistabel/first_rel);
					attribute<bool>  StandaardEnStreef  (woning) := any(Class/Isolatiegraad/standaard_en_streefwaarden 		[PL/Isolatiegraad_rel[Matching/kruistabel/second_rel]], Matching/kruistabel/first_rel);
					attribute<bool>  ALabel  			(woning) := any(Class/Isolatiegraad/A 								[PL/Isolatiegraad_rel[Matching/kruistabel/second_rel]], Matching/kruistabel/first_rel);
					attribute<bool>  BLabel  			(woning) := any(Class/Isolatiegraad/B								[PL/Isolatiegraad_rel[Matching/kruistabel/second_rel]], Matching/kruistabel/first_rel);
					attribute<bool>  CLabel  			(woning) := any(Class/Isolatiegraad/C								[PL/Isolatiegraad_rel[Matching/kruistabel/second_rel]], Matching/kruistabel/first_rel);
					attribute<bool>  DLabel  			(woning) := any(Class/Isolatiegraad/D								[PL/Isolatiegraad_rel[Matching/kruistabel/second_rel]], Matching/kruistabel/first_rel);
					attribute<bool>  DC1940AB  			(woning) := any(Class/Isolatiegraad/DC_1940_AB_overig 				[PL/Isolatiegraad_rel[Matching/kruistabel/second_rel]], Matching/kruistabel/first_rel);
					attribute<bool>  DWonenBUtil  		(woning) := any(Class/Isolatiegraad/D_wonen_B_util 					[PL/Isolatiegraad_rel[Matching/kruistabel/second_rel]], Matching/kruistabel/first_rel);
					attribute<bool>  kWhM2  			(woning) := any(Class/Isolatiegraad/kWh_m2_AB 						[PL/Isolatiegraad_rel[Matching/kruistabel/second_rel]], Matching/kruistabel/first_rel);
				}
				
				attribute<Classifications/schillabel>     schillabel     	   (woning) := BeginSituatie/StartingStateComponenten/Woning/Results/schillabel_rel[Matching/ruimtelijkedata_rel];
				attribute<Classifications/BouwjaarWoning> bouwjaarklasse 	   (woning) := woning/bouwjaarwoning_rel;
				attribute<Classifications/WoningType>     woningtype     	   (woning) := woning/woningtype_rel;
				attribute<Class/Isolatiegraad>            isolatiegraad_klasse (woning) := PL/isolatiegraad_rel[Matching/kruistabel/second_rel][Matching/woning_kruistabel_rel];				

				unit<uint32> woningtype_bouwjaarklasse := combine_unit(Classifications/WoningType, Classifications/BouwjaarWoning);
				attribute<woningtype_bouwjaarklasse> combine_type_bouwjaar (woning) :=combine_data(woningtype_bouwjaarklasse, woningtype, bouwjaarklasse);
				
				attribute<Classifications/RV_besparing_labelsprong> RV_besparing_labelsprong_huidig_rel (woning) := 
					combine_data(Classifications/RV_besparing_labelsprong, combine_type_bouwjaar, schillabel);
								
				container optimistisch
				{
					attribute<Classifications/schillabel> beoogd_energielabel (woning) := 
						Any_IsolatiegraadKlasse/onbekend								? schillabel : 
						Any_IsolatiegraadKlasse/GeenMaatregelen							? schillabel : 
						Any_IsolatiegraadKlasse/IsolatieGeenNiveau 			   			? Classifications/schillabel/V/B :
						Any_IsolatiegraadKlasse/StandaardEnStreef 				   		? Classifications/schillabel/V/A :
						Any_IsolatiegraadKlasse/ALabel 									? Classifications/schillabel/V/A :
						Any_IsolatiegraadKlasse/BLabel									? Classifications/schillabel/V/B :
						Any_IsolatiegraadKlasse/CLabel								    ? Classifications/schillabel/V/C :
						Any_IsolatiegraadKlasse/DLabel									? Classifications/schillabel/V/D :
						Any_IsolatiegraadKlasse/DC1940AB  && woning/bouwjaar < 1945w 	? Classifications/schillabel/V/C :
						Any_IsolatiegraadKlasse/DC1940AB  && woning/bouwjaar > 1945w 	? Classifications/schillabel/V/A :
						Any_IsolatiegraadKlasse/DWonenBUtil							   	? Classifications/schillabel/V/D :
						Any_IsolatiegraadKlasse/kWhM2								    ? Classifications/schillabel/V/A : schillabel;
					
					attribute<Classifications/RV_besparing_labelsprong> RV_besparing_labelsprong_beoogd_rel (woning) := 
						combine_data(Classifications/RV_besparing_labelsprong, combine_type_bouwjaar, beoogd_energielabel);
					
					attribute<float64> RVFactorHuidig   (woning) := Classifications/RV_besparing_labelsprong/besparing_F[RV_besparing_labelsprong_huidig_rel];
					attribute<float64> RVFactorBeoogd   (woning) := Classifications/RV_besparing_labelsprong/besparing_F[RV_besparing_labelsprong_beoogd_rel];
					attribute<float64> RVFactorUitkomst (woning) := RVFactorBeoogd / RVFactorHuidig;
					
					attribute<float64> gasbesparingsfactor_schillabel (woning) := beoogd_energielabel < schillabel ? 1[float64] - RVFactorUitkomst : 0d;
					
					attribute<GJ_yr> gasbesparing_RV_isolatie (woning) := gasbesparingsfactor_schillabel * StandaardGasvraag/RV;
					attribute<GJ_yr> gas_RV_na_labelsprong    (woning) := StandaardGasvraag/RV - gasbesparing_RV_isolatie;
				}
				
				container pessimistisch
				{
					attribute<Classifications/schillabel> beoogd_energielabel (woning) := 
						Any_IsolatiegraadKlasse/onbekend								? schillabel : 
						Any_IsolatiegraadKlasse/GeenMaatregelen							? schillabel : 
						Any_IsolatiegraadKlasse/IsolatieGeenNiveau 			   			? Classifications/schillabel/V/C :
						Any_IsolatiegraadKlasse/StandaardEnStreef 				   		? Classifications/schillabel/V/A :
						Any_IsolatiegraadKlasse/ALabel 									? Classifications/schillabel/V/A :
						Any_IsolatiegraadKlasse/BLabel									? Classifications/schillabel/V/B :
						Any_IsolatiegraadKlasse/CLabel								    ? Classifications/schillabel/V/C :
						Any_IsolatiegraadKlasse/DLabel									? Classifications/schillabel/V/D :
						Any_IsolatiegraadKlasse/DC1940AB  && woning/bouwjaar < 1945w 	? Classifications/schillabel/V/D :
						Any_IsolatiegraadKlasse/DC1940AB  && woning/bouwjaar > 1945w 	? Classifications/schillabel/V/B :
						Any_IsolatiegraadKlasse/DWonenBUtil							   	? Classifications/schillabel/V/D :
						Any_IsolatiegraadKlasse/kWhM2								    ? Classifications/schillabel/V/B : schillabel;
					
					attribute<Classifications/RV_besparing_labelsprong> RV_besparing_labelsprong_beoogd_rel (woning) := 
						combine_data(Classifications/RV_besparing_labelsprong, combine_type_bouwjaar, beoogd_energielabel);
					
					attribute<float64> RVFactorHuidig   (woning) := Classifications/RV_besparing_labelsprong/besparing_F[RV_besparing_labelsprong_huidig_rel];
					attribute<float64> RVFactorBeoogd   (woning) := Classifications/RV_besparing_labelsprong/besparing_F[RV_besparing_labelsprong_beoogd_rel];
					attribute<float64> RVFactorUitkomst (woning) := RVFactorBeoogd / RVFactorHuidig;
					
					attribute<float64> gasbesparingsfactor_schillabel (woning) := beoogd_energielabel < schillabel ? 1[float64] - RVFactorUitkomst : 0d;
					
					attribute<GJ_yr> gasbesparing_RV_isolatie (woning) := gasbesparingsfactor_schillabel * StandaardGasvraag/RV;
					attribute<GJ_yr> gas_RV_na_labelsprong    (woning) := StandaardGasvraag/RV - gasbesparing_RV_isolatie;
				}
			}
			
			container Techniekkeuze
			{
				container OnbekendCombinatieCheck
				{
					attribute<bool>   WoningInMaarEenPlan (woning) 				 := Matching/PL_count = 1 ;
					unit<uint32>      OnbekendCombinatieWoningen 				 := subset(Any_onbekend && (Any_hWP || Any_eWP || Any_Wnet || Any_Hr) && EenPlan);
					parameter<uint32> AantalWoningenOnebekendCombinatieEnEenPlan := count(OnbekendCombinatieWoningen/nr_OrgEntity);
					parameter<bool>   GeenWoningenMetOnbekendCombinatie 		 := AantalWoningenOnebekendCombinatieEnEenPlan = 0 ? 1  0;
				}
								
				attribute<bool>  Any_hWP  (woning) := any(Class/Installatie/hWP [PL/Installatie_rel[Matching/kruistabel/second_rel]], Matching/kruistabel/first_rel);
				attribute<bool>  Any_eWP  (woning) := any(Class/Installatie/eWP [PL/Installatie_rel[Matching/kruistabel/second_rel]], Matching/kruistabel/first_rel);
				attribute<bool>  Any_Wnet (woning) := any(Class/Installatie/Wnet[PL/Installatie_rel[Matching/kruistabel/second_rel]], Matching/kruistabel/first_rel);
				attribute<bool>  Any_Hr   (woning) := any(Class/Installatie/Hr  [PL/Installatie_rel[Matching/kruistabel/second_rel]], Matching/kruistabel/first_rel);
				attribute<bool>  Any_onbekend   (woning) := any(Class/Installatie/onbekend  [PL/Installatie_rel[Matching/kruistabel/second_rel]], Matching/kruistabel/first_rel);

				attribute<nrAsl> Only_hWP  (woning) := float64(Any_hWP && not(Any_eWP) && not(Any_Wnet) && not(Any_Hr))*woning/nr_Asl;
				attribute<nrAsl> Only_eWP  (woning) := float64(Any_eWP && not(Any_hWP) && not(Any_Wnet) && not(Any_Hr))*woning/nr_Asl;
				attribute<nrAsl> Only_Wnet (woning) := float64(Any_Wnet && not(Any_hWP) && not(Any_eWP) && not(Any_Hr))*woning/nr_Asl;
				attribute<nrAsl> Only_Hr   (woning) := float64(Any_Hr && not(Any_hWP) && not(Any_eWP) && not(Any_Wnet))*woning/nr_Asl;
				attribute<nrAsl> Only_onbekend (woning) := float64(Any_onbekend && not(Any_hWP) && not(Any_eWP) && not(Only_Wnet) && not(Any_Hr))*woning/nr_Asl;
				attribute<bool>  Only_onbekend_bool (woning) := Any_onbekend && not(Any_hWP) && not(Any_eWP) && not(Only_Wnet) && not(Any_Hr);
				
				attribute<Class/Installatie> beoogde_installatie(woning) := PL/installatie_rel[Matching/kruistabel/second_rel][Matching/woning_kruistabel_rel];
				
				container optimistisch{
					attribute<float64> gasbesparingsfactor_installatie_RV (woning) := 
						Any_Wnet || Any_eWP 	  ? 1d : 
						Any_hWP && isolatie/optimistisch/beoogd_energielabel = Classifications/schillabel/V/A ? 0.65d :
						Any_hWP && isolatie/optimistisch/beoogd_energielabel = Classifications/schillabel/V/B ? 0.63d :
						Any_hWP && isolatie/optimistisch/beoogd_energielabel = Classifications/schillabel/V/C ? 0.59d :
						Any_hWP && isolatie/optimistisch/beoogd_energielabel = Classifications/schillabel/V/D ? 0.52d :
						Any_hWP && isolatie/optimistisch/beoogd_energielabel = Classifications/schillabel/V/E ? 0.47d :
						Any_hWP && isolatie/optimistisch/beoogd_energielabel = Classifications/schillabel/V/F ? 0.43d :
						Any_hWP && isolatie/optimistisch/beoogd_energielabel = Classifications/schillabel/V/N ? 0.42d : 0d;
					
					attribute<float64> gasbesparingsfactor_installatie_TW (woning) := 
						Any_Wnet || Any_eWP 	  ? 1d : 0d;
						
					attribute<GJ_yr> gas_na_isolatie_installatie_RV (woning) := 
						gasbesparingsfactor_installatie_RV = 1d ? 0[GJ_yr] : isolatie/optimistisch/gas_RV_na_labelsprong * (1d - gasbesparingsfactor_installatie_RV);
						
					attribute<GJ_yr> gas_na_isolatie_installatie_TW (woning) := 
						gasbesparingsfactor_installatie_TW = 1d ? 0[GJ_yr] : StandaardGasvraag/TW  * (1d - gasbesparingsfactor_installatie_TW);
					
					attribute<GJ_yr> gasbesparing_RV_isolatie_installatie (woning) := StandaardGasvraag/RV - gas_na_isolatie_installatie_RV;
					attribute<GJ_yr> gasbesparing_TW_isolatie_installatie (woning) := StandaardGasvraag/TW - gas_na_isolatie_installatie_TW;
					attribute<GJ_yr> gasbesparing_totaal 			      (woning) := gasbesparing_RV_isolatie_installatie + gasbesparing_TW_isolatie_installatie;
				}
				
				container pessimistisch{
					attribute<float64> gasbesparingsfactor_installatie_RV (woning) := 
						Any_Hr  || Only_onbekend_bool ? 0d : 
						Any_hWP && isolatie/pessimistisch/beoogd_energielabel = Classifications/schillabel/V/A ? 0.65d :
						Any_hWP && isolatie/pessimistisch/beoogd_energielabel = Classifications/schillabel/V/B ? 0.63d :
						Any_hWP && isolatie/pessimistisch/beoogd_energielabel = Classifications/schillabel/V/C ? 0.59d :
						Any_hWP && isolatie/pessimistisch/beoogd_energielabel = Classifications/schillabel/V/D ? 0.52d :
						Any_hWP && isolatie/pessimistisch/beoogd_energielabel = Classifications/schillabel/V/E ? 0.47d :
						Any_hWP && isolatie/pessimistisch/beoogd_energielabel = Classifications/schillabel/V/F ? 0.43d :
						Any_hWP && isolatie/pessimistisch/beoogd_energielabel = Classifications/schillabel/V/N ? 0.42d : 1d;
					
					attribute<float64> gasbesparingsfactor_installatie_TW (woning) := 
						Any_Hr  || Only_onbekend_bool || Any_hWP ? 0d : 1d;

					attribute<GJ_yr> gas_na_isolatie_installatie_RV (woning) := 
						gasbesparingsfactor_installatie_RV = 1d ? 0[GJ_yr] : isolatie/optimistisch/gas_RV_na_labelsprong * (1d - gasbesparingsfactor_installatie_RV);
						
					attribute<GJ_yr> gas_na_isolatie_installatie_TW (woning) := 
						gasbesparingsfactor_installatie_TW = 1d ? 0[GJ_yr] : StandaardGasvraag/TW  * (1d - gasbesparingsfactor_installatie_TW);
					
					attribute<GJ_yr> gasbesparing_RV_isolatie_installatie (woning) := StandaardGasvraag/RV - gas_na_isolatie_installatie_RV;
					attribute<GJ_yr> gasbesparing_TW_isolatie_installatie (woning) := StandaardGasvraag/TW - gas_na_isolatie_installatie_TW;
					attribute<GJ_yr> gasbesparing_totaal 			      (woning) := gasbesparing_RV_isolatie_installatie + gasbesparing_TW_isolatie_installatie;
				}
			
			container optellingen
				{
					container Alleen
					{
						parameter<nrAsl> hWP     	  := sum(Only_hWP);
						parameter<nrAsl> eWP     	  := sum(Only_eWP);
						parameter<nrAsl> Wnet    	  := sum(Only_Wnet);
						parameter<nrAsl> Hr       	  := sum(Only_Hr);
						parameter<nrAsl> Onbekend 	  := sum(Only_onbekend);
						
						parameter<nrAsl> hWPeWP  	  := sum(float64(    Any_hWP  &&     Any_eWP  && not(Any_Wnet) && not(Any_Hr))*woning/nr_Asl);
						parameter<nrAsl> hWPWnet 	  := sum(float64(    Any_hWP  && not(Any_eWP) &&     Any_Wnet  && not(Any_Hr))*woning/nr_Asl);
						parameter<nrAsl> hWPHr   	  := sum(float64(    Any_hWP  && not(Any_eWP) && not(Any_Wnet) &&     Any_Hr) *woning/nr_Asl);
						parameter<nrAsl> eWPWnet 	  := sum(float64(not(Any_hWP) &&     Any_eWP  &&     Any_Wnet  && not(Any_Hr))*woning/nr_Asl);
						parameter<nrAsl> eWPHr   	  := sum(float64(not(Any_hWP) &&     Any_eWP  && not(Any_Wnet) &&     Any_Hr) *woning/nr_Asl);
						parameter<nrAsl> WnetHr  	  := sum(float64(not(Any_hWP) && not(Any_eWP) &&     Any_Wnet  &&     Any_Hr) *woning/nr_Asl);
						
						parameter<nrAsl> hWPeWPWnet   := sum(float64(    Any_hWP  &&     Any_eWP  &&     Any_Wnet  && not(Any_Hr))*woning/nr_Asl);
						parameter<nrAsl> hWPeWPHr     := sum(float64(    Any_hWP  &&     Any_eWP  && not(Any_Wnet) &&     Any_Hr) *woning/nr_Asl);
						parameter<nrAsl> hWPWnetHr    := sum(float64(    Any_hWP  && not(Any_eWP) &&     Any_Wnet  &&     Any_Hr) *woning/nr_Asl);
						parameter<nrAsl> eWPWnetHr    := sum(float64(not(Any_hWP) &&     Any_eWP  &&     Any_Wnet  &&     Any_Hr) *woning/nr_Asl);
						
						parameter<nrAsl> hWPeWPWnetHr := sum(float64(    Any_hWP  &&     Any_eWP  &&     Any_Wnet  &&     Any_Hr) *woning/nr_Asl);
					}
					
					container Minstens
					{
						parameter<nrAsl> hWP      := sum(float64(Any_hWP)     *woning/nr_Asl);
						parameter<nrAsl> eWP      := sum(float64(Any_eWP)     *woning/nr_Asl);
						parameter<nrAsl> Wnet     := sum(float64(Any_Wnet)    *woning/nr_Asl);
						parameter<nrAsl> Hr       := sum(float64(Any_Hr)      *woning/nr_Asl);
						parameter<nrAsl> Onbekend := sum(float64(Any_onbekend)*woning/nr_Asl);
						
						parameter<nrAsl> hWPeWP  	  := sum(float64( Any_hWP  && Any_eWP )*woning/nr_Asl);
						parameter<nrAsl> hWPWnet 	  := sum(float64( Any_hWP  && Any_Wnet)*woning/nr_Asl);
						parameter<nrAsl> hWPHr   	  := sum(float64( Any_hWP  && Any_Hr  )*woning/nr_Asl);
						parameter<nrAsl> eWPWnet 	  := sum(float64( Any_eWP  && Any_Wnet)*woning/nr_Asl);
						parameter<nrAsl> eWPHr   	  := sum(float64( Any_eWP  && Any_Hr  )*woning/nr_Asl);
						parameter<nrAsl> WnetHr  	  := sum(float64( Any_Wnet && Any_Hr  )*woning/nr_Asl);
						
						parameter<nrAsl> hWPeWPWnet   := sum(float64( Any_hWP  && Any_eWP  && Any_Wnet)*woning/nr_Asl);
						parameter<nrAsl> hWPeWPHr     := sum(float64( Any_hWP  && Any_eWP  && Any_Hr  )*woning/nr_Asl);
						parameter<nrAsl> hWPWnetHr    := sum(float64( Any_hWP  && Any_Wnet && Any_Hr  )*woning/nr_Asl);
						parameter<nrAsl> eWPWnetHr    := sum(float64( Any_eWP  && Any_Wnet && Any_Hr  )*woning/nr_Asl);
						
						parameter<nrAsl> hWPeWPWnetHr := sum(float64( Any_hWP  && Any_eWP  && Any_Wnet && Any_Hr) *woning/nr_Asl);
					}
				}
			}
			
			container planniveau_output
			{					
					attribute<uint32> P_count        (PL) := pcount(Matching/kruistabel/second_rel);
					attribute<nrAsl>  VBO_count      (PL) := sum(woning/nr_Asl[Matching/kruistabel/first_rel], Matching/kruistabel/second_rel);
					attribute<nrAsl>  koop_count     (PL) := sum(eigendom/Koop[Matching/kruistabel/first_rel], Matching/kruistabel/second_rel);
					attribute<nrAsl>  parthuur_count (PL) := sum(eigendom/PartHuur[Matching/kruistabel/first_rel], Matching/kruistabel/second_rel);
					attribute<nrAsl>  wooncorp_count (PL) := sum(eigendom/WoonCorp[Matching/kruistabel/first_rel], Matching/kruistabel/second_rel);
					
					attribute<GJ_yr>  gasbesparing_totaal_optimistisch  (PL) := sum(Techniekkeuze/optimistisch/gasbesparing_totaal[Matching/kruistabel/first_rel], Matching/kruistabel/second_rel);
					attribute<GJ_yr>  gasbesparing_totaal_pessimistisch (PL) := sum(Techniekkeuze/pessimistisch/gasbesparing_totaal[Matching/kruistabel/first_rel], Matching/kruistabel/second_rel);
			}
		}
	}

	container Class
		{
			unit<uint32> Plansoort: nrofrows = 4
			{
				attribute<string> label :  [ 'info ontbreekt', 'onderzoek', 'voorbereidend', 'uitvoeren'];
				attribute<string> name  := AsItemName(label), DialogType = "LabelText";

				container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
			}

			unit<uint32> Techniekstatus: nrofrows = 11
			{
				attribute<string> label :  [ 'definitief', 'geen keuze gemaakt', 'geen techniekkeuze, focus op isolatie',
					 'kansrijke optie', 'niet van toepassing', 'onbekend', 'onderzoekend',
					  'verkennend', 'voorkeursoptie', 'voorlopige keuze', 'voorsorterend'];
				attribute<string> name  := AsItemName(label), DialogType = "LabelText";

				container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
			}

			unit<uint32> Planstatus: nrofrows = 11
			{
				attribute<string> label :  [ 'afwachtend', 'concept', 'definitief', 'uitvoerend',
					 'kansrijke optie', 'onbekend', 'onderzoekend', 'orienterend',
					  'richtinggevend', 'verkennend', 'voorbereidend'];
				attribute<string> name  := AsItemName(label), DialogType = "LabelText";

				container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
			}

			unit<uint32> Docstatus: nrofrows = 5
			{
				attribute<string> label :  [ 'info ontbreekt', 'vastgesteld door raad', 'naar raad gestuurd', 'concept te inzage', 'vastgesteld door college'];
				attribute<string> name  := AsItemName(label), DialogType = "LabelText";

				container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
			}

			unit<uint32> Doctype: nrofrows = 4
			{
				attribute<string> label :  [ 'info ontbreekt', 'transitievisie', 'bijlage bij transitievisie', 'anders'];
				attribute<string> name  := AsItemName(label), DialogType = "LabelText";

				container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
			}

			unit<uint32> Isolatiegraad: nrofrows = 11
			{
				attribute<string> label :  [ 'onbekend', 'geen maatregelen', 'isolatie, geen specifiek niveau benoemd', 'standaard en streefwaarden', 
					'schillabel A+', 'Schillabel B+', 'Schillabel C+', 'Schillabel D+', 'Schillabel D/C (<1940) A/B (overig)'
					,'Schillabel D+ (wonen) B+ (util)','Doelstelling in kWh/m2 (vergelijkbaar Schillabel A/B)'];
				attribute<string> name  := AsItemName(label), DialogType = "LabelText";
				
				attribute<bool> onbekend   							:= strcount(label, 'onbekend')   > 0;
				attribute<bool> geen_maatregelen   					:= strcount(label, 'geen maatregelen')   > 0;
				attribute<bool> isolatie_geen_specifiek_niveau   	:= strcount(label, 'isolatie, geen specifiek niveau benoemd')   > 0;
				attribute<bool> standaard_en_streefwaarden   		:= strcount(label, 'standaard en streefwaarden')   > 0;
				attribute<bool> A   								:= strcount(label, 'schillabel A+')   > 0;
				attribute<bool> B   								:= strcount(label, 'schillabel B+')   > 0;
				attribute<bool> C   								:= strcount(label, 'schillabel C+')   > 0;
				attribute<bool> D   								:= strcount(label, 'schillabel D+')   > 0;
				attribute<bool> DC_1940_AB_overig   				:= strcount(label, 'Schillabel D/C (<1940) A/B (overig)')   > 0;
				attribute<bool> D_wonen_B_util   					:= strcount(label, 'Schillabel D+ (wonen) B+ (util)')   > 0;
				attribute<bool> kWh_m2_AB   						:= strcount(label, 'Doelstelling in kWh/m2 (vergelijkbaar Schillabel A/B)')   > 0;

				container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
			}

			unit<uint32> Installatie: nrofrows = 17
			{
				attribute<string> label :  [ 'onbekend', 'Hr', 'hWP', 'eWP', 
					'Wnet', 'hWP,Hr', 'hWP,eWP', 'hWP,eWP', 'eWP,Wnet'
					,'eWP,Hr','Wnet, Hr', 'Wnet, hWP', 'hWP,Wnet,Hr', 'eWP,Wnet,Hr', 'hWP,eWP,Hr', 'hWP,eWP,Wnet', 'hWP,eWP,Wnet,Hr'];
				attribute<string> name  := AsItemName(label), DialogType = "LabelText";

				attribute<bool> onbekend   := strcount(label, 'onbekend')   > 0;
				attribute<bool> Hr   := strcount(label, 'Hr')   > 0;
				attribute<bool> hWP  := strcount(label, 'hWP')  > 0;
				attribute<bool> eWP  := strcount(label, 'eWP')  > 0;
				attribute<bool> Wnet := strcount(label, 'Wnet') > 0;

				container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
			}

			unit<uint32> Infrastructuur: nrofrows = 7
			{
				attribute<string> label :  [ 'onbekend', 'niet van toepassing', 'E', 'E,G', 'E,W', 'E,W,G', 'E,W,K'];
				attribute<string> name  := AsItemName(label), DialogType = "LabelText";

				attribute<bool> E := strcount(label, 'E') > 0;
				attribute<bool> G := strcount(label, 'G') > 0;
				attribute<bool> W := strcount(label, 'W') > 0;
				attribute<bool> K := strcount(label, 'K') > 0;

				container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
			}

			unit<uint32> Energiebron: nrofrows = 56
			{
				attribute<string> label :  [ 'aquathermie', 'aquathermie, asfalt', 'aquathermie, bestaand warmtenet', 'aquathermie, bestaand warmtenet, WKO', 
					'aquathermie, geothermie', 'aquathermie, geothermie, restwarmte', 'aquathermie, geothermie, WKO', 'aquathermie, geothermie, zon', 'aquathermie, hernieuwbaar gas'
					,'aquathermie, restwarmte','aquathermie, restwarmte, asfalt', 'aquathermie, restwarmte, geothermie', 'aquathermie, restwarmte, hernieuwbaar gas',
					'aquathermie, restwarmte, WKO, geothermie', 'aquathermie, restwarmte, zon', 'aquathermie, WKO', 'aquathermie, WKO, biomassa'
					, 'aquathermie, WKO, collectieve warmtepomp', 'aquathermie, WKO, geothermie', 'aquathermie, WKO, hernieuwbaar gas', 'aquathermie, WKO, restwarmte'
					, 'aquathermie, WKO, zon', 'aquathermie, zon', 'aquathermie, zon, asfalt', 'aquathermie, zon, collectieve warmtepomp', 'biomassa', 'biomassa, geothermie',
					 'biomassa, zon, hernieuwbaar gas', 'collectieve warmtepomp', 'diverse opties mogelijk (>3 genoemd)', 'geothermie', 'geothermie, collectieve warmtepomp',
					 'geothermie, hernieuwbaar gas', 'geothermie, restwarmte', 'geothermie, restwarmte, biomassa', 'geothermie, zon, collectieve warmtepomp', 'hernieuwbaar gas'
					 , 'hernieuwbaar gas, biomassa', 'hernieuwbaar gas, WKO', 'niet specifiek benoemd', 'niet van toepassing', 'Onbekend', 'restwarmte', 'restwarmte, biomassa',
					 'restwarmte, geothermie, collectieve warmtepomp', 'restwarmte, hernieuwbaar gas', 'restwarmte, WKO', 'restwarmte, WKO, collectieve warmtepomp',
					 'restwarmte, WKO, hernieuwbaar gas', 'restwarmte, zon', 'WKO', 'WKO, collectieve warmtepomp', 'WKO, zon', 'WKO, zon, hernieuwbaar gas', 'zon', 'zon, hernieuwbaar gas'];
				attribute<string> name  := AsItemName(label), DialogType = "LabelText";

				attribute<bool> aquathermie            := strcount(label, 'aquathermie')            > 0;
				attribute<bool> asfalt                 := strcount(label, 'asfalt')                 > 0;
				attribute<bool> bestaand_warmtenet     := strcount(label, 'bestaand warmtenet')     > 0;
				attribute<bool> WKO                    := strcount(label, 'WKO')                    > 0;
				attribute<bool> geothermie             := strcount(label, 'geothermie')             > 0;
				attribute<bool> restwarmte             := strcount(label, 'restwarmte')             > 0;
				attribute<bool> zon                    := strcount(label, 'zon')                    > 0;
				attribute<bool> hernieuwbaar_gas       := strcount(label, 'hernieuwbaar gas')       > 0;
				attribute<bool> biomassa               := strcount(label, 'biomassa')               > 0;
				attribute<bool> collectieve_warmtepomp := strcount(label, 'collectieve warmtepomp') > 0;

				container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
			}
		}
}