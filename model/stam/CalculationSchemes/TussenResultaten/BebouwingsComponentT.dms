//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) VESTA 2020 - Planbureau voor de Leefomgeving                   //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

template BebouwingsComponentT
{
	// begin case parameters
	parameter<string> BCname;
	parameter<bool>   HasResterendFactors;
	container         ResterendFactorMaps;
	unit<uint32>      ModelObject;
	attribute<bool>   SchilSprong_sel(Classifications/SchilSprong);
	container         LocatieSpecifiekeOpties;
	container         VraagKentallenComponent;
	parameter<string> NcwRefBase;
	// end of case parameters
	
	unit<uint8> PrijzenAardgas := Prijzen/AardGas/Staffel;

	parameter<Classifications/BebouwingsComponent>  BC_rel   := rlookup(BCname, Classifications/BebouwingsComponent/name); // TODO_OV: Laat dit de parameter zijn en zoek de rest op.
	parameter<Classifications/BebouwingsSectorBase> BcSector :=	Classifications/BebouwingsComponent/BebouwingsSectorBase_rel[BC_rel];
	
	parameter<ratio>  BTW_Factor    := ='1.0 '+(Classifications/BebouwingsComponent/DraagtBTW[BC_rel] ? '+ SpecifiekeInstellingen/VAT    / 100[percent]' : '');
	parameter<ratio>  BTW_Factor_gv := ='1.0 '+(Classifications/BebouwingsComponent/DraagtBTW[BC_rel] ? '+ SpecifiekeInstellingen/VAT_gv / 100[percent]' : '');
	
	unit<uint32>      PrevObject := ='PrevState/Bebouwing/'+ BCname;
	unit<uint8> ModelObjectKeyDomein;
	
	unit<uint32>   HistorischBouw := = 'subset(BeginSituatie/StartingStateComponenten/'+ BCname +'/Results/bouwjaar == float64(Classifications/RekenJaar/Values[RekenJaar_rel]))'
	{
		attribute<Geography/rdc_meter>                       point             := = 'BeginSituatie/StartingStateComponenten/'+ BCname +'/Results/point[nr_orgentity]';
		attribute<Geography/rdc_meter>                       geometry          := = 'BeginSituatie/StartingStateComponenten/'+ BCname +'/Results/geometry[nr_orgentity]';
		attribute<string>                                    code              := = 'BeginSituatie/StartingStateComponenten/'+ BCname +'/Results/code[nr_orgentity]';
		attribute<string>                                    label             := = 'BeginSituatie/StartingStateComponenten/'+ BCname +'/Results/label[nr_orgentity]', DialogType = "labelText";
		attribute<Invoer/RuimtelijkeData/StudieGebied/buurt> Buurt_rel         := = 'BeginSituatie/StartingStateComponenten/'+ BCname +'/Results/Buurt_rel[nr_orgentity]';
		attribute<BebouwingsTypeDomein>                      BebouwingsType    := = 'BeginSituatie/StartingStateComponenten/'+ BCname +'/Results/BebouwingsType[nr_orgentity]';
		attribute<units/yr>                                  Bouwjaar          := = 'BeginSituatie/StartingStateComponenten/'+ BCname +'/Results/Bouwjaar[nr_orgentity]';
		attribute<ModelObjectKeyDomein>                      ModelObjectKey    := = 'BeginSituatie/StartingStateComponenten/'+ BCname +'/Results/ModelObjectKey[nr_orgentity]';
		attribute<nrAsl>                                     nrAansluitingen_i := = 'BeginSituatie/StartingStateComponenten/'+ BCname +'/Results/nrAansluitingen_i[nr_orgentity]';
		attribute<m2>                                        Oppervlakte_i     := = 'BeginSituatie/StartingStateComponenten/'+ BCname +'/Results/Oppervlakte_i[nr_orgentity]';
		attribute<pand_asl>                                  pand_aandeel      := = 'BeginSituatie/StartingStateComponenten/'+ BCname +'/Results/pand_aandeel[nr_orgentity]';
		
		container Gebied
		{
			attribute<float64> n      (..) := = 'BeginSituatie/StartingStateComponenten/'+ BCname +'/Results/Gebied/n[nr_orgentity]';
			attribute<float64> MEAN_x (..) := = 'BeginSituatie/StartingStateComponenten/'+ BCname +'/Results/Gebied/MEAN_x[nr_orgentity]';
			attribute<float64> MEAN_y (..) := = 'BeginSituatie/StartingStateComponenten/'+ BCname +'/Results/Gebied/MEAN_y[nr_orgentity]';
			attribute<float64> SSD_xx (..) := = 'BeginSituatie/StartingStateComponenten/'+ BCname +'/Results/Gebied/SSD_xx[nr_orgentity]';
			attribute<float64> SSD_xy (..) := = 'BeginSituatie/StartingStateComponenten/'+ BCname +'/Results/Gebied/SSD_xy[nr_orgentity]';
			attribute<float64> SSD_yy (..) := = 'BeginSituatie/StartingStateComponenten/'+ BCname +'/Results/Gebied/SSD_yy[nr_orgentity]';
		}
		
		container Kapitaallasten
		{
			attribute<Eur_yr> Kji_Asl_Enet    (..) := = 'BeginSituatie/StartingStateComponenten/'+ BCname +'/Results/Kapitaallasten/Kji_Asl_Enet[nr_orgentity]';
			attribute<Eur_yr> Kmi_Asl_Enet    (..) := = 'BeginSituatie/StartingStateComponenten/'+ BCname +'/Results/Kapitaallasten/Kmi_Asl_Enet[nr_orgentity]';
			attribute<Eur_yr> Kji_Asl_Gnet    (..) := = 'BeginSituatie/StartingStateComponenten/'+ BCname +'/Results/Kapitaallasten/Kji_Asl_Gnet[nr_orgentity]';
			attribute<Eur_yr> Kmi_Asl_Gnet    (..) := = 'BeginSituatie/StartingStateComponenten/'+ BCname +'/Results/Kapitaallasten/Kmi_Asl_Gnet[nr_orgentity]';
			attribute<Eur_yr> Kji30_LO        (..) := = 'BeginSituatie/StartingStateComponenten/'+ BCname +'/Results/Kapitaallasten/Kji30_LO[nr_orgentity]';
			attribute<Eur_yr> Kmi30_LO        (..) := = 'BeginSituatie/StartingStateComponenten/'+ BCname +'/Results/Kapitaallasten/Kmi30_LO[nr_orgentity]';
			attribute<Eur_yr> Kji20_LO        (..) := = 'BeginSituatie/StartingStateComponenten/'+ BCname +'/Results/Kapitaallasten/Kji20_LO[nr_orgentity]';
			attribute<Eur_yr> Kmi20_LO        (..) := = 'BeginSituatie/StartingStateComponenten/'+ BCname +'/Results/Kapitaallasten/Kmi20_LO[nr_orgentity]';
			attribute<Eur_yr> Kji15_LO        (..) := = 'BeginSituatie/StartingStateComponenten/'+ BCname +'/Results/Kapitaallasten/Kji15_LO[nr_orgentity]';
			attribute<Eur_yr> Kmi15_LO        (..) := = 'BeginSituatie/StartingStateComponenten/'+ BCname +'/Results/Kapitaallasten/Kmi15_LO[nr_orgentity]';
			attribute<Eur_yr> Kji_gv          (..) := = 'BeginSituatie/StartingStateComponenten/'+ BCname +'/Results/Kapitaallasten/Kji_gv[nr_orgentity]';
			attribute<Eur_yr> Kmi_gv          (..) := = 'BeginSituatie/StartingStateComponenten/'+ BCname +'/Results/Kapitaallasten/Kmi_gv[nr_orgentity]';
			attribute<Eur_yr> Kj_gv_incentive (..) := = 'BeginSituatie/StartingStateComponenten/'+ BCname +'/Results/Kapitaallasten/Kj_gv_incentive[nr_orgentity]';
			attribute<Eur_yr> Kji_LTAS        (..) := = 'BeginSituatie/StartingStateComponenten/'+ BCname +'/Results/Kapitaallasten/Kji_LTAS[nr_orgentity]';
			attribute<Eur_yr> Kmi_LTAS        (..) := = 'BeginSituatie/StartingStateComponenten/'+ BCname +'/Results/Kapitaallasten/Kmi_LTAS[nr_orgentity]';
			attribute<Eur_yr> Oji_s_LO_30     (..) := = 'BeginSituatie/StartingStateComponenten/'+ BCname +'/Results/Kapitaallasten/Oji_s_LO_30[nr_orgentity]';
			attribute<Eur_yr> Oji_s_LO_20     (..) := = 'BeginSituatie/StartingStateComponenten/'+ BCname +'/Results/Kapitaallasten/Oji_s_LO_20[nr_orgentity]';
			attribute<Eur_yr> Oji_s_LO_15     (..) := = 'BeginSituatie/StartingStateComponenten/'+ BCname +'/Results/Kapitaallasten/Oji_s_LO_15[nr_orgentity]';
			attribute<Eur_yr> Oji_s_gv        (..) := = 'BeginSituatie/StartingStateComponenten/'+ BCname +'/Results/Kapitaallasten/Oji_s_gv[nr_orgentity]';
		}
	}
	
	unit<uint32>      NieuwbouwBron :=
		= Historisch ? 'HistorischBouw' :
		 Invoer/DefaultInstellingen/Basis/BC_doNieuwbouw  && BC_rel == Classifications/BebouwingsComponent/V/BestaandeWoning ? 'Bebouwing/NieuwbouwWoning' :
		 Invoer/DefaultInstellingen/Basis/BC_doNieuwbouw  && BC_rel == Classifications/BebouwingsComponent/V/BestaandeUtil   ? 'Bebouwing/NieuwbouwUtil'   :
		'Bebouwing/'+ BCname;
	
	container NcwRefs
	{
		container _15 := ='NCW/'+NcwRefBase+'15';
		container _30 := ='NCW/'+NcwRefBase+'30';
		container _50 := ='NCW/'+NcwRefBase+'50';
		container _28 := ='NCW/'+NcwRefBase+'28';
		container _20 := ='NCW/'+NcwRefBase+'20';
	}

	unit<uint8> PrijzenElektriciteit := Prijzen/Elektriciteit/Staffel;

	unit<uint8> BebouwingsTypeDomein := BO/BebouwingsTypeDomein;

	container union := =Invoer/DefaultInstellingen/Basis/BC_doNieuwbouw ? 'CalculationSchemes/BebouwingsOperaties/union(PrevObject, NieuwbouwBron)' : '..';

	unit<uint32> BO := =Invoer/DefaultInstellingen/Basis/BC_doNieuwbouw ? 'union/result' : 'PrevObject'
	{
		container BebouwingsComponent_UpRef := ..; // TODO_OV: used sporadically, try to avoid this CHECK
		container NcwRefs                   := BebouwingsComponent_UpRef/NcwRefs;
		container Opbrengsten               := BebouwingsComponent_UpRef/Opbrengsten;
		container VraagKentallen            := VraagKentallenComponent;
		container BcKentallen               := BC_kentallen;

		unit<uint32>    ModelObjectDomain := ModelObject;
		attribute<Invoer/SpecifiekeInstellingen/PlanRegio> PlanRegio_rel (BO) := BO/buurt_rel;
		attribute<ModelObject>                             Model_rel     (BO) := rlookup(BO/ModelObjectKey, ModelObject/ModelObjectKey), KeepData = "True";
		attribute<PrevObject>                              PrevObject_rel(BO) := rlookup(BO/code, PrevObject/code);

		unit<uint32>  AfnameGebied         := PrevState/AfnameGebied;

		parameter<string> BCname := ../BCname;
		attribute<Classifications/Schillabel>  Schillabel_rel  (BO) := makedefined(PrevObject/Schillabel_rel[PrevObject_rel], ModelObject/SchilLabel_rel[Model_rel]);
		
		attribute<Classifications/WarmteOptie> WarmteOptie_rel (BO) := PrevObject/WarmteOptie_rel[PrevObject_rel];
		attribute<Classifications/Schillabel>  Startlabel_rel  (BO) := PrevObject/Startlabel_rel[PrevObject_rel];
		
		container Interpolate
		{
			attribute<Classifications/Schillabel>  Defaultlabel_lower (BO) := switch(
						  case(isnull(Defaultlabel_new), Defaultlabel_new)
						, case(Defaultlabel_new == Classifications/schillabel/V/A, Classifications/schillabel/V/A)
						, case(Defaultlabel_new == Classifications/schillabel/V/B, Classifications/schillabel/V/A)
						, case(Defaultlabel_new == Classifications/schillabel/V/C, Classifications/schillabel/V/B)
						, case(Defaultlabel_new == Classifications/schillabel/V/D, Classifications/schillabel/V/C)
						, case(Defaultlabel_new == Classifications/schillabel/V/E, Classifications/schillabel/V/D)
						, case(Defaultlabel_new == Classifications/schillabel/V/F, Classifications/schillabel/V/E)
						, case(Functioneel/RV/N >= Functioneel/RV/G, Classifications/schillabel/V/G)
						, case(Defaultlabel_new == Classifications/schillabel/V/G, Classifications/schillabel/V/F)
						, Classifications/schillabel/V/G);
						
			attribute<GJ_yr> RV_upper  (BO) := ='merge(Defaultlabel_new, GJ_yr, '+AsItemList('Functioneel/RV_raw/'+Classifications/Schillabel/name)+')';
			attribute<GJ_yr> RV_lower  (BO) := ='merge(Defaultlabel_lower, GJ_yr, '+AsItemList('Functioneel/RV_raw/'+Classifications/Schillabel/name)+')';
			attribute<GJ_yr> D_total   (BO) := RV_upper - RV_lower;
			attribute<ratio> R_upper   (BO) := makedefined(1.0[ratio]-((RV_upper - Functioneel/CurrRV) / D_total), 0.5[ratio]);
			attribute<ratio> R_lower   (BO) := makedefined(1.0[ratio]-((Functioneel/CurrRV - RV_lower) / D_total), 0.5[ratio]);
			attribute<ratio> R_sum     (BO) := R_upper + R_lower;
		}
		
		attribute<Classifications/Schillabel>  Defaultlabel_new (BO) :=
				not(Schillabel_rel == Classifications/schillabel/V/N) ? (0/0)[Classifications/Schillabel] :
					Functioneel/RV/A >= Functioneel/RV/N ? Classifications/schillabel/V/A
				: 	Functioneel/RV/B >= Functioneel/RV/N ? Classifications/schillabel/V/B
				: 	Functioneel/RV/C >= Functioneel/RV/N ? Classifications/schillabel/V/C
				: 	Functioneel/RV/D >= Functioneel/RV/N ? Classifications/schillabel/V/D
				: 	Functioneel/RV/E >= Functioneel/RV/N ? Classifications/schillabel/V/E
				: 	Functioneel/RV/F >= Functioneel/RV/N ? Classifications/schillabel/V/F
				: 	Classifications/schillabel/V/G;
				
		attribute<Classifications/Schillabel>  SchillabelOrDefault_rel (BO) :=
			Schillabel_rel == Classifications/schillabel/V/N ? Defaultlabel_new	: Schillabel_rel;
		
		container InstallatiePerProduct := for_each_nedv(Classifications/Product/name
		, 'PrevObject/InstallatiePerProduct/'+Classifications/Product/name+'[PrevObject_rel]'
		, BO
		, Classifications/Installatie
		)
		{
			attribute<Classifications/Installatie> Dak (BO) := const(Classifications/Installatie/V/geen, BO); // for future use
		}

		attribute<Classifications/AfgifteSysteem> AfgifteSysteem_rel (BO) := PrevObject/AfgifteSysteem_rel[PrevObject_rel];
		attribute<AfnameGebied>                   AfnameGebied_rel   (BO) := PrevObject/AfnameGebied_rel[PrevObject_rel];
		attribute<Classifications/GebouwOptie>    GebouwOptie_rel    (BO) := PrevObject/GebouwOptie_rel[PrevObject_rel]; // REMOVE, OBSOLETE, vervangen door Schillabel_rel, InstallatiePerProduct en GebiedsOptie
		attribute<Geography/rdc_grids/m100>       gridm100_rel       (BO) := point[Geography/rdc_grids/m100];

		attribute<bool> IsMeergezins (.) := BebouwingsTypeDomein/IsMeergezins[BebouwingsType];

		attribute<ratio> ResterendFactorBase := = HasResterendFactors
			? 'MakeDefined(merge(BebouwingsType, ratio, '+AsItemList('ResterendFactorMaps/'+BebouwingsTypeDomein/ResterendFactorName+'[gridm100_rel]')+'), 1.0)'
			: 'const(1.0, BO)';

		attribute<ratio> ResterendFactor := Bouwjaar > 2020d ? 1.0 : ResterendFactorBase * float64(IsDefined(PlanRegio_rel)); //TODO: huidig jaar parametriseren
		attribute<bool>  Afbouw          := =Historisch ? 'const(false,.)' : 'PrevObject/ResterendNu[PrevObject_rel] > 0.0 && ResterendFactor <= 0.0';
		attribute<ratio> ResterendNu     := =Historisch ? 'const(1.0,.)' : 'Afbouw ? max_elem(PrevObject/ResterendNu[PrevObject_rel] - 0.1, 0.0) : ResterendFactor'; //TODO: 0.1 dynamisch afleiden van aantal zichtjaren, werkt nu alleen bij 1-jaar stappen
		attribute<nrAsl> nrAansluitingen := ResterendNu * nrAansluitingen_i;
		attribute<m2>    Oppervlakte     := ResterendNu * Oppervlakte_i;

		container AansluitCapaciteit
		{
			attribute<kW> RV    (..) := ASW_RVmt;
			attribute<kW> TW    (..) := ASW_TWmt;
			attribute<kW> Warmte(..) := RV + TW;
			attribute<kW> K     (..) := ASW_K;
			attribute<kW> eWP   (..) := max_elem(RV, TW);
			attribute<kW> eZ    (..) := ASW_Eapp;
			attribute<kW> eM    (..) := ASW_Eewp;

			parameter<ratio> GTF_RVmt := Vermogens/GTF_RVmt[BCsector];
			parameter<ratio> GTF_RVlt := Vermogens/GTF_RVlt[BCsector];
			parameter<ratio> GTF_TW   := Vermogens/GTF_TW[BCsector];
			parameter<ratio> GTF_K    := Vermogens/GTF_K[BCsector];
			parameter<ratio> GTF_Enet := Vermogens/GTF_Enet[BCsector];

 			attribute<kW>    ASW_RVmt (..) := =
 				  BCsector == Classifications/BebouwingsSectorBase/V/Woning ?
 				  	'IsMeergezins ? Oppervlakte * Vermogens/ASW_RVmt_wh_opp + nrAansluitingen * Vermogens/ASW_RVmt_wh_asl : Oppervlakte * Vermogens/ASW_RVmt_wl_opp + nrAansluitingen * Vermogens/ASW_RVmt_wl_asl'
 				: BCsector == Classifications/BebouwingsSectorBase/V/Util   ? 'Oppervlakte * Vermogens/ASW_RVmt_u_opp_specific[BebouwingsType]'
 				: 'const(0.0[kW],..)';
 			
 			attribute<kW>    ASW_RVlt (..) := =
 				  BCsector == Classifications/BebouwingsSectorBase/V/Woning ?
 				  	'IsMeergezins ? Oppervlakte * Vermogens/ASW_RVlt_wh_opp + nrAansluitingen * Vermogens/ASW_RVlt_wh_asl : Oppervlakte * Vermogens/ASW_RVlt_wl_opp + nrAansluitingen * Vermogens/ASW_RVlt_wl_asl'
 				: BCsector == Classifications/BebouwingsSectorBase/V/Util   ? 'Oppervlakte * Vermogens/ASW_RVlt_u_opp_specific[BebouwingsType]'
 				: 'const(0.0[kW],..)';
 			
			attribute<kW>    ASW_TWmt (..) := = 
				  BCsector == Classifications/BebouwingsSectorBase/V/Woning ?
				  	'IsMeergezins ? Oppervlakte * Vermogens/ASW_TWmt_wl_opp + nrAansluitingen * Vermogens/ASW_TWmt_wl_asl : Oppervlakte * Vermogens/ASW_TWmt_wh_opp + nrAansluitingen * Vermogens/ASW_TWmt_wh_asl'
 				: BCsector == Classifications/BebouwingsSectorBase/V/Util   ? 'Oppervlakte * Vermogens/ASW_TWmt_u_opp + nrAansluitingen * Vermogens/ASW_TWmt_u_asl'
 				: 'const(0.0[kW],..)';
 			
			attribute<kW>    ASW_TWlt (..) :== 
				  BCsector == Classifications/BebouwingsSectorBase/V/Woning ?
				  	'IsMeergezins ? Oppervlakte * Vermogens/ASW_TWlt_wl_opp + nrAansluitingen * Vermogens/ASW_TWlt_wl_asl : Oppervlakte * Vermogens/ASW_TWlt_wh_opp + nrAansluitingen * Vermogens/ASW_TWlt_wh_asl'
 				: BCsector == Classifications/BebouwingsSectorBase/V/Util   ? 'Oppervlakte * Vermogens/ASW_TWlt_u_opp + nrAansluitingen * Vermogens/ASW_TWlt_u_asl'
 				: 'const(0.0[kW],..)';
 			
			attribute<kW>    ASW_K    (..) := = 
				  BCsector == Classifications/BebouwingsSectorBase/V/Woning ?
				  	'IsMeergezins ? Oppervlakte * Vermogens/ASW_K_wl_opp + nrAansluitingen * Vermogens/ASW_K_wl_asl : Oppervlakte * Vermogens/ASW_K_wh_opp + nrAansluitingen * Vermogens/ASW_K_wh_asl'
 				: BCsector == Classifications/BebouwingsSectorBase/V/Util   ? 'Oppervlakte * Vermogens/ASW_K_u_opp + nrAansluitingen * Vermogens/ASW_K_u_asl'
 				: 'const(0.0[kW],..)';
 			
			attribute<kW>    ASW_Eapp (..) := = 
				  BCsector == Classifications/BebouwingsSectorBase/V/Woning ?
				  	'IsMeergezins ? Oppervlakte * Vermogens/ASW_Eapp_wl_opp + nrAansluitingen * Vermogens/ASW_Eapp_wl_asl : Oppervlakte * Vermogens/ASW_Eapp_wh_opp + nrAansluitingen * Vermogens/ASW_Eapp_wh_asl'
 				: BCsector == Classifications/BebouwingsSectorBase/V/Util   ? 'Oppervlakte * Vermogens/ASW_Eapp_u_opp + nrAansluitingen * Vermogens/ASW_Eapp_u_asl'
 				: 'const(0.0[kW],..)';
 			
			attribute<kW>    ASW_Ehwp (..) := = 
				  BCsector == Classifications/BebouwingsSectorBase/V/Woning ?
				  	'IsMeergezins ? Oppervlakte * Vermogens/ASW_Ehwp_wl_opp + nrAansluitingen * Vermogens/ASW_Ehwp_wl_asl : Oppervlakte * Vermogens/ASW_Ehwp_wh_opp + nrAansluitingen * Vermogens/ASW_Ehwp_wh_asl'
 				: BCsector == Classifications/BebouwingsSectorBase/V/Util   ? 'Oppervlakte * Vermogens/ASW_Ehwp_u_opp + nrAansluitingen * Vermogens/ASW_Ehwp_u_asl'
 				: 'const(0.0[kW],..)';
 			
			attribute<kW>    ASW_Eewp (..) := = 
				  BCsector == Classifications/BebouwingsSectorBase/V/Woning ?
				  	'IsMeergezins ? Oppervlakte * Vermogens/ASW_Eewp_wh_opp + nrAansluitingen * Vermogens/ASW_Eewp_wh_asl : Oppervlakte * Vermogens/ASW_Eewp_wl_opp + nrAansluitingen * Vermogens/ASW_Eewp_wl_asl'
 				: BCsector == Classifications/BebouwingsSectorBase/V/Util   ? 'Oppervlakte * Vermogens/ASW_Eewp_u_opp + nrAansluitingen * Vermogens/ASW_Eewp_u_asl'
 				: 'const(0.0[kW],..)';
		}

		container Functioneel
		{
			container DragerSpecifiekeOpties := SpecifiekeInstellingen/RuimtelijkeVraag/Drager;

			attribute<ratio> Klimaateffect (..) := KlimaatFactorMap[gridm100_rel];

			attribute<GJ_yr> TW(..) := (nrAansluitingen * ModelObject/V_TW_asl [Model_rel] + Oppervlakte * ModelObject/V_TW_opp [Model_rel]) * DragerSpecifiekeOpties/TapWater;
			attribute<GJ_yr> K (..) := =
				 '('
					+ (all(ModelObject/V_K_asl == 0[GJ_yr_asl]) 
						? ''
						: 'NrAansluitingen * ModelObject/V_K_asl[Model_rel] +')
					+ 'Oppervlakte * ModelObject/V_K_opp[Model_rel] '
				+ ') 
				* DragerSpecifiekeOpties/Koude * ( 1.0 + 3.66 *(1.0 - Klimaateffect))';

			attribute<GJ_yr> EA(..) := (nrAansluitingen * ModelObject/V_EA_asl [Model_rel] + Oppervlakte * ModelObject/V_EA_opp [Model_rel]) * DragerSpecifiekeOpties/ElektrischeApparatuur;

			// TODO_OV, OPTIMIZE, V_RV_asl/@SL@ alleen meenemen indien niet allemaal 0, zoals bij utiliteiten wel het geval is
			container RV_raw := for_each_nedv(Classifications/Schillabel/name
			 , replace(
				'(nrAansluitingen * ModelObject/V_RV_asl/@SL@[Model_rel] + Oppervlakte * ModelObject/V_RV_opp/@SL@[Model_rel])'
					'* DragerSpecifiekeOpties/RuimteVerwarming'
					'* Klimaateffect'
				,'@SL@', Classifications/Schillabel/name)
			 ,..
			 , GJ_yr
			);
			
			container RV := for_each_nedv(
				 Classifications/Schillabel/name
				,replace(
					'not(Startlabel_rel == Classifications/Schillabel/V/N) && Schillabel_rel > Classifications/Schillabel/V/@SL@ ? min_elem(StartlabelRV, RV_raw/@SL@) : RV_raw/@SL@'
					, '@SL@', Classifications/Schillabel/name)
			 	,..
			 	, GJ_yr)
			{			
				attribute<GJ_yr> N (...) := RV_raw/N;
			}

			attribute<GJ_yr> CurrRV       (..) := ='merge(Schillabel_rel, GJ_yr, '+AsItemList('RV_raw/'+Classifications/Schillabel/name)+')';	
			attribute<GJ_yr> StartlabelRV (..) := ='merge(Startlabel_rel, GJ_yr, '+AsItemList('RV_raw/'+Classifications/Schillabel/name)+')';
			attribute<GJ_yr> Ventilatie   (..) := =
				'('
					+ (all(ModelObject/V_Vent_asl == 0[GJ_yr_asl]) ? '' : 'NrAansluitingen * ModelObject/V_Vent_asl + ')
					+ 'Oppervlakte * ModelObject/V_Vent_opp[Model_rel]'
				+ ') 
				* DragerSpecifiekeOpties/ElektrischeApparatuur'
				;
		}
	}

	//============== Voorwaarden voor het wel of niet toepassen van een gebouwoptie. Welke geldt is opgegeven in de runinstellingen per Rekenstap.
	container Criteria := BO/Criteria
	{
		//"always" : Wordt altijd toegepast indien technisch mogelijk
		attribute<bool> always (BO) := const(true,  BO);

		//"never" : Wordt nooit toegepast en er worden geen berekeningen voor deze optie gedaan
		attribute<bool> never  (BO) := const(false, BO);

		//"gebied" : Wordt niet op gebouwniveau toegepast maar kan wel in werking gaan bij toekenning van een gebiedsoptie
		attribute<bool> gebied (BO) := never;

		//"Alloc" : Wordt alleen toegepast bij kandidaten die al deelnemer zijn in een gebiedsoptie
		attribute<bool> Alloc  (BO) := Classifications/WarmteOptie/isGebiedsOptie[BO/WarmteOptie_rel];

		//"NoAlloc" : Wordt alleen toegepast bij kandidaten die geen deelnemer zijn in een gebiedsoptie
		attribute<bool> NoAlloc(BO) := not(Alloc);

		//"isUtilGroot" : Wordt alleen toegepast bij kandidaten met een capaciteitsvraag voor verwarming van meer dan 100 kilowatt
		attribute<bool> isUtilGroot(BO) := BO/AansluitCapaciteit/RV >= 100 kW;

		//"isUtilKlein" : Wordt alleen toegepast bij kandidaten met een capaciteitsvraag voor verwarming van meer dan 100 kilowatt
		attribute<bool> isUtilKlein(BO) := not(isUtilGroot);

	}

	container EIA_Opties := ='SpecifiekeInstellingen/Beleid/EIA/E_'+NcwRefBase;

	container VerbruiksOpties 
	{
		unit<uint8> SchilSprong_set := subset(SchilSprong_sel)
		{
			attribute<Classifications/SchilSprong>     SchilSprong_rel     := nr_OrgEntity;
			attribute<string>                          name                := Classifications/SchilSprong/name[SchilSprong_rel];
			attribute<Classifications/Schillabel>      Naar_rel            := Classifications/SchilSprong/Naar_rel[SchilSprong_rel];
			attribute<Classifications/SchilSprongCode> SchilSprongCode_rel := Classifications/SchilSprong/SchilSprongCode_rel[SchilSprong_rel];

			attribute<string> LeerCurveName := Classifications/Schillabel/LeerCurveName[Naar_rel];

			unit<uint32> xMO := combine(., ModelObject)
			{
				attribute<Eur_asl> Ki_asl := =#.=0?'const(0[Eur_asl],.)':'union_data(.,'+AsItemList(replace('(ModelObject/Ki_min_asl/@SS@ * Schuiven/KostenMin + ModelObject/Ki_max_asl/@SS@ * Schuiven/KostenMax) * Leercurves/'+LeerCurveName+'/Curve', '@SS@', name))+')';
				attribute<Eur_m2 > Ki_opp := =#.=0?'const(0[Eur_m2 ],.)':'union_data(.,'+AsItemList(replace('(ModelObject/Ki_min_opp/@SS@ * Schuiven/KostenMin + ModelObject/Ki_max_opp/@SS@ * Schuiven/KostenMax) * Leercurves/'+LeerCurveName+'/Curve', '@SS@', name))+')';
			}
		}

		unit<uint8> SchilSprongOrIdle_set := union_unit_uint8(Classifications/Schillabel, SchilSprong_set) 
		{
			attribute<Classifications/Schillabel> Van_rel  := union_data(., id(Classifications/Schillabel), Classifications/SchilSprong/Van_rel [SchilSprong_set/nr_OrgEntity]);
			attribute<Classifications/Schillabel> Naar_rel := union_data(., id(Classifications/Schillabel), Classifications/SchilSprong/Naar_rel[SchilSprong_set/nr_OrgEntity]);

			attribute<string> name := union_data(., 'S'+repeat(Classifications/Schillabel/name,2), SchilSprong_set/name);

			unit<uint32> xMO := combine(., ModelObject) 
			{
				attribute<Eur_asl> Ki_asl := ='union_data(., ' + AsItemList(const('const(0[Eur_asl], ModelObject)', Classifications/Schillabel))+', SchilSprong_set/xMO/Ki_asl)';
				attribute<Eur_m2 > Ki_opp := ='union_data(., ' + AsItemList(const('const(0[Eur_m2 ], ModelObject)', Classifications/Schillabel))+', SchilSprong_set/xMO/Ki_opp)';
			}
		}

		parameter<string> BcCode := Classifications/BebouwingsComponent/BcCode[BC_rel];

		unit<uint32> Installatie := Classifications/Installatie
		{
			// TODO_OV, MTA: remove const in merge wanneer void domain hier zal worden toegestaan, issue XXX.
			attribute<Eur_asl>   Ki_asl := =replace('(Ki_asl_min_@BC * Schuiven/KostenMin + Ki_asl_max_@BC * Schuiven/KostenMax)* merge(LeerCurve_rel, float64, '+AsItemList('const(LeerCurves/'+Classifications/LeerCurves/name+'/Curve, .)')+')', '@BC', BcCode);
			attribute<Eur_kW>    Ki_cap := =replace('(Ki_cap_min_@BC * Schuiven/KostenMin + Ki_cap_max_@BC * Schuiven/KostenMax)* merge(LeerCurve_rel, float64, '+AsItemList('const(LeerCurves/'+Classifications/LeerCurves/name+'/Curve, .)')+')', '@BC', BcCode);
			attribute<Eur_m2>    Ki_opp := =replace('(Ki_opp_min_@BC * Schuiven/KostenMin + Ki_opp_max_@BC * Schuiven/KostenMax)* merge(LeerCurve_rel, float64, '+AsItemList('const(LeerCurves/'+Classifications/LeerCurves/name+'/Curve, .)')+')', '@BC', BcCode);

			attribute<Eur_kW>    Ki30_cap   := Ki_cap * AT30;
			attribute<Eur_kW>    Ki20_cap   := Ki_cap * AT20;
			attribute<Eur_kW>    Ki15_cap   := Ki_cap * AT15;
			attribute<Eur_yr_kW> Kj_OH_cap  := Ki_cap * R_OH;
			attribute<Eur_yr_kW> Kj_Adm_cap := Ki_cap * R_Adm;
		}
		
		unit<uint8> GebouwOptie := Classifications/GebouwOptie
		{
			attribute<Eur_asl> Ki_asl := sum(Installatie/Ki_asl[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
			attribute<Eur_m2 > Ki_opp := sum(Installatie/Ki_opp[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);

			attribute<Eur_yr_asl> Kj_Adm_asl := sum((Installatie/Ki_asl * Installatie/R_Adm)[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
			attribute<Eur_yr_asl> Kj_OH_asl  := sum((Installatie/Ki_asl * Installatie/R_OH )[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
			attribute<Eur_yr_m2 > Kj_Adm_opp := sum((Installatie/Ki_opp * Installatie/R_Adm)[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
			attribute<Eur_yr_m2 > Kj_OH_opp  := sum((Installatie/Ki_opp * Installatie/R_OH )[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);

			attribute<Eur_asl> Ki30_asl := sum((Installatie/Ki_asl * Installatie/AT30)[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
			attribute<Eur_asl> Ki20_asl := sum((Installatie/Ki_asl * Installatie/AT20)[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
			attribute<Eur_asl> Ki15_asl := sum((Installatie/Ki_asl * Installatie/AT15)[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);

			attribute<Eur_m2 > Ki30_opp := sum((Installatie/Ki_opp * Installatie/AT30)[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
			attribute<Eur_m2 > Ki20_opp := sum((Installatie/Ki_opp * Installatie/AT20)[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
			attribute<Eur_m2 > Ki15_opp := sum((Installatie/Ki_opp * Installatie/AT15)[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
		}
	}
	
	container Doellabels := for_each_ne(Classifications/Doellabel_NaSprong/name, 'DoellabelT(BO, Classifications/Doellabel_NaSprong/V/'+Classifications/Doellabel_NaSprong/name+')') 
	{
		container geen  // handle as special case
		{
			attribute<Eur> Ki_GV (BO) := const(0[Eur], BO);
		}
	}

	attribute<string> GebouwOptie_sel_Expr (Classifications/GebouwOptie) := 'LowerCase(LocatieSpecifiekeOpties/GebouwOpties/'+Classifications/GebouwOptie/name+') != ' + Quote('criteria/never');
	attribute<bool>   GebouwOptie_sel      (Classifications/GebouwOptie) := ='union_data(Classifications/GebouwOptie, '+AsItemList(GebouwOptie_sel_Expr)+')';
	
	unit<uint8> BcGebouwOptie := subset(GebouwOptie_sel) 
	{
		attribute<string> name           := Classifications/GebouwOptie/name[nr_OrgEntity];
		attribute<string> label          := name, DialogType = "labelText";
		attribute<string> Criterium_expr := ='replace_value(LowerCase(union_data(., '+AsItemList('LocatieSpecifiekeOpties/GebouwOpties/'+name)+')), ''criteria/always'', '''')';
		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
	}

	container GebouwOpties := for_each_ne(BcGebouwOptie/name, 'GebouwOptieT(BO, Classifications/GebouwOptie/V/'+BcGebouwOptie/name+', '+Quote(BcGebouwOptie/Criterium_expr)+')');
	
	unit<uint32> BebouwingsObjectMetGebouwOptie := BO
	{
		unit<uint8>              BcGebouwOptie   := BebouwingsComponent_UpRef/BcGebouwOptie;
		attribute<BcGebouwOptie> GebouwOptie_rel := =(#BcGebouwOptie == 1)? 'const(0[BcGebouwOptie],BO)' : 'argmin('+AsItemList('GebouwOpties/'+BcGebouwOptie/name+'/kosten_or_undefined')+')[BcGebouwOptie]';

		attribute<Classifications/WarmteOptie> WarmteOptie_rel := Classifications/WarmteOptie/IsGebiedsOptie[BO/WarmteOptie_rel]
			? BO/WarmteOptie_rel
			: Classifications/GebouwOptie/WarmteOptie_rel[BcGebouwOptie/nr_OrgEntity[GebouwOptie_rel]];

		attribute<Classifications/Schillabel> Schillabel_rel := ='merge(GebouwOptie_rel, Classifications/Schillabel, '+AsItemList('GebouwOpties/'+BcGebouwOptie/name+'/Schillabel_rel')+')';

		container InstallatiePerProduct := for_each_nedv(Classifications/Product/name
			, replace('merge(GebouwOptie_rel, Classifications/Installatie, '+AsItemList('GebouwOpties/'+BcGebouwOptie/name+'/InstallatiePerProduct/@P')+')', '@P', Classifications/Product/name)
			,.
			, Classifications/Installatie
			);

		attribute<Classifications/AfgifteSysteem> AfgifteSysteem_rel (BO) := ='merge(GebouwOptie_rel, Classifications/AfgifteSysteem, '+AsItemList('GebouwOpties/'+BcGebouwOptie/name+'/AfgifteSysteem_rel')+')';

		// Extra info
		attribute<string> WarmteOptie (BO) := Classifications/WarmteOptie/name[WarmteOptie_rel];
	}

//REMOVE, dit wordt bepaald in StateNaAllocatie	container Kapitaallasten := results/Kapitaallasten;

	container BC_kentallen := kengetallen/BCkentallen/BC_kentallen(
		LeerCurves/LTAS/Curve,
		Schuiven/KostenMin,
		Schuiven/KostenMax,
		BebouwingsTypeDomein,
		BO);

	// voor info over gebruik hWP etc voor RW gelieve de resulterende InstallatiePerProduct te raadplegen

	container Functioneel2
	{
		attribute<GJ_yr> V_RV     (BO) := ='merge(BebouwingsObjectMetGebouwOptie/GebouwOptie_rel, GJ_yr, '+AsItemList('GebouwOpties/'+BcGebouwOptie/name+'/Functioneel/RV')+')';
		attribute<GJ_yr> V_TW     (BO) := ='merge(BebouwingsObjectMetGebouwOptie/GebouwOptie_rel, GJ_yr, '+AsItemList('GebouwOpties/'+BcGebouwOptie/name+'/Functioneel/TW')+')';
		attribute<GJ_yr> V_Warmte (BO) :=  V_RV + V_TW;
	}
	container Opbrengsten
	{
		attribute<float64> AansluitTarief (BO) :=
			  (VraagKentallenComponent/Opbrengsten/AansluitTarief_min[BO/BebouwingsType] * Schuiven/OpbrMin
			+  VraagKentallenComponent/Opbrengsten/AansluitTarief_max[BO/BebouwingsType] * Schuiven/OpbrMax);

		parameter<Eur_yr_asl> VastRechtMT :=
			( VraagKentallenComponent/Opbrengsten/VastRechtMT_Min * Schuiven/OpbrMin 
			+ VraagKentallenComponent/Opbrengsten/VastRechtMT_Max * Schuiven/OpbrMax);

		parameter<Eur_yr_asl> VastRechtLT :=
			( VraagKentallenComponent/Opbrengsten/VastRechtLT_Min * Schuiven/OpbrMin 
			+ VraagKentallenComponent/Opbrengsten/VastRechtLT_Max * Schuiven/OpbrMax);

		parameter<Eur_yr_asl> VastRechtK  :=
			( VraagKentallenComponent/Opbrengsten/VastRechtK_Min  * Schuiven/OpbrMin 
			+ VraagKentallenComponent/Opbrengsten/VastRechtK_Max  * Schuiven/OpbrMax);

		attribute<Eur>    AansluitBijdrageG  (BO) := =
			  BcSector == Classifications/BebouwingsSector/V/Woning ? 
				'BO/isNuNieuw ? BO/nrAansluitingen * Kengetallen/Infra/AansluitTarief_nw_g : BO/nrAansluitingen * Kengetallen/Infra/AansluitTarief_bw_g'
			: BcSector == Classifications/BebouwingsSector/V/Util ?   
				'BO/isNuNieuw ? BO/oppervlakte     * Kengetallen/Infra/AansluitTarief_nu_g : BO/oppervlakte     * Kengetallen/Infra/AansluitTarief_bu_g'
			: 'const(0[Eur],BO)', Descr = "Aansluitbijdrage voor nieuwe aansluiting op het gasnet";
			
		attribute<Eur>    AansluitBijdrageE  (BO) := =
			  BcSector == Classifications/BebouwingsSector/V/Woning ? 
				'BO/isNuNieuw ? BO/nrAansluitingen * Kengetallen/Infra/AansluitTarief_nw_e : BO/nrAansluitingen * Kengetallen/Infra/AansluitTarief_bw_e'
			: BcSector == Classifications/BebouwingsSector/V/Util ?   
				'BO/isNuNieuw ? BO/oppervlakte     * Kengetallen/Infra/AansluitTarief_nu_e : BO/oppervlakte     * Kengetallen/Infra/AansluitTarief_bu_e'
			: 'const(0[Eur],BO)', Descr = "Aansluitbijdrage voor nieuwe aansluiting op het elektriciteitsnetnet";
			
		attribute<Eur>    AansluitBijdrageT  (BO) := BO/nrAansluitingen * AansluitTarief                       , Descr = "Aansluitbijdrage voor nieuwe aansluiting op warmtenetten, niet gecorrigeerd voor deelname";
		attribute<Eur_yr> VastRechtBijdrageG (BO) := BO/nrAansluitingen * Kengetallen/Infra/jaarlijksVast_g    , Descr = "VastRechtBijdrage voor aansluiting op het gasnet";
		attribute<Eur_yr> VastRechtBijdrageE (BO) := BO/nrAansluitingen * Kengetallen/Infra/jaarlijksVast_e    , Descr = "VastRechtBijdrage voor aansluiting op het elektriciteitsnetnet";
		attribute<Eur_yr> VastRechtMT_T      (BO) := BO/nrAansluitingen * VastRechtMT                          , Descr = "VastRechtBijdrage voor aansluiting op warmtenetten, niet gecorrigeerd voor deelname";
		attribute<Eur_yr> VastRechtLT_T      (BO) := BO/nrAansluitingen * VastRechtLT                          , Descr = "VastRechtBijdrage voor aansluiting op warmtenetten, niet gecorrigeerd voor deelname";
		attribute<Eur_yr> VastRechtK_T       (BO) := BO/nrAansluitingen * VastRechtK                           , Descr = "VastRechtBijdrage voor aansluiting op warmtenetten, niet gecorrigeerd voor deelname";

		attribute<Eur_yr> HeffingskortingE   (BO) := BO/nrAansluitingen * SpecifiekeInstellingen/Beleid/Heffingskorting;
	}

	unit<uint32> Results := BebouwingsObjectMetGebouwOptie
	{
		unit<uint8> BcGebouwOptie := BebouwingsComponent_UpRef/BcGebouwOptie;
		container GebouwOpties  := BebouwingsComponent_UpRef/GebouwOpties;
		container BC_kentallen  := BebouwingsComponent_UpRef/BC_kentallen;
		container Functioneel   := BebouwingsComponent_UpRef/BO/Functioneel;
		
		container OrgKapitaallasten := =Invoer/DefaultInstellingen/Basis/BC_doNieuwbouw ? 'Union/result/Kapitaallasten' : 'PrevObject/Kapitaallasten';
		
		container Warmtewet := Functioneel2
		{
			attribute<GJ_yr> V_gas (BO) := ='merge(GebouwOptie_rel, GJ_yr, '+AsItemList('GebouwOpties/'+BcGebouwOptie/name+'/Metervraag/gas')+')';
			

			unit<uint32> GasVerbruikers := subset(V_Gas > 0.0[gj_yr])
			{
				attribute<GJ_yr> V_gas    := ../V_gas[nr_OrgEntity];
				attribute<GJ_yr> V_warmte := V_RV[nr_OrgEntity] + V_TW[nr_OrgEntity];
				//TODO_OV bij V_warmte aftrek eventuele installaties die al een deel van de vraag vullen binnen deze groep (bijv Zonneboilers, future use)
			}
			parameter<float64> PrijsFactor_impl :=  sum(GasVerbruikers/V_gas) / sum(GasVerbruikers/V_warmte) * Voorkeuren/MinderDanAndersFactor;
			parameter<float64> PrijsFactor_corr :=  MakeDefined(PrijsFactor_impl, 1.25);
			parameter<float64> PrijsFactor      :=  = Classifications/BebouwingsComponent/name[Classifications/BebouwingsComponent/Warmtewet_BC_rel[BC_rel]]+'/results/Warmtewet/PrijsFactor_corr';

			parameter<Eur_GJ> WarmtePrijs := = Voorkeuren/IsVasteWarmtePrijs 
				? 'Voorkeuren/VasteWarmtePrijs'
				: 'PrijsFactor * PrijzenAardgas/KGJ_eindgebruik_excl[classify(0[GJ_yr], PrijzenAardgas/ClassBreak)]';
		
			parameter<ratio> KoudeFactor := =BcSector == Classifications/BebouwingsSector/V/Woning ?
				'1.0[ratio] / SpecifiekeInstellingen/NMDA_Prijzen/KoudePrijs/Woningen'  :
				'1.0[ratio] / SpecifiekeInstellingen/NMDA_Prijzen/KoudePrijs/Utiliteit' ;
			parameter<Eur_GJ> KoudePrijs := KoudeFactor * PrijzenElektriciteit/KGJ_eindgebruik_excl[classify(0[GJ_yr], PrijzenElektriciteit/ClassBreak)];
		}
	}
}
