//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) Hestia 2021 - Planbureau voor de Leefomgeving                  //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//           Dit is de container met rekenschema's die werken op Bebouwing              //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

//============== AcieveWoning pakketbepaling =====
unit<uint32> BouwdeelActieveWoning := subset(not(BO/Afbouw) && BO/Activatie/BouwdeelActief)
{
	attribute<string> code := BO/code[nr_orgentity];
	attribute<dpoint> Geometry := BO/Geometry[nr_OrgEntity];
	
	container IsolatieNiveau_rel := for_each_nedv(classifications/bouwdeel/name, 'BO/Bouwdelen/Isolatie/'+classifications/bouwdeel/name+'[nr_OrgEntity]', ., Classifications/IsolatieNiveau);
		
	container IsolatieAmbities := for_each_ne(classifications/IsolatieAmbitie/name
	,	replace('AmbitieT(.., classifications/IsolatieAmbitie/BesparingsFactor[@A])'
		, '@A', 'classifications/IsolatieAmbitie/V/'+classifications/IsolatieAmbitie/name)
	);
	
	parameter<uint32> RandomSeed := 0;
	
	template AmbitieT 
	{
		unit<uint32> ActieveWoning;
		parameter<float64> beta;
		
		parameter<GJ_Yr>   VerbruiksIndicatie := 1000[m3_yr] * 32.68[GJ_m3]; // indicatie verbruik per woning in GJ_Jr
		parameter<EUR_GJ>  EnergiePrijs := 0.6[EUR_m3] / 32.68[GJ_m3]; // indicatie kosten per GJ
		parameter<Yr>      Duration := 20[yr]; // afschrijftijd voor rentabiliteitsafweging
		
		attribute<m2> TotalArea(ActieveWoning) := ='add('+replace('BO/Bouwdelen/@BD[nr_OrgEntity]','@BD', classifications/IsolatieMaatregel/bouwdeel_name)+')';
		
		parameter<EUR> CombiFactor := beta * VerbruiksIndicatie * EnergiePrijs * Duration;
		
		attribute<Float64> BesparingsFactor(classifications/BouwdeelIsolatie) := // hoeveel besparing in verlies; TODO: varieren KG, MG, GG 		
			classifications/Bouwdeel/Verlies[classifications/BouwdeelIsolatie/bouwdeel_rel] // hoeveel relatief belang 
		*	MakeDefined(classifications/IsolatieMaatregel/R_RV/MG[invert(classifications/IsolatieMaatregel/BouwdeelIsolatie_rel)] / value(100, Percent), 0.0);
			
		attribute<EUR> Besparing(classifications/BouwdeelIsolatie) := BesparingsFactor * Combifactor; // TODO: varieren KG, MG, GG en aansluiten op statisch berekende factoren
		
		attribute<EUR_m2> Kosten   (classifications/BouwdeelIsolatie) :=  // tov kosten [per m2] TODO: varieren naar in context van toepassing zijnde kostenkolom. Allereerst Egw, Mgw
			MakeDefined(classifications/IsolatieMaatregel/kosten/Nat_Egw_Ind[invert(classifications/IsolatieMaatregel/BouwdeelIsolatie_rel)], 0[EUR_m2]);
		
		container IsolatieScore := for_each_nedv(classifications/BouwdeelIsolatie/name
		,	replace(
				'iif(IsolatieNiveau_rel/@BD <=  @I'
				',	BO/Bouwdelen/@BD[nr_OrgEntity]'
					'*	(	Besparing[@I]  / TotalArea'
						'-	iif(IsolatieNiveau_rel/@BD > @I, kosten[@I], 0[EUR_m2])'
						')'
				',	-10.0'
				')'
			,	'@BD', classifications/BouwdeelIsolatie/bouwdeel_name
			,	'@I',  'classifications/BouwdeelIsolatie/V/'+classifications/BouwdeelIsolatie/name
			)
		, 	ActieveWoning, float64
		);
		
		// TODO: check for overflow
		parameter<float64> LOG_MAX_FLOAT64 := 700.0; // slightly less than ln( 2^1024 / pcount(classifications/BouwdeelIsolatie/bouwdeel_rel) )
		container OddsRatio := for_each_nedv(classifications/BouwdeelIsolatie/name
		, 'exp(min_elem(IsolatieScore/'+classifications/BouwdeelIsolatie/name+' * beta, LOG_MAX_FLOAT64))'
		, BouwdeelActieveWoning, float64
		)
		{
			container Total := for_each_nedv(classifications/bouwdeel/name
			, 'add('+AsItemList(classifications/BouwdeelIsolatie/name, classifications/BouwdeelIsolatie/bouwdeel_rel)+')'
			, BouwdeelActieveWoning, float64
			);
		}
		
		container P := for_each_nedv(classifications/BouwdeelIsolatie/name
		, 'OddsRatio/'+classifications/BouwdeelIsolatie/name + ' / OddsRatio/Total/'+classifications/BouwdeelIsolatie/bouwdeel_name
		, BouwdeelActieveWoning, float64
		);
			
		container KiesBouwdelen := for_each_ne(classifications/Bouwdeel/name
		,	'KiesBouwDeelT(classifications/Bouwdeel/V/' + classifications/Bouwdeel/name +')'
		);
	}
	template KiesBouwdeelT
	{
		parameter<classifications/Bouwdeel> bouwdeel_rel;
		
		container CumulP := for_each_nedv(classifications/IsolatieNiveau/name
		, 'P/'+classifications/bouwdeel/name[bouwdeel_rel]+'_'+classifications/IsolatieNiveau/name
		+ MakeDefined('+ '+classifications/IsolatieNiveau/name[ID(classifications/IsolatieNiveau)-1], '')
		, BouwdeelActieveWoning, float64
		);
		
		parameter<uint32> Seed := 0; // TODO: Koppelen aan generieke reproduceerbare seeder
		attribute<float64> rnd (BouwdeelActieveWoning) := rnd_uniform(Seed + bouwdeel_rel, BouwdeelActieveWoning, range(float64, 0.0, 1.0));
		attribute<classifications/IsolatieNiveau> IsolatieNiveau_rel(BouwdeelActieveWoning) := ='argmax('+AsItemList('CumulP/'+classifications/IsolatieNiveau/name+' >= rnd')+')[classifications/IsolatieNiveau]';
	}
	
	//Placeholder voorbeeld hoe resultscontainer er uit moet zien, voor gebruik in ProductActieveWoning (waarden tijdelijk constant gegeven)
	container spook_results {
		unit<uint32> AWxIA := combine(.., classifications/IsolatieAmbitie)
		,	Descr = "iedere (relevante) isolatie ambitie voor iedere op bouwdeel geactiveerde woning"  //AKA Spookwoning
		{
			attribute<BO> Woning_rel := BouwdeelActieveWoning/nr_OrgEntity[nr_1];
			
			attribute<Classifications/IsolatieAmbitie> IsolatieAmbitie_rel := nr_2;
			
			container Bouwdelen
			{
				container Isolatie := for_each_nedv(
					classifications/Bouwdeel/name,
					replace(
						'union_data(AWxIA, '+AsItemList(replace('IsolatieAmbities/@IA/KiesBouwdelen/@BD/IsolatieNiveau_rel', '@IA', Classifications/IsolatieAmbitie/name))+')'
						,'@BD', classifications/Bouwdeel/name),
					..,
					Classifications/IsolatieNiveau)
				{
					attribute<Classifications/Schillabel> Schillabel_rel (...) := const(Classifications/Schillabel/V/B,...); //TODO: methode schillabel afleiden van isolatiegraad
				}
				container IsChangedNow := for_each_nedv(
					classifications/Bouwdeel/name,
					'Isolatie/' + classifications/Bouwdeel/name + ' > BO/Bouwdelen/isolatie/'+ classifications/Bouwdeel/name+'[Woning_rel]',
					..,
					bool);
				container IsolatieMaatregel_rel := for_each_nedv(
					classifications/Bouwdeel/name,
					'not(IsChangedNow/'+classifications/Bouwdeel/name+') ? (0/0)[Classifications/IsolatieMaatregel] : rlookup('+quote(classifications/Bouwdeel/name+ '_')+' + Classifications/IsolatieNiveau/name[Isolatie/' + classifications/Bouwdeel/name + '[Classifications/IsolatieNiveau]], Classifications/IsolatieMaatregel/name)',
					..,
					Classifications/IsolatieMaatregel);
				container Ki_gv := for_each_nedv(
					classifications/Bouwdeel/name,
					'makedefined(BO/Bouwdelen/'+classifications/Bouwdeel/name+'[Woning_rel] * Classifications/IsolatieMaatregel/kosten/Zst_Egw_Ind[IsolatieMaatregel_rel/'+classifications/Bouwdeel/name+'], 0.0[Eur])', //TODO: variatie kostenkental
					..,
					Eur)
				{
					attribute<Eur> Totaal (...):= ='add('+AsItemList(Classifications/bouwdeel/name)+')';
				}
			}
			container Functioneel
			{
				attribute<GJ_yr> VT (..) := BO/Functioneel/VT[Woning_rel];
				attribute<GJ_yr> KK (..) := BO/Functioneel/KK[Woning_rel];
				attribute<GJ_yr> EA (..) := BO/Functioneel/EA[Woning_rel];
				attribute<GJ_yr> TW (..) := BO/Functioneel/TW[Woning_rel];
				attribute<GJ_yr> KD (..) := BO/Functioneel/KD[Woning_rel];
				attribute<GJ_yr> RV (..) := RV_per_Bouwdeel_now/Totaal * Correction_RV;
				
				attribute<Kwh_yr_m2> Kwh_m2 (..) := (RV_per_Bouwdeel_now/Totaal / 3.6[MJ / kWh] * 1000 [ MJ / GJ]) / BO/Oppervlakte[Woning_rel];
				
				attribute<ratio> Correction_RV (..) := 1.0[ratio] + Invoer/Kengetallen/Constanten/Rebound_A * Invoer/Kengetallen/Constanten/Rebound_B ^ Kwh_m2;
			
				container BouwdeelIsolatie_rel := for_each_nedv(
					classifications/Bouwdeel/name,
					'not(Bouwdelen/IsChangedNow/'+classifications/Bouwdeel/name+
					')? rlookup('+quote(classifications/Bouwdeel/name+ '_')+' + Classifications/IsolatieNiveau/name[BO/Bouwdelen/Isolatie/' + classifications/Bouwdeel/name + '[WOning_rel][Classifications/IsolatieNiveau]], Classifications/BouwdeelIsolatie/name)
					: rlookup('+quote(classifications/Bouwdeel/name+ '_')+' + Classifications/IsolatieNiveau/name[Bouwdelen/Isolatie/' + classifications/Bouwdeel/name + '[Classifications/IsolatieNiveau]], Classifications/BouwdeelIsolatie/name)',
					..,
					Classifications/BouwdeelIsolatie);
				
				container RV_per_Bouwdeel_now := for_each_nedv(
					classifications/Bouwdeel/name,
					'BO/Functioneel/RV_N1_per_Bouwdeel_now/'+classifications/Bouwdeel/name+'[Woning_rel] * (1.0[ratio] - makedefined(Classifications/IsolatieMaatregel/R_RV/MG[Classifications/BouwdeelIsolatie/IsolatieMaatregel_rel[BouwdeelIsolatie_rel/'+classifications/Bouwdeel/name+']] / 100[percent], 1.0[ratio]))',
					..,
					GJ_yr) //TODO: R_RV afhankelijk van profiel
				{
					attribute<GJ_yr> Totaal (...):= ='add('+AsItemList(Classifications/bouwdeel/name)+')';
				}
			}
			
			
			
			container Aansluitcapaciteit;
			// hier te berekenen: Funcionele vraag en Aansluitcapaciteit
		}
		attribute<bool> Inactief(BO) := not(not(BO/Afbouw) && BO/Activatie/BouwdeelActief);
		unit<uint32> Inactief_selected := select_unit(Inactief);
		
		unit<uint32> AWxIAuIW := union_unit(AWxIA, Inactief_selected)
		,	Descr = "union van AWxIA met niet overlappende niet bouwdeel geactiveerde woningen"
		{
			attribute<BO> Woning_rel := union_data(AWxIAuIW, AWxIA/Woning_rel, select_data(Inactief_selected, ID(BO)));
			
			attribute<Classifications/IsolatieAmbitie> IsolatieAmbitie_rel := union_data(AWxIAuIW, AWxIA/IsolatieAmbitie_rel, const((0/0)[Classifications/IsolatieAmbitie], Inactief_selected) );
			
			container Bouwdelen
			{
				container Isolatie := for_each_nedv(classifications/Bouwdeel/name
				,	replace(
						'union_data(AWxIAuIW, AWxIA/Bouwdelen/Isolatie/@BD, select_data(Inactief_selected, BO/Bouwdelen/Isolatie/@BD))'
					,	'@BD', classifications/Bouwdeel/name
					)
				,	..,  Classifications/IsolatieNiveau
				);
				
				container Ki_gv := for_each_nedv(
					classifications/Bouwdeel/name,
					'union_data(AWxIAuIW, AWxIA/Bouwdelen/Ki_gv/'+classifications/Bouwdeel/name+', const(0.0[Eur], Inactief_selected))',	
					..,
					Eur)
				{
					attribute<Eur> Totaal (...):= ='add('+AsItemList(Classifications/bouwdeel/name)+')';
				}
				
			}
			
		}
	}
	

	container results
	{
		container geen
		{
			container bouwdelen //uitkomsten per bouwdeel per ambitieniveau
			{
				container IsChangedNow //is er in dit ambitieniveau een verandering in het bouwdeel?
				{
					attribute<bool> RO (.....) := const(true,.....);
					attribute<bool> RB (.....) := const(false,.....);  //hier linken naar uitkomsten keuze per ambitieniveau: veranderd of niet
					attribute<bool> DR (.....) := const(true,.....);
					attribute<bool> PL (.....) := const(false,.....);
					attribute<bool> VL (.....) := const(true,.....);
					attribute<bool> MG (.....) := const(false,.....);
					attribute<bool> MS (.....) := const(true,.....);
					attribute<bool> DP (.....) := const(false,.....);
					attribute<bool> DS (.....) := const(true,.....);
					attribute<bool> KR (.....) := const(false,.....);
				}
				attribute<Classifications/IsolatieNiveau> RO (....) := IsChangedNow/RO ? BO/Bouwdelen/Isolatie/RO[nr_orgentity] : Classifications/IsolatieNiveau/V/N3;
				attribute<Classifications/IsolatieNiveau> RB (....) := IsChangedNow/RB ? BO/Bouwdelen/Isolatie/RB[nr_orgentity] : Classifications/IsolatieNiveau/V/N3; //hier linken naar uitkomsten keuze per ambitieniveau: welk nieuw niveau
				attribute<Classifications/IsolatieNiveau> DR (....) := IsChangedNow/DR ? BO/Bouwdelen/Isolatie/DR[nr_orgentity] : Classifications/IsolatieNiveau/V/N3;
				attribute<Classifications/IsolatieNiveau> PL (....) := IsChangedNow/PL ? BO/Bouwdelen/Isolatie/PL[nr_orgentity] : Classifications/IsolatieNiveau/V/N3;
				attribute<Classifications/IsolatieNiveau> VL (....) := IsChangedNow/VL ? BO/Bouwdelen/Isolatie/VL[nr_orgentity] : Classifications/IsolatieNiveau/V/N3;
				attribute<Classifications/IsolatieNiveau> MG (....) := IsChangedNow/MG ? BO/Bouwdelen/Isolatie/MG[nr_orgentity] : Classifications/IsolatieNiveau/V/N3;
				attribute<Classifications/IsolatieNiveau> MS (....) := IsChangedNow/MS ? BO/Bouwdelen/Isolatie/MS[nr_orgentity] : Classifications/IsolatieNiveau/V/N3;
				attribute<Classifications/IsolatieNiveau> DP (....) := IsChangedNow/DP ? BO/Bouwdelen/Isolatie/DP[nr_orgentity] : Classifications/IsolatieNiveau/V/N3;
				attribute<Classifications/IsolatieNiveau> DS (....) := IsChangedNow/DS ? BO/Bouwdelen/Isolatie/DS[nr_orgentity] : Classifications/IsolatieNiveau/V/N3;
				attribute<Classifications/IsolatieNiveau> KR (....) := IsChangedNow/KR ? BO/Bouwdelen/Isolatie/KR[nr_orgentity] : Classifications/IsolatieNiveau/V/N3;
			}
			container kosten //kosten van isolatiemaatregelen indien dit ambitieniveau wordt toegepast
			{
				attribute<eur> RO (....) := const(500[eur],....); //hier linken naar kostenberekening per ambitieniveau (nu dummygetal)
				attribute<eur> RB (....) := const(  0[eur],....);
				attribute<eur> DR (....) := const(400[eur],....);
				attribute<eur> PL (....) := const(  0[eur],....);
				attribute<eur> VL (....) := const(300[eur],....);
				attribute<eur> MG (....) := const(  0[eur],....);
				attribute<eur> MS (....) := const(200[eur],....);
				attribute<eur> DP (....) := const(  0[eur],....);
				attribute<eur> DS (....) := const(100[eur],....);
				attribute<eur> KR (....) := const(  0[eur],....);
				
				attribute<eur> Ki_gv (....) := ='add('+ AsItemList(Classifications/Bouwdeel/name) + ')';
			}
			container functioneel //nieuwe functionele vraag indien dit ambitieniveau wordt toegepast
			{
				attribute<GJ_yr> RV (....) := const(20.5[GJ_yr], ....); //hier linken naar besparingsberekening per ambitieniveau (nu dummygetal)
				attribute<GJ_yr> KD (....) := const( 7.1[GJ_yr], ....);
				attribute<GJ_yr> VT (....) := const( 1.5[GJ_yr], ....);
				
				attribute<GJ_yr> TW (....) := BO/Functioneel/TW[nr_orgentity];
				attribute<GJ_yr> EA (....) := BO/Functioneel/EA[nr_orgentity];
				attribute<GJ_yr> KK (....) := BO/Functioneel/KK[nr_orgentity];
				
				attribute<Classifications/Schillabel> Schillabel_rel (....) := BO/Schillabel_rel[nr_orgentity]; //indeling in schillabels o.b.v. functionele vraag -> herbereken met nieuwe Vrv
			}
			container AansluitCapaciteit
			{
				attribute<kW> RV (....) := functioneel/RV * 0.25[kW_GJ_yr]; //later invullen (nu dummygetal)
				attribute<kW> KD (....) := BO/AansluitCapaciteit/KD[nr_orgentity];
				attribute<kW> TW (....) := BO/AansluitCapaciteit/TW[nr_orgentity];
			}
		}
		container laag := geen;
		container midden := geen; //straks per ambitieniveau gevuld
		container hoog := geen;
		container extreem := geen;
	}
	// end placeholder
	
	//TODO: voor woningen die alleen actief zijn op bouwdelen en niet op producten: hier afweging maken definitieve allocatie
	attribute<bool> ProductActief := BO/Activatie/ProductActief[nr_orgentity];
	unit<uint32> ProductInactieveBO := subset(not(ProductActief))
	{
		attribute<string> code := BouwdeelActieveWoning/code[nr_orgentity];
		container Afweging
		{
			attribute<Classifications/IsolatieAmbitie> Ambitie_chosen (..) := const(Classifications/IsolatieAmbitie/V/geen, ProductInactieveBO); //Verwijzen naar gekozen niveau (nu constant als placeholder)
			attribute<Classifications/Schillabel>      Schillabel_rel (..) := ='merge(Ambitie_chosen, Classifications/Schillabel, '+AsItemList('Results/'+Classifications/IsolatieAmbitie/name+'/functioneel/Schillabel_rel[nr_orgentity]')+')';
			
			container bouwdelen //uitkomsten per bouwdeel per ambitieniveau
			{
				container isolatie := for_each_nedv(
					Classifications/Bouwdeel/name,
					'merge(Ambitie_chosen,Classifications/IsolatieNiveau, '+
						replace(AsItemList( replace('Results/@IA@/Bouwdelen/@BD@[nr_orgentity]', '@IA@', Classifications/IsolatieAmbitie/name)), '@BD@', Classifications/Bouwdeel/name )+')',
					...,
					Classifications/IsolatieNiveau);
			}
			container kosten := for_each_nedv(
					Classifications/Bouwdeel/name,
					'merge(Ambitie_chosen,Eur, '+
						replace(AsItemList( replace('Results/@IA@/kosten/@BD@[nr_orgentity]', '@IA@', Classifications/IsolatieAmbitie/name)), '@BD@', Classifications/Bouwdeel/name )+')',
					..,
					Eur)
			{
				attribute<eur> Ki_gv (...) := ='merge(Ambitie_chosen, eur, '+AsItemList('Results/'+Classifications/IsolatieAmbitie/name+'/kosten/Ki_gv[nr_orgentity]')+')';
			}
			container functioneel := for_each_nedv(
					Classifications/FunctioneleVraag/name,
					'merge(Ambitie_chosen,GJ_yr, '+
						replace(AsItemList( replace('Results/@IA@/functioneel/@PT@[nr_orgentity]', '@IA@', Classifications/IsolatieAmbitie/name)), '@PT@', Classifications/FunctioneleVraag/name )+')',
					..,
					GJ_yr);
			container AansluitCapaciteit := for_each_nedv(
					Classifications/ProductType/name,
					'merge(Ambitie_chosen,kW, '+
						replace(AsItemList( replace('Results/@IA@/AansluitCapaciteit/@PT@[nr_orgentity]', '@IA@', Classifications/IsolatieAmbitie/name)), '@PT@', Classifications/ProductType/name )+')',
					..,
					kW);
		}
		container ResultsPerBO
		{
			attribute<uint32>                     ProductInactieveBO_rel (BO) := rlookup(BO/code, ProductInactieveBO/code);
			attribute<Classifications/Schillabel> Schillabel_rel         (BO) := Afweging/Schillabel_rel[ProductInactieveBO_rel];
			
			container bouwdelen
			{
				container isolatie:= for_each_nedv(
					Classifications/Bouwdeel/name,
					'Afweging/bouwdelen/isolatie/'+Classifications/Bouwdeel/name+'[ProductInactieveBO_rel]',
					BO,
					Classifications/IsolatieNiveau);
			}
			container kosten := for_each_nedv(
					Classifications/Bouwdeel/name,
					'Afweging/kosten/'+Classifications/Bouwdeel/name+'[ProductInactieveBO_rel]',
					BO,
					Eur)
			{
				attribute<eur> Ki_gv (BO) := Afweging/kosten/Ki_gv[ProductInactieveBO_rel];
			}
			container functioneel := for_each_nedv(
				Classifications/FunctioneleVraag/name,
				'Afweging/functioneel/'+Classifications/FunctioneleVraag/name+'[ProductInactieveBO_rel]',
				BO,
				GJ_yr);
			container aansluitcapaciteit := for_each_nedv(
				Classifications/ProductType/name,
				'Afweging/aansluitcapaciteit/'+Classifications/ProductType/name+'[ProductInactieveBO_rel]',
				BO,
				kW);
			
			container metervraag := for_each_nedv(
				Classifications/BemeterdeGebouwInput/name,
				'const(10[GJ_yr],BO)',
				BO,
				GJ_yr);//TODO: recalculate metervraag met huidige installaties
		}
	}
}