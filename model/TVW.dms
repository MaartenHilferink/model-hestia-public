
//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) Hestia 2022 - PBL & TNO                                        //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

container TVW
{
	container gemeente
	{
		unit<uint32> gemeente_input
			:	StorageName     = "%HestiaDataDir%/TVW/Gemeente.csv"
			,	StorageType     = "gdal.vect"
			,	StorageReadOnly = "True"
			{
				attribute<string> label :=  uppercase(id_gm_code_);
			}

		unit<uint32> GM := RuimtelijkeData/StudieGebied/Gemeente
		{
			attribute<gemeente_input> input_rel := rlookup(GM_code, uppercase(gemeente_input/label));
			attribute<bool>           has_TVW   := isDefined(input_rel);
			attribute<nrAsl>          nr_Asl    := sum(TussenResultaten/StartJaar/BebouwingsComponenten/Woning/BO/nrAansluitingen, Invoer/RuimtelijkeData/StudieGebied/Buurt/Gemeente_rel[TussenResultaten/StartJaar/BebouwingsComponenten/Woning/BO/PlanRegio_rel]);
		}
	}

	container document
	{
		unit<uint32> document_input
			:	StorageName     = "%HestiaDataDir%/TVW/Document.csv"
			,	StorageType     = "gdal.vect"
			,	StorageReadOnly = "True"
			{
				attribute<string> label :=  uppercase(id_doc_code_);	
			}

		unit<uint32> DC := document_input
		{
			attribute<Class/doctype>   doctype_rel   := uint32(doc_type_code_);
			attribute<Class/docstatus> docstatus_rel := uint32(doc_status_tekst_);
			attribute<gemeente/GM>     GM_rel        := rlookup(gemeente_gem_code_, gemeente/GM/GM_code);
		}
	}
	
	container plan
	{
		unit<uint32> plantabel_input
			:	StorageName     = "%HestiaDataDir%/TVW/plan.csv"
			,	StorageType     = "gdal.vect"
			,	StorageReadOnly = "True"
			{
				attribute<string> label :=  uppercase(id_pln_code_);	
				attribute<planshape_input> shp_rel :=  rlookup(uppercase(id_pln_code_), uppercase(planshape_input/pln_code));	
			}
		unit<uint32> planshape_input_complex
			:	StorageName     = "%HestiaDataDir%/TVW/TVW_Plan.shp"
			,	StorageType     = "gdal.vect"
			,	StorageReadOnly = "True"
			{
				attribute<string> label :=  uppercase(pln_code);	

				attribute<bool> geom_ok := isDefined(geometry);

				attribute<geography/rdc_meter> geometry_RD (poly) := LatLongWgs842RD(geometry, geography/rdc_meter);
			}

		unit<uint32> planshape_input
			:	StorageName     = "%HestiaDataDir%/TVW/TVW_Plan_simplified.shp"
			,	StorageType     = "gdal.vect"
			,	StorageReadOnly = "True"
			{
				attribute<string> label :=  uppercase(pln_code);	

				attribute<bool> geom_ok := isDefined(geometry);

				attribute<geography/rdc_meter> geometry (poly);
				attribute<geography/rdc_meter> geometry_RD (poly) := geometry;
			}

		unit<uint32> PL := plantabel_input
		{
			attribute<geography/rdc_meter>  geometry (poly)    := planshape_input/geometry_RD[shp_rel], IntegrityCheck = "isDefined(this)";

			attribute<string> 				Plan_code 		   := plantabel_input/id_pln_code_;
			attribute<string>               Plan_naam          := plantabel_input/naam_tekst_;
			attribute<document/DC>          DC_rel             := isDefined(rlookup(document_doc_code_, document/DC/label)) ? rlookup(document_doc_code_, document/DC/label) : rlookup('DC' + substr(label, 2, 6), uppercase(document/DC/label)), IntegrityCheck = "isDefined(this)";
			attribute<gemeente/GM>          GM_rel             := isDefined(document/DC/GM_rel[DC_rel]) ? document/DC/GM_rel[DC_rel] : rlookup('GM' + substr(label, 2, 4), uppercase(gemeente/GM/GM_code)), IntegrityCheck = "isDefined(this)";
			attribute<string> 		     	Plan_doel 		   := plantabel_input/pln_doel_tekst_;

			attribute<Class/Plansoort>      Plansoort_rel      := uint32(Plansoort_code_)              , IntegrityCheck = "isDefined(this)"; // Integritycheck geeft error want er staan 8 plannen met onbekend in, wat geen uint32 is. Heb deze in de csv veradnert, als tijdelijke oplossing/.
			attribute<Class/Planstatus>     Planstatus_rel     := uint32(pln_planstatus_code_code_)    , IntegrityCheck = "isDefined(this)";
			attribute<Class/Techniekstatus> Techniekstatus_rel := uint32(pln_techniekstatus_code_code_), IntegrityCheck = "isDefined(this)";
			attribute<Class/Isolatiegraad>  Isolatiegraad_rel  := uint32(isolatiegraad_code_code_)     , IntegrityCheck = "isDefined(this)";
			attribute<Class/Installatie>    Installatie_rel    := uint32(installatie_code_code_)       , IntegrityCheck = "isDefined(this)";
			attribute<Class/Infrastructuur> Infrastructuur_rel := uint32(infrastructuur_code_code_)    , IntegrityCheck = "isDefined(this)";
			attribute<Class/Energiebron>    Energiebron_rel    := uint32(energiebron_code_code_)       , IntegrityCheck = "isDefined(this)";

			//attribute<nrAsl>                nrAansluitingen    := VBO/Matching/VBO_count                , IntegrityCheck = "isDefined(this)";
			container Matching
			{
				attribute<ipoint> 				geometry_i  		(PL, poly) 			         			   := ipolygon(geometry);
				
				container Gemeentes
				{
					attribute<geography/rdc_meter>  gemeente_geometry   (Geography/RegioIndelingen/Gemeente, poly) := Geography/RegioIndelingen/Gemeente/geometry;
					attribute<ipoint>			 	gemeente_geometry_i (Geography/RegioIndelingen/Gemeente, poly) := ipolygon(gemeente_geometry);

					unit<uint32>      GemeenteKruistabel := overlay_polygon(geometry_i, gemeente_geometry_i);
					attribute<uint32> Aantal  		(PL) := count(GemeenteKruistabel/second_rel, GemeenteKruistabel/first_rel);
				}
				
				container Bedrijventerreinen
				{
				unit<uint32>      BedrijventerreinenKruistabel := overlay_polygon(geometry_i, UBouw/Bedrijventerreinshape_input/geometry_bedrijventerrein_i);
				attribute<uint32> Aantal (PL) 				   := count(BedrijventerreinenKruistabel/second_rel, BedrijventerreinenKruistabel/first_rel);
				}
			}
		}		
		
		container Subsets
		{
			unit<uint32> BinnenEindjaarCutoff := select_many(PL, Woning/matching/eindjaar/binnen_cutoff);

			unit<uint32> WnetConcreet := select_many(PL, 
			PL/Installatie_rel == Class/Installatie/V/Wnet 
			&& Class/Energiebron/aquathermie[PL/Energiebron_rel]             == False  
			&& Class/Energiebron/geothermie[PL/Energiebron_rel]              == False
			&& Class/Energiebron/onbekend[PL/Energiebron_rel]                == False
			&& Class/Energiebron/niet_specifiek_benoemd[PL/Energiebron_rel]  == False
			&& Class/Energiebron/niet_van_toepassing[PL/Energiebron_rel]     == False
			&& Class/Energiebron/diverse_opties_mogelijk[PL/Energiebron_rel] == False )
			{
				container MatchingGemeentes
				{
					attribute<ipoint> 				geometry_i  		(WnetConcreet, poly) 			           := ipolygon(geometry);
					attribute<geography/rdc_meter>  gemeente_geometry   (Geography/RegioIndelingen/Gemeente, poly) := Geography/RegioIndelingen/Gemeente/geometry;
					attribute<ipoint>			 	gemeente_geometry_i (Geography/RegioIndelingen/Gemeente, poly) := ipolygon(gemeente_geometry);

					unit<uint32>      GemeenteKruistabel             := overlay_polygon(geometry_i, gemeente_geometry_i);
					attribute<uint32> AantalGemeentes (WnetConcreet) := count(GemeenteKruistabel/second_rel, GemeenteKruistabel/first_rel);
				}
			}
			
			unit<uint32> WnetMeerdereGemeentes := select_many(PL, 
				PL/Matching/Gemeentes/Aantal > 1
				&& PL/Installatie_rel == Class/Installatie/V/Wnet );
			
			unit<uint32> WnetConcreetMeerdereGemeentes := select_many(WnetConcreet, WnetConcreet/MatchingGemeentes/AantalGemeentes > 1);

			unit<uint32> PL_Bedrijventerrein_Ratio_80  := select_afew(PL, UBouw/Matching/RatioUBouw_plan > 0.79)
			{
				attribute<ratio>  RatioUBouw  (PL_Bedrijventerrein_Ratio_80) := UBouw/Matching/RatioUBouw_plan[org_rel];
			}
			
			unit<uint32> PL_Bedrijventerrein_naam      := select_afew(PL, UBouw/Matching/BedrijventerreinInNaam)
			{
				attribute<ratio>  RatioUBouw  (PL_Bedrijventerrein_naam) := UBouw/Matching/RatioUBouw_plan[org_rel];
				attribute<nrAsl>  VBO_count   (PL_Bedrijventerrein_naam) := UBouw/Matching/VBO_count[org_rel];
				attribute<nrAsl>  UBouw_count (PL_Bedrijventerrein_naam) := UBouw/Matching/UBouw_count[org_rel];
				attribute<ipoint> geometry_i  (poly) 			         := ipolygon(geometry);
				unit<uint32>      BedrijventerreinenKruistabel           := overlay_polygon(geometry_i, UBouw/Bedrijventerreinshape_input/geometry_bedrijventerrein_i);
			}
			
			unit<uint32> PL_Bedrijventerrein_doel      := select_afew(PL, UBouw/Matching/BedrijventerreinInDoel)
			{
				attribute<ratio>  RatioUBouw  (PL_Bedrijventerrein_doel) := UBouw/Matching/RatioUBouw_plan[org_rel];
				attribute<nrAsl>  VBO_count   (PL_Bedrijventerrein_doel) := UBouw/Matching/VBO_count[org_rel];
				attribute<nrAsl>  UBouw_count (PL_Bedrijventerrein_doel) := UBouw/Matching/UBouw_count[org_rel];					
				attribute<ipoint> geometry_i  (poly) 			         := ipolygon(geometry);
				unit<uint32>      BedrijventerreinenKruistabel           := overlay_polygon(geometry_i, UBouw/Bedrijventerreinshape_input/geometry_bedrijventerrein_i);
			}
			
			unit<uint32> PL_Bedrijventerrein      := select_afew(PL, UBouw/Matching/BedrijventerreinInDoel || UBouw/Matching/BedrijventerreinInNaam)
			{
				attribute<ratio>  RatioUBouw  (PL_Bedrijventerrein) := UBouw/Matching/RatioUBouw_plan[org_rel];
				attribute<nrAsl>  VBO_count   (PL_Bedrijventerrein) := UBouw/Matching/VBO_count[org_rel];
				attribute<nrAsl>  UBouw_count (PL_Bedrijventerrein) := UBouw/Matching/UBouw_count[org_rel];
				attribute<ipoint> geometry_i  (poly) 			    := ipolygon(geometry);
				unit<uint32>      BedrijventerreinenKruistabel      := overlay_polygon(geometry_i, UBouw/Bedrijventerreinshape_input/geometry_bedrijventerrein_i);
				attribute<uint32> AantalBedrijventerreinen (PL_Bedrijventerrein) := count(BedrijventerreinenKruistabel/second_rel, BedrijventerreinenKruistabel/first_rel);
			}
			
			unit<uint32> PL_OpBedrijventerrein := select_afew(PL, PL/Matching/Bedrijventerreinen/Aantal > 0)
			{			
				attribute<ipoint> geometry_i  (poly) 		   := ipolygon(geometry);
				unit<uint32>      BedrijventerreinenKruistabel := overlay_polygon(geometry_i, UBouw/Bedrijventerreinshape_input/geometry_bedrijventerrein_i);

			}
			unit<uint32> PL_Bedrijventerrein_OpBedrijventerrein := select_many(PL_Bedrijventerrein, PL_Bedrijventerrein/AantalBedrijventerreinen > 0)
			{			
				attribute<ipoint> geometry_i  (poly) 		   := ipolygon(geometry);
				unit<uint32>      BedrijventerreinenKruistabel := overlay_polygon(geometry_i, UBouw/Bedrijventerreinshape_input/geometry_bedrijventerrein_i);

			}
		}

		unit<uint32> VBO := /Invoer/RuimtelijkeData/BAG/import/VBO
		{
			attribute<nrAsl> nr_Asl := const(1.0[nrAsl],.);

			container Matching
			{
				unit<uint32> p := VBO
				{
					attribute<geography/rdc_meter> xy (p) := VBO/geometry;
				}

				// driehoek wordt alleen gebruikt in workaround voor point_in_all_polygons voor GeoDmsVersion < 8.031				
				attribute<geography/rdc_meter> driehoek  (p, poly)  :=
					points2sequence(
						union_data(union_unit(p,p,p,p), p/xy, p/xy+point(0.1,0.0), p/xy+point(0.1,0.1), p/xy),
						union_data(union_unit(p,p,p,p), id(p), id(p), id(p), id(p)),
						union_data(union_unit(p,p,p,p), const(0,p), const(1,p), const(2,p), const(3,p))
									);
				parameter<string> piap_expr := 'point_in_all_polygons(p/xy, PL/geometry)';
				parameter<string> workaround := 'overlay_polygon(driehoek[geography/rdc_mm], PL/geometry[geography/rdc_mm])';
				unit<uint32> kruistabel  := =(GeoDmsVersion() > 8.0305) ? piap_expr : workaround;


				attribute<uint32> PL_count (p) := pcount(kruistabel/first_rel);
				
				attribute<uint32> P_count   (PL) := pcount(kruistabel/second_rel);
				attribute<nrAsl>  VBO_count (PL) := sum(nr_Asl[kruistabel/first_rel], kruistabel/second_rel);
			
				
				attribute<Geography/RegioIndelingen/gemeente> Gemeente(p) := VBO/Gemeente_rel;
			}
			
			container CBSKoppeling_MateVanStedelijkheid
			{	
				container VBONiveau
				{
					attribute<Uint32> MateVanStedelijkheidVBO (VBO) := /Geography/RegioIndelingen/Buurt/STED[buurt_rel][Uint32];
					attribute<nrAsl> ZeerSterkStedelijk      (VBO) := float64(MateVanStedelijkheidVBO == 1[Uint32]) *nr_Asl;
					attribute<nrAsl> SterkStedelijk 		 (VBO) := float64(MateVanStedelijkheidVBO == 2[Uint32]) *nr_Asl;
					attribute<nrAsl> MatigStedelijk 		 (VBO) := float64(MateVanStedelijkheidVBO == 3[Uint32]) *nr_Asl;
					attribute<nrAsl> WeinigStedelijk 		 (VBO) := float64(MateVanStedelijkheidVBO == 4[Uint32]) *nr_Asl;
					attribute<nrAsl> NietStedelijk 			 (VBO) := float64(MateVanStedelijkheidVBO == 5[Uint32]) *nr_Asl;
				  //attribute<nrAsl> Overigstedelijk 		 (VBO) := float64(MateVanStedelijkheidVBO == -99999999[Uint32] ) *nr_Asl;
				  
					attribute<Uint32> OmgevingsAdressenDichtheid (VBO) := /Geography/RegioIndelingen/Buurt/OAD[buurt_rel][Uint32];
				}
				
				container PlanNiveau
				{
					attribute<nrAsl>  VBO_count_ZeerSterkStedelijk (PL) := sum(VBONiveau/ZeerSterkStedelijk[Matching/kruistabel/first_rel], Matching/kruistabel/second_rel);
					attribute<nrAsl>  VBO_count_SterkStedelijk     (PL) := sum(VBONiveau/SterkStedelijk    [Matching/kruistabel/first_rel], Matching/kruistabel/second_rel);
					attribute<nrAsl>  VBO_count_MatigStedelijk 	   (PL) := sum(VBONiveau/MatigStedelijk	   [Matching/kruistabel/first_rel], Matching/kruistabel/second_rel);
					attribute<nrAsl>  VBO_count_WeinigStedelijk    (PL) := sum(VBONiveau/WeinigStedelijk   [Matching/kruistabel/first_rel], Matching/kruistabel/second_rel);
					attribute<nrAsl>  VBO_count_NietStedelijk 	   (PL) := sum(VBONiveau/NietStedelijk	   [Matching/kruistabel/first_rel], Matching/kruistabel/second_rel);
				  //attribute<nrAsl>  VBO_count_Overigstedelijk    (PL) := sum(VBONiveau/Overigstedelijk   [Matching/kruistabel/first_rel], Matching/kruistabel/second_rel);
				  
				  	attribute<Uint32>  OmgevingsAdressenDichtheid  (PL) := mean(VBONiveau/OmgevingsAdressenDichtheid	   [Matching/kruistabel/first_rel], Matching/kruistabel/second_rel);
				}		
			}
		}
		
		unit<uint32> UBouw := /Invoer/RuimtelijkeData/BAG/vbo_utiliteit_studiegebied 
		{
			attribute<nrAsl> nr_Asl := const(1.0[nrAsl],.);
			
			container Matching
			{
				unit<uint32> p := Ubouw
				{
					attribute<geography/rdc_meter> xy (p) := Ubouw/geometry;
				}

				// driehoek wordt alleen gebruikt in workaround voor point_in_all_polygons voor GeoDmsVersion < 8.031				
				attribute<geography/rdc_meter> driehoek  (p, poly)  :=
					points2sequence(
						union_data(union_unit(p,p,p,p), p/xy, p/xy+point(0.1,0.0), p/xy+point(0.1,0.1), p/xy),
						union_data(union_unit(p,p,p,p), id(p), id(p), id(p), id(p)),
						union_data(union_unit(p,p,p,p), const(0,p), const(1,p), const(2,p), const(3,p))
									);
				parameter<string> piap_expr := 'point_in_all_polygons(p/xy, PL/geometry)';
				parameter<string> workaround := 'overlay_polygon(driehoek[geography/rdc_mm], PL/geometry[geography/rdc_mm])';
				unit<uint32> kruistabel  := =(GeoDmsVersion() > 8.0305) ? piap_expr : workaround;

				attribute<uint32> PL_count    (p)  := pcount(kruistabel/first_rel);
				attribute<uint32> P_count     (PL) := pcount(kruistabel/second_rel);
				attribute<nrAsl>  VBO_count   (PL) := Invoer/TVW/plan/VBO/Matching/VBO_count;
				attribute<nrAsl>  UBouw_count (PL) := sum(nr_Asl[kruistabel/first_rel], kruistabel/second_rel);
				
				attribute<ratio> RatioUBouw_plan        (PL) := UBouw_count / VBO_count;
				attribute<bool>  BedrijventerreinInNaam (PL) := strcount(lowercase(PL/Plan_naam), 'bedrijventerrein')   > 0;
				attribute<bool>  BedrijventerreinInDoel (PL) := strcount(lowercase(PL/Plan_doel), 'bedrijventerrein')   > 0;
			}
			
			unit<uint32> Bedrijventerreinshape_input
			:	StorageName     = "%ProjDir%/Bedrijventerreinen/IBIS_NL_2021_20220712/IBIS_NL_2021.shp" // Dit pad is tijdelijk. Data moet uiteindelijk naar SD
			,	StorageType     = "gdal.vect"
			,	StorageReadOnly = "True"
			{
				attribute<string> label :=  uppercase(Plan_naam);	

				attribute<bool> geom_ok := isDefined(geometry);

				attribute<geography/rdc_meter> geometry (poly);
				attribute<ipoint> geometry_bedrijventerrein_i (Bedrijventerreinshape_input, poly) := ipolygon(Bedrijventerreinshape_input/geometry);
			}
		}

		unit<uint32> Woning := /Invoer/RuimtelijkeData/BAG/vbo_woonfunctie_studiegebied
		{
			attribute<nrAsl> nr_Asl := const(1.0[nrAsl],.);

			container Matching
			{
				unit<uint32> p := woning
				{
					attribute<geography/rdc_meter> xy (p) := woning/geometry;
				}

				// driehoek wordt alleen gebruikt in workaround voor point_in_all_polygons voor GeoDmsVersion < 8.031				

				attribute<geography/rdc_meter> driehoek  (p, poly)  :=
					points2sequence(
						union_data(union_unit(p,p,p,p), p/xy, p/xy+point(0.1,0.0), p/xy+point(0.1,0.1), p/xy),
						union_data(union_unit(p,p,p,p), id(p), id(p), id(p), id(p)),
						union_data(union_unit(p,p,p,p), const(0,p), const(1,p), const(2,p), const(3,p))
									);
				parameter<string> piap_expr := 'point_in_all_polygons(p/xy, Subsets/BinnenEindjaarCutoff/geometry)';
				parameter<string> workaround := 'overlay_polygon(driehoek[geography/rdc_mm], Subsets/BinnenEindjaarCutoff/geometry[geography/rdc_mm])';
				unit<uint32> kruistabel  :=  =(GeoDmsVersion() > 8.0305) ? piap_expr : workaround;
				
				container PL_counts
				{
					attribute<float64> totaal(p) := float64(pcount(kruistabel/first_rel));

					container Isolatie
					{
						unit<uint32> PL_subset         := select_afew(Subsets/BinnenEindjaarCutoff, not(Subsets/BinnenEindjaarCutoff/Isolatiegraad_rel == Class/Isolatiegraad/V/onbekend) && not(Subsets/BinnenEindjaarCutoff/Isolatiegraad_rel == Class/Isolatiegraad/V/geen_maatregelen));
						unit<uint32> kruistabel        :=  point_in_all_polygons(p/xy, PL_subset/geometry);
						attribute<float64> PL_count(p) :=  float64(pcount(kruistabel/first_rel));
					}
					
					// Subsets voor installaties worden niet gebruikt in de berekeningen, maar kunnen later bij specificering misschien nog van pas komen
					container Installaties := for_each_ne(
					Class/Installatie/name,
					'CountInstallations(Class/Installatie/V/' + Class/Installatie/name + ')'
					);
					
					Template CountInstallations
					{
					  // begin case parameters
					  attribute<Class/Installatie> installatie (void);
					  // end case parameters
					
						unit<uint32> PLSubset         := select_afew(Subsets/BinnenEindjaarCutoff, Subsets/BinnenEindjaarCutoff/Installatie_rel == installatie);
						unit<uint32> kruistabel       := point_in_all_polygons(p/xy, PLSubset/geometry);
						attribute<float64> PL_count(p) := float64(pcount(kruistabel/first_rel));
					}
				}

				container eindjaar
				{
					parameter<uint32> start_cutoff := 2000;
					parameter<uint32> eind_cutoff  := 2050;
					attribute<uint32> plan (PL) := uint32(right(trim(plantabel_input/eindjaar_yyyy_),4));
					attribute<bool> binnen_cutoff (PL) := plan > start_cutoff && plan <= eind_cutoff;
				}
				
				attribute<Invoer/RuimtelijkeData/Bebouwing/Woning>   				    ruimtelijkedata_rel          (woning):= rlookup(woning/identificatie, /Invoer/RuimtelijkeData/Bebouwing/Woning/code);							
				attribute<BeginSituatie/StartingStateComponenten/Woning/PreStartJaar>   StartingStateComponenten_rel (woning):= rlookup(woning/identificatie, /BeginSituatie/StartingStateComponenten/Woning/PreStartJaar/code);							
			}
			
			container eigendom 
			{
				attribute<nrAsl> Koop     (woning) := float64(woning/eigendom_rel == Classifications/Eigendom/V/Koop)     * nr_Asl;
				attribute<nrAsl> PartHuur (woning) := float64(woning/eigendom_rel == Classifications/Eigendom/V/Parthuur) * nr_Asl;
				attribute<nrAsl> WoonCorp (woning) := float64(woning/eigendom_rel == Classifications/Eigendom/V/Wooncorp) * nr_Asl;			
			}
					
			container StandaardGasvraag
			{ 
				attribute<Units/GJ_yr> RV (woning) := /BeginSituatie/StartingStateComponenten/Woning/PreStartJaar/BemeterdeGebouwInput_rel/RVb[Matching/StartingStateComponenten_rel] == /Classifications/BemeterdeGebouwInput/V/Gas 
				? /BeginSituatie/StartingStateComponenten/Woning/Results/Func2Meter/metervraag_per_product/RVb[Matching/ruimtelijkedata_rel] + /BeginSituatie/StartingStateComponenten/Woning/Results/Func2Meter/metervraag_per_product/RVp[Matching/ruimtelijkedata_rel]
				: 0[GJ_yr];
				
				attribute<Units/GJ_yr> TW (woning) := /BeginSituatie/StartingStateComponenten/Woning/PreStartJaar/BemeterdeGebouwInput_rel/TWb[Matching/StartingStateComponenten_rel] == /Classifications/BemeterdeGebouwInput/V/Gas 
				? /BeginSituatie/StartingStateComponenten/Woning/Results/Func2Meter/metervraag_per_product/TWb[Matching/ruimtelijkedata_rel] + /BeginSituatie/StartingStateComponenten/Woning/Results/Func2Meter/metervraag_per_product/twp[Matching/ruimtelijkedata_rel]
				: 0[GJ_yr];
				
				attribute<Units/GJ_yr> totaal (woning) := RV + TW;
			}
			
			container isolatie
			{
				container Any_IsolatiegraadKlasse
				{
					attribute<bool>  onbekend  			(woning) := any(Class/Isolatiegraad/onbekend 						[Subsets/BinnenEindjaarCutoff/Isolatiegraad_rel[Matching/kruistabel/second_rel]], Matching/kruistabel/first_rel);
					attribute<bool>  GeenMaatregelen  	(woning) := any(Class/Isolatiegraad/geen_maatregelen 				[Subsets/BinnenEindjaarCutoff/Isolatiegraad_rel[Matching/kruistabel/second_rel]], Matching/kruistabel/first_rel);
					attribute<bool>  IsolatieGeenNiveau (woning) := any(Class/Isolatiegraad/isolatie_geen_specifiek_niveau 	[Subsets/BinnenEindjaarCutoff/Isolatiegraad_rel[Matching/kruistabel/second_rel]], Matching/kruistabel/first_rel);
					attribute<bool>  StandaardEnStreef  (woning) := any(Class/Isolatiegraad/standaard_en_streefwaarden 		[Subsets/BinnenEindjaarCutoff/Isolatiegraad_rel[Matching/kruistabel/second_rel]], Matching/kruistabel/first_rel);
					attribute<bool>  ALabel  			(woning) := any(Class/Isolatiegraad/A 								[Subsets/BinnenEindjaarCutoff/Isolatiegraad_rel[Matching/kruistabel/second_rel]], Matching/kruistabel/first_rel);
					attribute<bool>  BLabel  			(woning) := any(Class/Isolatiegraad/B								[Subsets/BinnenEindjaarCutoff/Isolatiegraad_rel[Matching/kruistabel/second_rel]], Matching/kruistabel/first_rel);
					attribute<bool>  CLabel  			(woning) := any(Class/Isolatiegraad/C								[Subsets/BinnenEindjaarCutoff/Isolatiegraad_rel[Matching/kruistabel/second_rel]], Matching/kruistabel/first_rel);
					attribute<bool>  DLabel  			(woning) := any(Class/Isolatiegraad/D								[Subsets/BinnenEindjaarCutoff/Isolatiegraad_rel[Matching/kruistabel/second_rel]], Matching/kruistabel/first_rel);
					attribute<bool>  DC1940AB  			(woning) := any(Class/Isolatiegraad/DC_1940_AB_overig 				[Subsets/BinnenEindjaarCutoff/Isolatiegraad_rel[Matching/kruistabel/second_rel]], Matching/kruistabel/first_rel);
					attribute<bool>  DWonenBUtil  		(woning) := any(Class/Isolatiegraad/D_wonen_B_util 					[Subsets/BinnenEindjaarCutoff/Isolatiegraad_rel[Matching/kruistabel/second_rel]], Matching/kruistabel/first_rel);
					attribute<bool>  kWhM2  			(woning) := any(Class/Isolatiegraad/kWh_m2_AB 						[Subsets/BinnenEindjaarCutoff/Isolatiegraad_rel[Matching/kruistabel/second_rel]], Matching/kruistabel/first_rel);
				}
				
				attribute<Classifications/schillabel>     schillabel     	   (woning) := BeginSituatie/StartingStateComponenten/Woning/Results/schillabel_rel[Matching/ruimtelijkedata_rel];
				attribute<Classifications/BouwjaarWoning> bouwjaarklasse 	   (woning) := woning/bouwjaarwoning_rel;
				attribute<Classifications/WoningType>     woningtype     	   (woning) := woning/woningtype_rel;

				unit<uint32> woningtype_bouwjaarklasse := combine_unit(Classifications/WoningType, Classifications/BouwjaarWoning);
				attribute<woningtype_bouwjaarklasse> combine_type_bouwjaar (woning) :=combine_data(woningtype_bouwjaarklasse, woningtype, bouwjaarklasse);
				
				attribute<Classifications/RV_besparing_labelsprong> RV_besparing_labelsprong_huidig_rel (woning) := 
					combine_data(Classifications/RV_besparing_labelsprong, combine_type_bouwjaar, schillabel);
				
				attribute<float64> WordtGeisoleerd (woning) := float64(Any_IsolatiegraadKlasse/IsolatieGeenNiveau || Any_IsolatiegraadKlasse/StandaardEnStreef || Any_IsolatiegraadKlasse/ALabel || Any_IsolatiegraadKlasse/BLabel 
					|| Any_IsolatiegraadKlasse/CLabel || Any_IsolatiegraadKlasse/DLabel || Any_IsolatiegraadKlasse/DC1940AB || Any_IsolatiegraadKlasse/DWonenBUtil || Any_IsolatiegraadKlasse/kWhM2);	
				
				container optimistisch
				{
					attribute<Classifications/schillabel> beoogd_energielabel (woning) := 
						Any_IsolatiegraadKlasse/IsolatieGeenNiveau 			   			? Classifications/schillabel/V/B :
						Any_IsolatiegraadKlasse/StandaardEnStreef 				   		? Classifications/schillabel/V/A :
						Any_IsolatiegraadKlasse/ALabel 									? Classifications/schillabel/V/A :
						Any_IsolatiegraadKlasse/BLabel									? Classifications/schillabel/V/B :
						Any_IsolatiegraadKlasse/CLabel								    ? Classifications/schillabel/V/C :
						Any_IsolatiegraadKlasse/DLabel									? Classifications/schillabel/V/D :
						Any_IsolatiegraadKlasse/DC1940AB  && woning/bouwjaar < 1945w 	? Classifications/schillabel/V/C :
						Any_IsolatiegraadKlasse/DC1940AB  && woning/bouwjaar > 1945w 	? Classifications/schillabel/V/A :
						Any_IsolatiegraadKlasse/DWonenBUtil							   	? Classifications/schillabel/V/D :
						Any_IsolatiegraadKlasse/kWhM2								    ? Classifications/schillabel/V/A :
						Any_IsolatiegraadKlasse/onbekend								? schillabel : 
						Any_IsolatiegraadKlasse/GeenMaatregelen							? schillabel : 	schillabel;
					
					attribute<Classifications/RV_besparing_labelsprong> RV_besparing_labelsprong_beoogd_rel (woning) := 
						combine_data(Classifications/RV_besparing_labelsprong, combine_type_bouwjaar, beoogd_energielabel);
					
					attribute<float64> RVFactorHuidig   (woning) := Classifications/RV_besparing_labelsprong/besparing_F[RV_besparing_labelsprong_huidig_rel];
					attribute<float64> RVFactorBeoogd   (woning) := Classifications/RV_besparing_labelsprong/besparing_F[RV_besparing_labelsprong_beoogd_rel];
					attribute<float64> RVFactorUitkomst (woning) := RVFactorBeoogd / RVFactorHuidig;
					
					attribute<float64> gasbesparingsfactor_schillabel (woning) := beoogd_energielabel < schillabel ? 1[float64] - RVFactorUitkomst : 0d;
					
					attribute<GJ_yr> gasbesparing_RV_isolatie (woning) := gasbesparingsfactor_schillabel * StandaardGasvraag/RV;
					attribute<GJ_yr> gas_RV_na_labelsprong    (woning) := StandaardGasvraag/RV - gasbesparing_RV_isolatie;
				}
				
				container pessimistisch
				{
					attribute<Classifications/schillabel> beoogd_energielabel (woning) := 
						Any_IsolatiegraadKlasse/IsolatieGeenNiveau 			   			? Classifications/schillabel/V/C :
						Any_IsolatiegraadKlasse/StandaardEnStreef 				   		? Classifications/schillabel/V/A :
						Any_IsolatiegraadKlasse/ALabel 									? Classifications/schillabel/V/A :
						Any_IsolatiegraadKlasse/BLabel									? Classifications/schillabel/V/B :
						Any_IsolatiegraadKlasse/CLabel								    ? Classifications/schillabel/V/C :
						Any_IsolatiegraadKlasse/DLabel									? Classifications/schillabel/V/D :
						Any_IsolatiegraadKlasse/DC1940AB  && woning/bouwjaar < 1945w 	? Classifications/schillabel/V/D :
						Any_IsolatiegraadKlasse/DC1940AB  && woning/bouwjaar > 1945w 	? Classifications/schillabel/V/B :
						Any_IsolatiegraadKlasse/DWonenBUtil							   	? Classifications/schillabel/V/D :
						Any_IsolatiegraadKlasse/kWhM2								    ? Classifications/schillabel/V/B : 
						Any_IsolatiegraadKlasse/onbekend								? schillabel : 
						Any_IsolatiegraadKlasse/GeenMaatregelen							? schillabel : schillabel;
					
					attribute<Classifications/RV_besparing_labelsprong> RV_besparing_labelsprong_beoogd_rel (woning) := 
						combine_data(Classifications/RV_besparing_labelsprong, combine_type_bouwjaar, beoogd_energielabel);
					
					attribute<float64> RVFactorHuidig   (woning) := Classifications/RV_besparing_labelsprong/besparing_F[RV_besparing_labelsprong_huidig_rel];
					attribute<float64> RVFactorBeoogd   (woning) := Classifications/RV_besparing_labelsprong/besparing_F[RV_besparing_labelsprong_beoogd_rel];
					attribute<float64> RVFactorUitkomst (woning) := RVFactorBeoogd / RVFactorHuidig;
					
					attribute<float64> gasbesparingsfactor_schillabel (woning) := beoogd_energielabel < schillabel ? 1[float64] - RVFactorUitkomst : 0d;
					
					attribute<GJ_yr> gasbesparing_RV_isolatie (woning) := gasbesparingsfactor_schillabel * StandaardGasvraag/RV;
					attribute<GJ_yr> gas_RV_na_labelsprong    (woning) := StandaardGasvraag/RV - gasbesparing_RV_isolatie;
				}
			}
			
			container Techniekkeuze
			{				
				container BeoogdeInstallaties
				{
					attribute<bool>  Any_hWP  (woning) := any(Class/Installatie/hWP [Subsets/BinnenEindjaarCutoff/Installatie_rel[Matching/kruistabel/second_rel]], Matching/kruistabel/first_rel);
					attribute<bool>  Any_eWP  (woning) := any(Class/Installatie/eWP [Subsets/BinnenEindjaarCutoff/Installatie_rel[Matching/kruistabel/second_rel]], Matching/kruistabel/first_rel);
					attribute<bool>  Any_Wnet (woning) := any(Class/Installatie/Wnet[Subsets/BinnenEindjaarCutoff/Installatie_rel[Matching/kruistabel/second_rel]], Matching/kruistabel/first_rel);
					attribute<bool>  Any_Hr   (woning) := any(Class/Installatie/Hr  [Subsets/BinnenEindjaarCutoff/Installatie_rel[Matching/kruistabel/second_rel]], Matching/kruistabel/first_rel);
					attribute<bool>  Any_onbekend   (woning) := any(Class/Installatie/onbekend  [Subsets/BinnenEindjaarCutoff/Installatie_rel[Matching/kruistabel/second_rel]], Matching/kruistabel/first_rel);
					
					attribute<bool>  Any_hernieuwbaar_gas   (woning) := any(Class/Energiebron/hernieuwbaar_gas [Subsets/BinnenEindjaarCutoff/Energiebron_rel[Matching/kruistabel/second_rel]], Matching/kruistabel/first_rel);
					attribute<bool>  Geen_beoogde_installatie   (woning) := not(Any_eWP) && not(Any_eWP) && not(Any_hWP) && not(Any_Wnet) && not(Any_Hr) && not(Any_onbekend);
					attribute<float64> Only_onbekend (woning) := float64(Any_onbekend && not(Any_hWP) && not(Any_eWP) && not(Only_Wnet) && not(Any_Hr));
					attribute<bool>    Only_onbekend_bool (woning) := Any_onbekend && not(Any_hWP) && not(Any_eWP) && not(Only_Wnet) && not(Any_Hr);

					attribute<float64> Only_hWP     (woning) := float64(    Any_hWP  && not(Any_eWP) && not(Any_Wnet) && not(Any_Hr));
					attribute<float64> Only_eWP     (woning) := float64(not(Any_hWP) &&     Any_eWP  && not(Any_Wnet) && not(Any_Hr));
					attribute<float64> Only_Wnet    (woning) := float64(not(Any_hWP) && not(Any_eWP) &&     Any_Wnet  && not(Any_Hr));
					attribute<float64> Only_Hr      (woning) := float64(not(Any_hWP) && not(Any_eWP) && not(Any_Wnet) &&     Any_Hr );
					
					attribute<float64> hWPeWP       (woning) := float64(    Any_hWP  &&     Any_eWP  && not(Any_Wnet) && not(Any_Hr));
					attribute<float64> hWPWnet      (woning) := float64(    Any_hWP  && not(Any_eWP) &&     Any_Wnet  && not(Any_Hr));
					attribute<float64> hWPHr        (woning) := float64(    Any_hWP  && not(Any_eWP) && not(Any_Wnet) &&     Any_Hr) ;
					attribute<float64> eWPWnet      (woning) := float64(not(Any_hWP) &&     Any_eWP  &&     Any_Wnet  && not(Any_Hr));
					attribute<float64> eWPHr        (woning) := float64(not(Any_hWP) &&     Any_eWP  && not(Any_Wnet) &&     Any_Hr) ;
					attribute<float64> WnetHr       (woning) := float64(not(Any_hWP) && not(Any_eWP) &&     Any_Wnet  &&     Any_Hr) ;
					
					attribute<float64> hWPeWPWnet   (woning) := float64(    Any_hWP  &&     Any_eWP  &&     Any_Wnet  && not(Any_Hr));
					attribute<float64> hWPeWPHr     (woning) := float64(    Any_hWP  &&     Any_eWP  && not(Any_Wnet) &&     Any_Hr) ;
					attribute<float64> hWPWnetHr    (woning) := float64(    Any_hWP  && not(Any_eWP) &&     Any_Wnet  &&     Any_Hr) ;
					attribute<float64> eWPWnetHr    (woning) := float64(not(Any_hWP) &&     Any_eWP  &&     Any_Wnet  &&     Any_Hr) ;
					
					attribute<float64> hWPeWPWnetHr (woning) := float64(    Any_hWP  &&     Any_eWP  &&     Any_Wnet  &&     Any_Hr) ;
				}
	
				container optimistisch_zonder_isolatie
				{
					attribute<float64> gasbesparingsfactor_installatie_RV (woning) := 
						BeoogdeInstallaties/Any_Wnet || BeoogdeInstallaties/Any_eWP 	  ? 1d : 
						BeoogdeInstallaties/Any_hWP && isolatie/schillabel = Classifications/schillabel/V/A ? 0.65d :
						BeoogdeInstallaties/Any_hWP && isolatie/schillabel = Classifications/schillabel/V/B ? 0.63d :
						BeoogdeInstallaties/Any_hWP && isolatie/schillabel = Classifications/schillabel/V/C ? 0.59d :
						BeoogdeInstallaties/Any_hWP && isolatie/schillabel = Classifications/schillabel/V/D ? 0.52d :
						BeoogdeInstallaties/Any_hWP && isolatie/schillabel = Classifications/schillabel/V/E ? 0.47d :
						BeoogdeInstallaties/Any_hWP && isolatie/schillabel = Classifications/schillabel/V/F ? 0.43d :
						BeoogdeInstallaties/Any_hWP && isolatie/schillabel = Classifications/schillabel/V/G ? 0.42d :
						BeoogdeInstallaties/Any_hWP && isolatie/schillabel = Classifications/schillabel/V/N ? 0.42d : 
						BeoogdeInstallaties/Only_onbekend_bool ? 0d : 0d;

					attribute<float64> gasbesparingsfactor_installatie_TW (woning) := 
						BeoogdeInstallaties/Any_Wnet || BeoogdeInstallaties/Any_eWP 	  ? 1d : 0d;
						
					attribute<GJ_yr> gas_na_installatie_RV (woning) := StandaardGasvraag/RV * (1d - gasbesparingsfactor_installatie_RV);
						
					attribute<GJ_yr> gas_na_installatie_TW (woning) := StandaardGasvraag/TW * (1d - gasbesparingsfactor_installatie_TW);
					
					attribute<GJ_yr> gasbesparing_RV_installatie (woning) := StandaardGasvraag/RV - gas_na_installatie_RV;
					attribute<GJ_yr> gasbesparing_TW_installatie (woning) := StandaardGasvraag/TW - gas_na_installatie_TW;
					attribute<GJ_yr> gasbesparing_totaal 		 (woning) := gasbesparing_RV_installatie + gasbesparing_TW_installatie;
					
					attribute<GJ_yr> duurzaam_gas (woning) := BeoogdeInstallaties/Any_hernieuwbaar_gas ? gas_na_installatie_RV + gas_na_installatie_TW : 0d;
				}
				
				container pessimistisch_zonder_isolatie
				{
					attribute<float64> gasbesparingsfactor_installatie_RV (woning) := 
						BeoogdeInstallaties/Any_Hr  || BeoogdeInstallaties/Only_onbekend_bool || BeoogdeInstallaties/Geen_beoogde_installatie ? 0d : 
						BeoogdeInstallaties/Any_hWP && isolatie/schillabel = Classifications/schillabel/V/A ? 0.65d :
						BeoogdeInstallaties/Any_hWP && isolatie/schillabel = Classifications/schillabel/V/B ? 0.63d :
						BeoogdeInstallaties/Any_hWP && isolatie/schillabel = Classifications/schillabel/V/C ? 0.59d :
						BeoogdeInstallaties/Any_hWP && isolatie/schillabel = Classifications/schillabel/V/D ? 0.52d :
						BeoogdeInstallaties/Any_hWP && isolatie/schillabel = Classifications/schillabel/V/E ? 0.47d :
						BeoogdeInstallaties/Any_hWP && isolatie/schillabel = Classifications/schillabel/V/F ? 0.43d :
						BeoogdeInstallaties/Any_hWP && isolatie/schillabel = Classifications/schillabel/V/G ? 0.42d :
						BeoogdeInstallaties/Any_hWP && isolatie/schillabel = Classifications/schillabel/V/N ? 0.42d : 1d;
					
					attribute<float64> gasbesparingsfactor_installatie_TW (woning) := 
						BeoogdeInstallaties/Any_Hr  || BeoogdeInstallaties/Only_onbekend_bool || BeoogdeInstallaties/Any_hWP || BeoogdeInstallaties/Geen_beoogde_installatie ? 0d : 1d;

					attribute<GJ_yr> gas_na_installatie_RV (woning) := StandaardGasvraag/RV * (1d - gasbesparingsfactor_installatie_RV);
						
					attribute<GJ_yr> gas_na_installatie_TW (woning) := StandaardGasvraag/TW * (1d - gasbesparingsfactor_installatie_TW);
					
					attribute<GJ_yr> gasbesparing_RV_installatie (woning) := StandaardGasvraag/RV - gas_na_installatie_RV;
					attribute<GJ_yr> gasbesparing_TW_installatie (woning) := StandaardGasvraag/TW - gas_na_installatie_TW;
					attribute<GJ_yr> gasbesparing_totaal 		 (woning) := gasbesparing_RV_installatie + gasbesparing_TW_installatie;
					
					attribute<GJ_yr> duurzaam_gas (woning) := BeoogdeInstallaties/Any_hernieuwbaar_gas ? gas_na_installatie_RV + gas_na_installatie_TW : 0d;
				}
				
				container optimistisch_met_isolatie
				{
					attribute<float64> gasbesparingsfactor_installatie_RV (woning) := 
						BeoogdeInstallaties/Any_Wnet || BeoogdeInstallaties/Any_eWP 	  ? 1d : 
						BeoogdeInstallaties/Any_hWP && isolatie/optimistisch/beoogd_energielabel = Classifications/schillabel/V/A ? 0.65d :
						BeoogdeInstallaties/Any_hWP && isolatie/optimistisch/beoogd_energielabel = Classifications/schillabel/V/B ? 0.63d :
						BeoogdeInstallaties/Any_hWP && isolatie/optimistisch/beoogd_energielabel = Classifications/schillabel/V/C ? 0.59d :
						BeoogdeInstallaties/Any_hWP && isolatie/optimistisch/beoogd_energielabel = Classifications/schillabel/V/D ? 0.52d :
						BeoogdeInstallaties/Any_hWP && isolatie/optimistisch/beoogd_energielabel = Classifications/schillabel/V/E ? 0.47d :
						BeoogdeInstallaties/Any_hWP && isolatie/optimistisch/beoogd_energielabel = Classifications/schillabel/V/F ? 0.43d :
						BeoogdeInstallaties/Any_hWP && isolatie/optimistisch/beoogd_energielabel = Classifications/schillabel/V/G ? 0.42d :
						BeoogdeInstallaties/Any_hWP && isolatie/optimistisch/beoogd_energielabel = Classifications/schillabel/V/N ? 0.42d :
						BeoogdeInstallaties/Only_onbekend_bool ? 0d : 0d;

					attribute<float64> gasbesparingsfactor_installatie_TW (woning) := 
						BeoogdeInstallaties/Any_Wnet || BeoogdeInstallaties/Any_eWP 	  ? 1d : 0d;
						
					attribute<GJ_yr> gas_na_isolatie_installatie_RV (woning) := isolatie/optimistisch/gas_RV_na_labelsprong * (1d - gasbesparingsfactor_installatie_RV);
						
					attribute<GJ_yr> gas_na_isolatie_installatie_TW (woning) := StandaardGasvraag/TW  * (1d - gasbesparingsfactor_installatie_TW);
					
					attribute<GJ_yr> gasbesparing_RV_isolatie_installatie (woning) := StandaardGasvraag/RV - gas_na_isolatie_installatie_RV;
					attribute<GJ_yr> gasbesparing_TW_isolatie_installatie (woning) := StandaardGasvraag/TW - gas_na_isolatie_installatie_TW;
					attribute<GJ_yr> gasbesparing_totaal 			      (woning) := gasbesparing_RV_isolatie_installatie + gasbesparing_TW_isolatie_installatie;
					
					attribute<GJ_yr> duurzaam_gas (woning) := BeoogdeInstallaties/Any_hernieuwbaar_gas ? gas_na_isolatie_installatie_RV + gas_na_isolatie_installatie_TW : 0d;
				}
				
				container pessimistisch_met_isolatie
				{
					attribute<float64> gasbesparingsfactor_installatie_RV (woning) := 
						BeoogdeInstallaties/Any_Hr  || BeoogdeInstallaties/Only_onbekend_bool ? 0d : 
						BeoogdeInstallaties/Any_hWP && isolatie/pessimistisch/beoogd_energielabel = Classifications/schillabel/V/A ? 0.65d :
						BeoogdeInstallaties/Any_hWP && isolatie/pessimistisch/beoogd_energielabel = Classifications/schillabel/V/B ? 0.63d :
						BeoogdeInstallaties/Any_hWP && isolatie/pessimistisch/beoogd_energielabel = Classifications/schillabel/V/C ? 0.59d :
						BeoogdeInstallaties/Any_hWP && isolatie/pessimistisch/beoogd_energielabel = Classifications/schillabel/V/D ? 0.52d :
						BeoogdeInstallaties/Any_hWP && isolatie/pessimistisch/beoogd_energielabel = Classifications/schillabel/V/E ? 0.47d :
						BeoogdeInstallaties/Any_hWP && isolatie/pessimistisch/beoogd_energielabel = Classifications/schillabel/V/F ? 0.43d :
						BeoogdeInstallaties/Any_hWP && isolatie/pessimistisch/beoogd_energielabel = Classifications/schillabel/V/G ? 0.42d :
						BeoogdeInstallaties/Any_hWP && isolatie/pessimistisch/beoogd_energielabel = Classifications/schillabel/V/N ? 0.42d : 1d;
					
					attribute<float64> gasbesparingsfactor_installatie_TW (woning) := 
						BeoogdeInstallaties/Any_Hr  || BeoogdeInstallaties/Only_onbekend_bool || BeoogdeInstallaties/Any_hWP ? 0d : 1d;

					attribute<GJ_yr> gas_na_isolatie_installatie_RV (woning) := isolatie/pessimistisch/gas_RV_na_labelsprong * (1d - gasbesparingsfactor_installatie_RV);
						
					attribute<GJ_yr> gas_na_isolatie_installatie_TW (woning) := StandaardGasvraag/TW  * (1d - gasbesparingsfactor_installatie_TW);
					
					attribute<GJ_yr> gasbesparing_RV_isolatie_installatie (woning) := StandaardGasvraag/RV - gas_na_isolatie_installatie_RV;
					attribute<GJ_yr> gasbesparing_TW_isolatie_installatie (woning) := StandaardGasvraag/TW - gas_na_isolatie_installatie_TW;
					attribute<GJ_yr> gasbesparing_totaal 			      (woning) := gasbesparing_RV_isolatie_installatie + gasbesparing_TW_isolatie_installatie;
					
					attribute<GJ_yr> duurzaam_gas (woning) := BeoogdeInstallaties/Any_hernieuwbaar_gas ? gas_na_isolatie_installatie_RV + gas_na_isolatie_installatie_TW : 0d;
				}
			}
			
			container planniveau_output
			{
				// Basisvariabelen
				attribute<string> pln_code       (Subsets/BinnenEindjaarCutoff) := Subsets/BinnenEindjaarCutoff/Plan_code;
				attribute<uint32> P_count        (Subsets/BinnenEindjaarCutoff) := pcount(Matching/kruistabel/second_rel);
				attribute<nrAsl>  VBO_count      (Subsets/BinnenEindjaarCutoff) := sum(woning/nr_Asl[Matching/kruistabel/first_rel] / Matching/PL_counts/totaal[Matching/kruistabel/first_rel], Matching/kruistabel/second_rel);
				attribute<nrAsl>  koop_count     (Subsets/BinnenEindjaarCutoff) := sum(eigendom/Koop[Matching/kruistabel/first_rel] / Matching/PL_counts/totaal[Matching/kruistabel/first_rel], Matching/kruistabel/second_rel);
				attribute<nrAsl>  parthuur_count (Subsets/BinnenEindjaarCutoff) := sum(eigendom/PartHuur[Matching/kruistabel/first_rel] / Matching/PL_counts/totaal[Matching/kruistabel/first_rel], Matching/kruistabel/second_rel);
				attribute<nrAsl>  wooncorp_count (Subsets/BinnenEindjaarCutoff) := sum(eigendom/WoonCorp[Matching/kruistabel/first_rel] / Matching/PL_counts/totaal[Matching/kruistabel/first_rel], Matching/kruistabel/second_rel);
				
				// Aantallen woningen met beoogde isolatie
				attribute<nrAsl>  isolatie_count		  (Subsets/BinnenEindjaarCutoff) := sum(woning/nr_Asl[Matching/PL_counts/Isolatie/kruistabel/first_rel] * isolatie/WordtGeisoleerd[Matching/PL_counts/Isolatie/kruistabel/first_rel] / Matching/PL_counts/Isolatie/PL_count[Matching/PL_counts/Isolatie/kruistabel/first_rel], Matching/PL_counts/Isolatie/kruistabel/second_rel)[invert(Matching/PL_counts/Isolatie/PL_subset/org_rel)];
				attribute<nrAsl>  isolatie_koop_count     (Subsets/BinnenEindjaarCutoff) := sum(eigendom/Koop[Matching/PL_counts/Isolatie/kruistabel/first_rel] * isolatie/WordtGeisoleerd[Matching/PL_counts/Isolatie/kruistabel/first_rel] / Matching/PL_counts/Isolatie/PL_count[Matching/PL_counts/Isolatie/kruistabel/first_rel], Matching/PL_counts/Isolatie/kruistabel/second_rel)[invert(Matching/PL_counts/Isolatie/PL_subset/org_rel)];
				attribute<nrAsl>  isolatie_parthuur_count (Subsets/BinnenEindjaarCutoff) := sum(eigendom/PartHuur[Matching/PL_counts/Isolatie/kruistabel/first_rel] * isolatie/WordtGeisoleerd[Matching/PL_counts/Isolatie/kruistabel/first_rel] / Matching/PL_counts/Isolatie/PL_count[Matching/PL_counts/Isolatie/kruistabel/first_rel], Matching/PL_counts/Isolatie/kruistabel/second_rel)[invert(Matching/PL_counts/Isolatie/PL_subset/org_rel)];
				attribute<nrAsl>  isolatie_wooncorp_count (Subsets/BinnenEindjaarCutoff) := sum(eigendom/WoonCorp[Matching/PL_counts/Isolatie/kruistabel/first_rel] * isolatie/WordtGeisoleerd[Matching/PL_counts/Isolatie/kruistabel/first_rel] / Matching/PL_counts/Isolatie/PL_count[Matching/PL_counts/Isolatie/kruistabel/first_rel], Matching/PL_counts/Isolatie/kruistabel/second_rel)[invert(Matching/PL_counts/Isolatie/PL_subset/org_rel)];

				// Aantallen woningen met beoogde installaties
				attribute<nrAsl> installatie_count (Subsets/BinnenEindjaarCutoff) := only_Hr_count + only_hWP_count + only_eWP_count + only_Wnet_count + hWP_Hr_count + hWP_eWP_count + eWP_Wnet_count + eWP_Hr_count + Wnet_Hr_count
																			+ Wnet_hWP_count + hWP_Wnet_Hr_count + eWP_Wnet_Hr_count + hWP_eWP_Hr_count + hWP_eWP_Wnet_count + hWP_eWP_Wnet_Hr_count;
				attribute<nrAsl> only_Hr_count         (Subsets/BinnenEindjaarCutoff) := sum(woning/nr_Asl[Matching/kruistabel/first_rel] * Techniekkeuze/BeoogdeInstallaties/only_Hr[Matching/kruistabel/first_rel]    / Matching/PL_counts/totaal[Matching/kruistabel/first_rel], Matching/kruistabel/second_rel);
				attribute<nrAsl> only_hWP_count        (Subsets/BinnenEindjaarCutoff) := sum(woning/nr_Asl[Matching/kruistabel/first_rel] * Techniekkeuze/BeoogdeInstallaties/only_hWP[Matching/kruistabel/first_rel]   / Matching/PL_counts/totaal[Matching/kruistabel/first_rel], Matching/kruistabel/second_rel);
				attribute<nrAsl> only_eWP_count        (Subsets/BinnenEindjaarCutoff) := sum(woning/nr_Asl[Matching/kruistabel/first_rel] * Techniekkeuze/BeoogdeInstallaties/only_eWP[Matching/kruistabel/first_rel]   / Matching/PL_counts/totaal[Matching/kruistabel/first_rel], Matching/kruistabel/second_rel);
				attribute<nrAsl> only_Wnet_count       (Subsets/BinnenEindjaarCutoff) := sum(woning/nr_Asl[Matching/kruistabel/first_rel] * Techniekkeuze/BeoogdeInstallaties/only_Wnet[Matching/kruistabel/first_rel]  / Matching/PL_counts/totaal[Matching/kruistabel/first_rel], Matching/kruistabel/second_rel);
			
				attribute<nrAsl> hWP_Hr_count          (Subsets/BinnenEindjaarCutoff) := sum(woning/nr_Asl[Matching/kruistabel/first_rel] * Techniekkeuze/BeoogdeInstallaties/hWPHr[Matching/kruistabel/first_rel]      / Matching/PL_counts/totaal[Matching/kruistabel/first_rel], Matching/kruistabel/second_rel);
				attribute<nrAsl> hWP_eWP_count         (Subsets/BinnenEindjaarCutoff) := sum(woning/nr_Asl[Matching/kruistabel/first_rel] * Techniekkeuze/BeoogdeInstallaties/hWPeWP[Matching/kruistabel/first_rel]     / Matching/PL_counts/totaal[Matching/kruistabel/first_rel], Matching/kruistabel/second_rel);
				attribute<nrAsl> eWP_Wnet_count        (Subsets/BinnenEindjaarCutoff) := sum(woning/nr_Asl[Matching/kruistabel/first_rel] * Techniekkeuze/BeoogdeInstallaties/eWPWnet[Matching/kruistabel/first_rel]    / Matching/PL_counts/totaal[Matching/kruistabel/first_rel], Matching/kruistabel/second_rel);
				attribute<nrAsl> eWP_Hr_count          (Subsets/BinnenEindjaarCutoff) := sum(woning/nr_Asl[Matching/kruistabel/first_rel] * Techniekkeuze/BeoogdeInstallaties/eWPHr[Matching/kruistabel/first_rel]      / Matching/PL_counts/totaal[Matching/kruistabel/first_rel], Matching/kruistabel/second_rel);
				attribute<nrAsl> Wnet_Hr_count         (Subsets/BinnenEindjaarCutoff) := sum(woning/nr_Asl[Matching/kruistabel/first_rel] * Techniekkeuze/BeoogdeInstallaties/WnetHr[Matching/kruistabel/first_rel]     / Matching/PL_counts/totaal[Matching/kruistabel/first_rel], Matching/kruistabel/second_rel);
				attribute<nrAsl> Wnet_hWP_count        (Subsets/BinnenEindjaarCutoff) := sum(woning/nr_Asl[Matching/kruistabel/first_rel] * Techniekkeuze/BeoogdeInstallaties/hWPWnet[Matching/kruistabel/first_rel]    / Matching/PL_counts/totaal[Matching/kruistabel/first_rel], Matching/kruistabel/second_rel);

				attribute<nrAsl> hWP_Wnet_Hr_count     (Subsets/BinnenEindjaarCutoff) := sum(woning/nr_Asl[Matching/kruistabel/first_rel] * Techniekkeuze/BeoogdeInstallaties/hWPWnetHr[Matching/kruistabel/first_rel]  / Matching/PL_counts/totaal[Matching/kruistabel/first_rel], Matching/kruistabel/second_rel);
				attribute<nrAsl> eWP_Wnet_Hr_count     (Subsets/BinnenEindjaarCutoff) := sum(woning/nr_Asl[Matching/kruistabel/first_rel] * Techniekkeuze/BeoogdeInstallaties/eWPWnetHr[Matching/kruistabel/first_rel]  / Matching/PL_counts/totaal[Matching/kruistabel/first_rel], Matching/kruistabel/second_rel);
				attribute<nrAsl> hWP_eWP_Hr_count      (Subsets/BinnenEindjaarCutoff) := sum(woning/nr_Asl[Matching/kruistabel/first_rel] * Techniekkeuze/BeoogdeInstallaties/hWPeWPHr[Matching/kruistabel/first_rel]   / Matching/PL_counts/totaal[Matching/kruistabel/first_rel], Matching/kruistabel/second_rel);
				attribute<nrAsl> hWP_eWP_Wnet_count    (Subsets/BinnenEindjaarCutoff) := sum(woning/nr_Asl[Matching/kruistabel/first_rel] * Techniekkeuze/BeoogdeInstallaties/hWPeWPWnet[Matching/kruistabel/first_rel] / Matching/PL_counts/totaal[Matching/kruistabel/first_rel], Matching/kruistabel/second_rel);

				attribute<nrAsl> hWP_eWP_Wnet_Hr_count (Subsets/BinnenEindjaarCutoff) := sum(woning/nr_Asl[Matching/kruistabel/first_rel] * Techniekkeuze/BeoogdeInstallaties/hWPeWPWnetHr[Matching/kruistabel/first_rel] / Matching/PL_counts/totaal[Matching/kruistabel/first_rel], Matching/kruistabel/second_rel);

				// Gasvraag variabelen
				attribute<GJ_yr>  originele_gasvraag      (Subsets/BinnenEindjaarCutoff) := sum(StandaardGasvraag/totaal[Matching/kruistabel/first_rel] / Matching/PL_counts/totaal[Matching/kruistabel/first_rel], Matching/kruistabel/second_rel);

				attribute<GJ_yr>  gasbesparing_isolatie_optimistisch      (Subsets/BinnenEindjaarCutoff) := sum(Isolatie/optimistisch/gasbesparing_RV_isolatie                  [Matching/kruistabel/first_rel] / Matching/PL_counts/totaal[Matching/kruistabel/first_rel], Matching/kruistabel/second_rel);
				attribute<GJ_yr>  gasbesparing_isolatie_pessimistisch     (Subsets/BinnenEindjaarCutoff) := sum(Isolatie/pessimistisch/gasbesparing_RV_isolatie                 [Matching/kruistabel/first_rel] / Matching/PL_counts/totaal[Matching/kruistabel/first_rel], Matching/kruistabel/second_rel);
				attribute<GJ_yr>  gasbesparing_installaties_optimistisch  (Subsets/BinnenEindjaarCutoff) := sum(Techniekkeuze/optimistisch_zonder_isolatie/gasbesparing_totaal  [Matching/kruistabel/first_rel] / Matching/PL_counts/totaal[Matching/kruistabel/first_rel], Matching/kruistabel/second_rel);
				attribute<GJ_yr>  gasbesparing_installaties_pessimistisch (Subsets/BinnenEindjaarCutoff) := sum(Techniekkeuze/pessimistisch_zonder_isolatie/gasbesparing_totaal [Matching/kruistabel/first_rel] / Matching/PL_counts/totaal[Matching/kruistabel/first_rel], Matching/kruistabel/second_rel);
				attribute<GJ_yr>  gasbesparing_totaal_optimistisch        (Subsets/BinnenEindjaarCutoff) := sum(Techniekkeuze/optimistisch_met_isolatie/gasbesparing_totaal     [Matching/kruistabel/first_rel] / Matching/PL_counts/totaal[Matching/kruistabel/first_rel], Matching/kruistabel/second_rel);
				attribute<GJ_yr>  gasbesparing_totaal_pessimistisch       (Subsets/BinnenEindjaarCutoff) := sum(Techniekkeuze/pessimistisch_met_isolatie/gasbesparing_totaal    [Matching/kruistabel/first_rel] / Matching/PL_counts/totaal[Matching/kruistabel/first_rel], Matching/kruistabel/second_rel);
				
				// Hernieuwbaar gas variabelen
				attribute<GJ_yr>  hernieuwbaar_gas_installaties_optimistisch  (Subsets/BinnenEindjaarCutoff) := sum(Techniekkeuze/optimistisch_zonder_isolatie/duurzaam_gas  [Matching/kruistabel/first_rel] / Matching/PL_counts/totaal[Matching/kruistabel/first_rel], Matching/kruistabel/second_rel);
				attribute<GJ_yr>  hernieuwbaar_gas_installaties_pessimistisch (Subsets/BinnenEindjaarCutoff) := sum(Techniekkeuze/pessimistisch_zonder_isolatie/duurzaam_gas [Matching/kruistabel/first_rel] / Matching/PL_counts/totaal[Matching/kruistabel/first_rel], Matching/kruistabel/second_rel);
				attribute<GJ_yr>  hernieuwbaar_gas_totaal_optimistisch        (Subsets/BinnenEindjaarCutoff) := sum(Techniekkeuze/optimistisch_met_isolatie/duurzaam_gas     [Matching/kruistabel/first_rel] / Matching/PL_counts/totaal[Matching/kruistabel/first_rel], Matching/kruistabel/second_rel);
				attribute<GJ_yr>  hernieuwbaar_gas_totaal_pessimistisch       (Subsets/BinnenEindjaarCutoff) := sum(Techniekkeuze/pessimistisch_met_isolatie/duurzaam_gas    [Matching/kruistabel/first_rel] / Matching/PL_counts/totaal[Matching/kruistabel/first_rel], Matching/kruistabel/second_rel);
			}
		}
	}

	container Class
		{
			unit<uint32> Plansoort: nrofrows = 4
			{
				attribute<string> label :  [ 'info ontbreekt', 'onderzoek', 'voorbereidend', 'uitvoeren'];
				attribute<string> name  := AsItemName(label), DialogType = "LabelText";

				container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
			}

			unit<uint32> Techniekstatus: nrofrows = 11
			{
				attribute<string> label :  [ 'definitief', 'geen keuze gemaakt', 'geen techniekkeuze, focus op isolatie',
					 'kansrijke optie', 'niet van toepassing', 'onbekend', 'onderzoekend',
					  'verkennend', 'voorkeursoptie', 'voorlopige keuze', 'voorsorterend'];
				attribute<string> name  := AsItemName(label), DialogType = "LabelText";

				container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
			}

			unit<uint32> Planstatus: nrofrows = 11
			{
				attribute<string> label :  [ 'afwachtend', 'concept', 'definitief', 'uitvoerend',
					 'kansrijke optie', 'onbekend', 'onderzoekend', 'orienterend',
					  'richtinggevend', 'verkennend', 'voorbereidend'];
				attribute<string> name  := AsItemName(label), DialogType = "LabelText";

				container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
			}

			unit<uint32> Docstatus: nrofrows = 5
			{
				attribute<string> label :  [ 'info ontbreekt', 'vastgesteld door raad', 'naar raad gestuurd', 'concept te inzage', 'vastgesteld door college'];
				attribute<string> name  := AsItemName(label), DialogType = "LabelText";

				container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
			}

			unit<uint32> Doctype: nrofrows = 4
			{
				attribute<string> label :  [ 'info ontbreekt', 'transitievisie', 'bijlage bij transitievisie', 'anders'];
				attribute<string> name  := AsItemName(label), DialogType = "LabelText";

				container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
			}

			unit<uint32> Isolatiegraad: nrofrows = 11
			{
				attribute<string> label :  [ 'onbekend', 'geen maatregelen', 'isolatie, geen specifiek niveau benoemd', 'standaard en streefwaarden', 
					'schillabel A+', 'Schillabel B+', 'Schillabel C+', 'Schillabel D+', 'Schillabel D/C (<1940) A/B (overig)'
					,'Schillabel D+ (wonen) B+ (util)','Doelstelling in kWh/m2 (vergelijkbaar Schillabel A/B)'];
				attribute<string> name  := AsItemName(label), DialogType = "LabelText";
				
				attribute<bool> onbekend   							:= strcount(label, 'onbekend')   > 0;
				attribute<bool> geen_maatregelen   					:= strcount(label, 'geen maatregelen')   > 0;
				attribute<bool> isolatie_geen_specifiek_niveau   	:= strcount(label, 'isolatie, geen specifiek niveau benoemd')   > 0;
				attribute<bool> standaard_en_streefwaarden   		:= strcount(label, 'standaard en streefwaarden')   > 0;
				attribute<bool> A   								:= strcount(label, 'schillabel A+')   > 0;
				attribute<bool> B   								:= strcount(label, 'schillabel B+')   > 0;
				attribute<bool> C   								:= strcount(label, 'schillabel C+')   > 0;
				attribute<bool> D   								:= strcount(label, 'schillabel D+')   > 0;
				attribute<bool> DC_1940_AB_overig   				:= strcount(label, 'Schillabel D/C (<1940) A/B (overig)')   > 0;
				attribute<bool> D_wonen_B_util   					:= strcount(label, 'Schillabel D+ (wonen) B+ (util)')   > 0;
				attribute<bool> kWh_m2_AB   						:= strcount(label, 'Doelstelling in kWh/m2 (vergelijkbaar Schillabel A/B)')   > 0;

				container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
			}

			unit<uint32> Installatie: nrofrows = 17
			{
				attribute<string> label :  [ 'onbekend', 'Hr', 'hWP', 'eWP', 
					'Wnet', 'hWP,Hr', 'hWP,eWP', 'hWP,eWP', 'eWP,Wnet'
					,'eWP,Hr','Wnet, Hr', 'Wnet, hWP', 'hWP,Wnet,Hr', 'eWP,Wnet,Hr', 'hWP,eWP,Hr', 'hWP,eWP,Wnet', 'hWP,eWP,Wnet,Hr'];
				attribute<string> name  := AsItemName(label), DialogType = "LabelText";

				attribute<bool> onbekend   := strcount(label, 'onbekend')   > 0;
				attribute<bool> Hr   := strcount(label, 'Hr')   > 0;
				attribute<bool> hWP  := strcount(label, 'hWP')  > 0;
				attribute<bool> eWP  := strcount(label, 'eWP')  > 0;
				attribute<bool> Wnet := strcount(label, 'Wnet') > 0;

				container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
			}

			unit<uint32> Infrastructuur: nrofrows = 7
			{
				attribute<string> label :  [ 'onbekend', 'niet van toepassing', 'E', 'E,G', 'E,W', 'E,W,G', 'E,W,K'];
				attribute<string> name  := AsItemName(label), DialogType = "LabelText";

				attribute<bool> E := strcount(label, 'E') > 0;
				attribute<bool> G := strcount(label, 'G') > 0;
				attribute<bool> W := strcount(label, 'W') > 0;
				attribute<bool> K := strcount(label, 'K') > 0;

				container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
			}

			unit<uint32> Energiebron: nrofrows = 56
			{
				attribute<string> label :  [ 'aquathermie', 'aquathermie, asfalt', 'aquathermie, bestaand warmtenet', 'aquathermie, bestaand warmtenet, WKO', 
					'aquathermie, geothermie', 'aquathermie, geothermie, restwarmte', 'aquathermie, geothermie, WKO', 'aquathermie, geothermie, zon', 'aquathermie, hernieuwbaar gas'
					,'aquathermie, restwarmte','aquathermie, restwarmte, asfalt', 'aquathermie, restwarmte, geothermie', 'aquathermie, restwarmte, hernieuwbaar gas',
					'aquathermie, restwarmte, WKO, geothermie', 'aquathermie, restwarmte, zon', 'aquathermie, WKO', 'aquathermie, WKO, biomassa'
					, 'aquathermie, WKO, collectieve warmtepomp', 'aquathermie, WKO, geothermie', 'aquathermie, WKO, hernieuwbaar gas', 'aquathermie, WKO, restwarmte'
					, 'aquathermie, WKO, zon', 'aquathermie, zon', 'aquathermie, zon, asfalt', 'aquathermie, zon, collectieve warmtepomp', 'biomassa', 'biomassa, geothermie',
					 'biomassa, zon, hernieuwbaar gas', 'collectieve warmtepomp', 'diverse opties mogelijk (>3 genoemd)', 'geothermie', 'geothermie, collectieve warmtepomp',
					 'geothermie, hernieuwbaar gas', 'geothermie, restwarmte', 'geothermie, restwarmte, biomassa', 'geothermie, zon, collectieve warmtepomp', 'hernieuwbaar gas'
					 , 'hernieuwbaar gas, biomassa', 'hernieuwbaar gas, WKO', 'niet specifiek benoemd', 'niet van toepassing', 'Onbekend', 'restwarmte', 'restwarmte, biomassa',
					 'restwarmte, geothermie, collectieve warmtepomp', 'restwarmte, hernieuwbaar gas', 'restwarmte, WKO', 'restwarmte, WKO, collectieve warmtepomp',
					 'restwarmte, WKO, hernieuwbaar gas', 'restwarmte, zon', 'WKO', 'WKO, collectieve warmtepomp', 'WKO, zon', 'WKO, zon, hernieuwbaar gas', 'zon', 'zon, hernieuwbaar gas'];
				attribute<string> name  := AsItemName(label), DialogType = "LabelText";

				attribute<bool> aquathermie            := strcount(label, 'aquathermie')            > 0;
				attribute<bool> asfalt                 := strcount(label, 'asfalt')                 > 0;
				attribute<bool> bestaand_warmtenet     := strcount(label, 'bestaand warmtenet')     > 0;
				attribute<bool> WKO                    := strcount(label, 'WKO')                    > 0;
				attribute<bool> geothermie             := strcount(label, 'geothermie')             > 0;
				attribute<bool> restwarmte             := strcount(label, 'restwarmte')             > 0;
				attribute<bool> zon                    := strcount(label, 'zon')                    > 0;
				attribute<bool> hernieuwbaar_gas       := strcount(label, 'hernieuwbaar gas')       > 0;
				attribute<bool> biomassa               := strcount(label, 'biomassa')               > 0;
				attribute<bool> collectieve_warmtepomp := strcount(label, 'collectieve warmtepomp') > 0;
				attribute<bool> diverse_opties_mogelijk := strcount(label, 'diverse opties mogelijk (>3 genoemd)') > 0;
				attribute<bool> niet_specifiek_benoemd := strcount(label, 'niet specifiek benoemd') > 0;
				attribute<bool> niet_van_toepassing    := strcount(label, 'niet van toepassing') > 0;
				attribute<bool> onbekend			   := strcount(label, 'Onbekend') > 0;

				container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
			}
		}
}