
//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) Hestia 2022 - PBL & TNO                                        //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

container TVW
{
	container gemeente
	{
		unit<uint32> gemeente_input
			:	StorageName     = "%HestiaDataDir%/TVW/Gemeente.csv"
			,	StorageType     = "gdal.vect"
			,	StorageReadOnly = "True"
			{
				attribute<string> label :=  uppercase(id__gem_code_);
			}

		unit<uint32> GM := RuimtelijkeData/StudieGebied/Gemeente
		{
			attribute<gemeente_input> input_rel := rlookup(GM_code, uppercase(gemeente_input/label));
			attribute<bool>           has_TVW   := isDefined(input_rel);
			attribute<nrAsl>          nr_Asl    := sum(TussenResultaten/StartJaar/BebouwingsComponenten/Woning/BO/nrAansluitingen, Invoer/RuimtelijkeData/StudieGebied/Buurt/Gemeente_rel[TussenResultaten/StartJaar/BebouwingsComponenten/Woning/BO/PlanRegio_rel]);
		}
	}

	container document
	{
		unit<uint32> document_input
			:	StorageName     = "%HestiaDataDir%/TVW/Document.csv"
			,	StorageType     = "gdal.vect"
			,	StorageReadOnly = "True"
			{
				attribute<string> label :=  uppercase(id__doc_code_);	
			}

		unit<uint32> DC := document_input
		{
			attribute<TVW_Classifications/doctype>   doctype_rel   := uint32(doc_type__code_);
			attribute<TVW_Classifications/docstatus> docstatus_rel := uint32(doc_status__tekst_);
			attribute<gemeente/GM> GM_rel  := rlookup(gemeente__gem_code_, gemeente/GM/GM_code);
		}
	}
	
	container plan
	{
		unit<uint32> plantabel_input
			:	StorageName     = "%HestiaDataDir%/TVW/plan.csv"
			,	StorageType     = "gdal.vect"
			,	StorageReadOnly = "True"
			{
				attribute<string> label :=  uppercase(id__pln_code_);	
				attribute<planshape_input> shp_rel :=  rlookup(uppercase(id__pln_code_), uppercase(planshape_input/pln_code));	
			}
		unit<uint32> planshape_input
			:	StorageName     = "%HestiaDataDir%/TVW/TVW_Plan.shp"
			,	StorageType     = "gdal.vect"
			,	StorageReadOnly = "True"
			{
				attribute<string> label :=  uppercase(pln_code);	

				attribute<bool> geom_ok := isDefined(geometry);

				attribute<geography/rdc_meter> geometry_RD (poly) := LatLongWgs842RD(geometry, geography/rdc_meter);
			}

		unit<uint32> PL := plantabel_input
		{
			attribute<geography/rdc_meter> geometry (poly) := planshape_input/geometry_RD[shp_rel];
			attribute<bool> geom_ok := isDefined(geometry);

			attribute<document/DC> DC_rel_i := rlookup(document__doc_code_, document/DC/label);
			attribute<gemeente/GM> DC_rel   := isDefined(DC_rel_i) ? DC_rel_i : rlookup('DC' + substr(label, 2, 6), uppercase(document/DC/label));
			attribute<bool>        DC_ok    := isDefined(DC_rel);


			attribute<gemeente/GM> GM_rel_i := document/DC/GM_rel[DC_rel];
			attribute<gemeente/GM> GM_rel   := isDefined(GM_rel_i) ? GM_rel_i : rlookup('GM' + substr(label, 2, 4), uppercase(gemeente/GM/GM_code));
			attribute<bool>        GM_ok    := isDefined(GM_rel);

			attribute<yr_uint16> Startjaar_min := Parser/Startjaar/lower[rlookup(startjaar__yyyy_, Parser/Startjaar/values)];
			attribute<yr_uint16> Startjaar_max := Parser/Startjaar/upper[rlookup(startjaar__yyyy_, Parser/Startjaar/values)];
			attribute<yr_uint16> Eindjaar_min  := Parser/Eindjaar/lower[rlookup(eindjaar__yyyy_, Parser/Eindjaar/values)];
			attribute<yr_uint16> Eindjaar_max  := Parser/Eindjaar/upper[rlookup(eindjaar__yyyy_, Parser/Eindjaar/values)];
			attribute<bool>      jaren_ok      :=
				   makedefined(startjaar_min, 2021[yr_uint16]) <= makedefined(startjaar_max, 2050[yr_uint16])
				&& makedefined(Eindjaar_min, 2021[yr_uint16]) <= makedefined(Eindjaar_max, 2050[yr_uint16]);

			attribute<TVW_Classifications/plansoort>   plansoort_rel_i  := uint32(Plansoort__code_);
			attribute<bool>                            plansoort_ok     := isdefined(plansoort_rel_i);
			attribute<TVW_Classifications/plansoort>   plansoort_rel    := makedefined(plansoort_rel_i, TVW_Classifications/planstatus/V/onbekend);

			attribute<TVW_Classifications/planstatus>  planstatus_rel_i := parser/planstatus/planstatus_rel[rlookup(pln_planstatus__tekst_, parser/planstatus/values)];
			attribute<bool>                            planstatus_ok    := isdefined(planstatus_rel_i);
			attribute<TVW_Classifications/planstatus>  planstatus_rel   := makedefined(planstatus_rel_i, TVW_Classifications/planstatus/V/onbekend);

			attribute<TVW_Classifications/techniekstatus>  techniekstatus_rel_i := parser/techniekstatus/techniekstatus_rel[rlookup(pln_techniekstatus__tekst_, parser/techniekstatus/values)];
			attribute<bool>                           techniekstatus_ok    := isdefined(techniekstatus_rel_i);
			attribute<TVW_Classifications/techniekstatus>  techniekstatus_rel   := makedefined(techniekstatus_rel_i, TVW_Classifications/techniekstatus/V/onbekend);


			attribute<bool> Installatie_onbekend  := Parser/installatie/onbekend[rlookup(installatie__tekst_, parser/installatie/values)];
			attribute<bool> Installatie_eWP       := Parser/installatie/ewp[rlookup(installatie__tekst_, parser/installatie/values)];
			attribute<bool> Installatie_hWP       := Parser/installatie/hwp[rlookup(installatie__tekst_, parser/installatie/values)];
			attribute<bool> Installatie_HR        := Parser/installatie/hr[rlookup(installatie__tekst_, parser/installatie/values)];
			attribute<bool> Installatie_IR        := Parser/installatie/ir[rlookup(installatie__tekst_, parser/installatie/values)];
			attribute<bool> Installatie_ZonB      := Parser/installatie/zonb[rlookup(installatie__tekst_, parser/installatie/values)];
			attribute<bool> Installatie_bronnet   := Parser/installatie/bronnet[rlookup(installatie__tekst_, parser/installatie/values)];
			attribute<bool> Installatie_warmtenet := Parser/installatie/warmtenet[rlookup(installatie__tekst_, parser/installatie/values)];

			attribute<parser/installatie/installatiekeuze> Installatiekeuze_rel := Parser/installatie/installatiekeuze_rel[rlookup(installatie__tekst_, parser/installatie/values)];
		}

		unit<uint32> VBO := /Invoer/RuimtelijkeData/BAG/vbo_woonfunctie_studiegebied
		{
			attribute<nrAsl> nr_Asl := const(1.0[nrAsl],.);

			container Matching
			{
				unit<uint32> p := VBO
				{
					attribute<geography/rdc_meter> xy (p) := VBO/geometry;
				}
				//attribute<geography/rdc_meter> geom_plan (poly, PL) := PL/geometry;
				attribute<geography/rdc_meter> driehoek  (p, poly)  :=
					points2sequence(
						union_data(union_unit(p,p,p,p), p/xy, p/xy+point(0.1,0.0), p/xy+point(0.1,0.1), p/xy),
						union_data(union_unit(p,p,p,p), id(p), id(p), id(p), id(p)),
						union_data(union_unit(p,p,p,p), const(0,p), const(1,p), const(2,p), const(3,p))
									);
				unit<uint32> kruistabel := overlay_polygon(driehoek[geography/rdc_mm], PL/geometry[geography/rdc_mm]);

				attribute<bool> any_warmtenet (p) := any(PL/Installatie_warmtenet[kruistabel/second_rel], kruistabel/first_rel);
			}
		}
	}

	container TVW_Classifications
	{
		unit<uint32> plansoort : nrofrows = 4
		{
			attribute<string> name             :  [ 'onbekend', 'onderzoek', 'voorbereidend', 'uitvoeren'];
			attribute<string> label            := name, DialogType = "LabelText";

			container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
		}

		unit<uint32> doctype : nrofrows = 4
		{
			attribute<string> name             :  [ 'onbekend', 'transitievisie', 'bijlage', 'anders'];
			attribute<string> label            := name, DialogType = "LabelText";

			container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
		}

		unit<uint32> docstatus : nrofrows = 4
		{
			attribute<string> name             :  [ 'onbekend', 'vastgesteld', 'naar_raad', 'concept'];
			attribute<string> label            := name, DialogType = "LabelText";

			container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
		}

		unit<uint32> planstatus : nrofrows = 6
		{
			attribute<string> name             : [ 'onbekend', 'orienterend', 'onderzoek', 'richting', 'uitwerken', 'definitief'];
			attribute<string> label            : [ 'onbekend', 'orienterend', 'in onderzoek', 'richting bepaald', 'uit te werken', 'definitief'];

			container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
		}

		unit<uint32> techniekstatus : nrofrows = 6
		{
			attribute<string> name             : [ 'onbekend', 'geen', 'uitwerken', 'kansrijk', 'richting', 'definitief'];
			attribute<string> label            : [ 'onbekend', 'geen keuze', 'uit te werken', 'kansrijke optie', 'richting bepaald', 'definitief'];

			container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
		}
	}

	container parser
	{
		unit<uint32> startjaar := unique(plan/plantabel_input/startjaar__yyyy_)
		{
			attribute<string> datestr := replace(replace(replace(replace(replace(lowercase(values),
				'of', '-'),
				' - ', '-'),
				'onduidelijk', 'onbekend'),
				'ntb', 'onbekend'),
				'doorlopend', 'gestart');

			attribute<bool>   single_yr  := AND(
					isdefined(uint16(datestr)),
					substr(datestr, 0, 2) == '20',
					strlen(datestr) == 4);

			attribute<yr_uint16> lower :=
				  single_yr ? datestr[yr_uint16]
				: strcount(datestr, '-') > 0 ? substr(datestr, 0, strpos(datestr,'-'))[yr_uint16]
				: strcount(datestr, 'gestart') > 0 ? 2021[yr_uint16]
				: strcount(datestr, 'zo snel mogelijk') > 0  ? 2021[yr_uint16]
				: strcount(datestr, 'voor') > 0  ? 2021[yr_uint16]
				: strcount(datestr, 'na') > 0 ? substr(datestr, strpos(datestr, '20'), 4)[yr_uint16]
				: (0/0)[yr_uint16];

			attribute<yr_uint16> upper :=
				  single_yr ? datestr[yr_uint16]
				: strcount(datestr, '-') > 0 ? substr(datestr,strpos(datestr,'-')+1,4)[yr_uint16]
				: strcount(datestr, 'voor') > 0 ? substr(datestr, strpos(datestr, '20'), 4)[yr_uint16]
				: strcount(datestr, 'gestart') > 0 ? 2021[yr_uint16]
				: (0/0)[yr_uint16];

			attribute<bool> startjaar_ok := and(isdefined(lower),isDefined(upper));
		}

		unit<uint32> eindjaar := unique(plan/plantabel_input/eindjaar__yyyy_)
		{
			attribute<string> datestr := replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(lowercase(values),
					'of', '-'),
					' - ', '-'),
					'onduidelijk', 'onbekend'),
					'ntb', 'onbekend'),
					'doorlopend', 'gestart'),
					'>', 'na'),
					'onbekend, mogelijk voor', 'mogelijk'),
					'niet benoemd', 'onbekend'),
					'niet genoemd', 'onbekend'),
					'streven', 'mogelijk'),
					'mogelijk', 'na');

			attribute<bool>   single_yr  := AND(
					isdefined(uint16(datestr)),
					substr(datestr, 0, 2) == '20',
					strlen(datestr) == 4);

			attribute<yr_uint16> lower :=
				  single_yr ? datestr[yr_uint16]
				: strcount(datestr, '-') > 0 ? substr(datestr, 0, strpos(datestr,'-'))[yr_uint16]
				: strcount(datestr, 'gestart') > 0 ? 2021[yr_uint16]
				: strcount(datestr, 'zo snel mogelijk') > 0  ? 2021[yr_uint16]
				: strcount(datestr, 'voor') > 0  ? 2021[yr_uint16]
				: strcount(datestr, 'na') > 0 ? substr(datestr, strpos(datestr, '20'), 4)[yr_uint16]
				: (0/0)[yr_uint16];

			attribute<yr_uint16> upper :=
				  single_yr ? datestr[yr_uint16]
				: strcount(datestr, '-') > 0 ? substr(datestr,strpos(datestr,'-')+1,4)[yr_uint16]
				: strcount(datestr, 'voor') > 0 ? substr(datestr, strpos(datestr, '20'), 4)[yr_uint16]
				: strcount(datestr, 'gestart') > 0 ? 2021[yr_uint16]
				: strcount(datestr, 'uiterlijk') > 0 ? substr(datestr, strpos(datestr, '20'), 4)[yr_uint16]
				: (0/0)[yr_uint16];

			attribute<bool> startjaar_ok := and(isdefined(lower),isDefined(upper));
		}

		unit<uint32> planstatus := unique(plan/plantabel_input/pln_planstatus__tekst_)
		{
			attribute<string> rawstr_1 := strlen(values) <= 2 ? 'onbekend' : lowercase(values);
			attribute<string> rawstr_2 := strcount(rawstr_1, 'onderzo'    ) > 0 || strcount(rawstr_1, 'mogelijk' ) > 0 || strcount(rawstr_1, 'onduidelijk') > 0 || strcount(rawstr_1, 'uitgesteld'     ) > 0 ? 'in onderzoek' : rawstr_1;
			attribute<string> rawstr_3 := strcount(rawstr_2, 'uitvoer'    ) > 0 || strcount(rawstr_2, 'van start') > 0 || strcount(rawstr_2, 'vastgesteld') > 0 || strcount(rawstr_1, 'niet gestart'   ) > 0? 'definitief'   : rawstr_2;
			attribute<string> rawstr_4 := strcount(rawstr_3, 'wup'        ) > 0 || strcount(rawstr_3, 'werk'     ) > 0 || strcount(rawstr_3, 'voorbereid' ) > 0 || strcount(rawstr_3, 'wordt opgesteld') > 0 || strcount(rawstr_3, 'opties') > 0 || strcount(rawstr_3, 'berekening') > 0 ? 'uit te werken' : rawstr_3;
			attribute<string> rawstr_5 := rawstr_4;
			attribute<string> rawstr_6 := strcount(rawstr_5, 'nterend'    ) > 0 || strcount(rawstr_5, 'kansrijk' ) > 0 || strcount(rawstr_5, 'verken'     ) > 0 ? 'orienterend'  : rawstr_5;
			attribute<string> rawstr_7 := strcount(rawstr_6, 'perspectief') > 0 || strcount(rawstr_6, 'advies'   ) > 0 || strcount(rawstr_6, 'individu'   ) > 0 || strcount(rawstr_6, 'concept') > 0 || strcount(rawstr_6, 'stimuleren') > 0 || strcount(rawstr_6, 'voorlopig') > 0 || strcount(rawstr_6, 'voors') > 0 || strcount(rawstr_6, 'richting') > 0 ? 'richting bepaald' : rawstr_6;
		
			attribute<TVW_Classifications/planstatus> planstatus_rel := rlookup(rawstr_7, TVW_Classifications/planstatus/label);
		}

		unit<uint32> techniekstatus := unique(plan/plantabel_input/pln_techniekstatus__tekst_)
		{
			attribute<string> rawstr_1 := strlen(values) <= 2 ? 'onbekend' : lowercase(values);
			attribute<string> rawstr_2 := strcount(rawstr_1, 'niet'       ) > 0 || strcount(rawstr_1, 'maatwerk'  ) > 0 || strcount(rawstr_1, 'geen'     ) > 0 || strcount(rawstr_1, 'uitgesteld' ) > 0 || strcount(rawstr_1, 'onduidelijk' ) > 0 || strcount(rawstr_1, 'nader' ) > 0 ? 'geen keuze' : rawstr_1;
			attribute<string> rawstr_3 := strcount(rawstr_2, 'voorsort'   ) > 0 || strcount(rawstr_2, 'voorlopig' ) > 0 || strcount(rawstr_2, 'oorkeur'  ) > 0 || strcount(rawstr_2, 'voorwaarde' ) > 0 ? 'voorlopig'  : rawstr_2;
			attribute<string> rawstr_4 := strcount(rawstr_3, 'definitie'  ) > 0 || strcount(rawstr_3, 'voorlopig' ) > 0 || strcount(rawstr_3, 'start'    ) > 0 || strcount(rawstr_3, 'gereed'     ) > 0 || strcount(rawstr_3, 'isoleren'    ) > 0 ? 'definitief' : rawstr_3;
			attribute<string> rawstr_5 := strcount(rawstr_4, 'kansrijk'   ) > 0 || strcount(rawstr_4, 'logisch'   ) > 0 || strcount(rawstr_4, 'potentie' ) > 0 ? 'kansrijke optie'       : rawstr_4;
			attribute<string> rawstr_6 := strcount(rawstr_5, 'tussen'     ) > 0 || strcount(rawstr_5, 'verken'    ) > 0 || strcount(rawstr_5, 'opties'   ) > 0 || strcount(rawstr_5, 'afhankelijk') > 0 || strcount(rawstr_5, 'voorbereid'  ) > 0 || strcount(rawstr_5, 'onderzoek'  ) > 0 || strcount(rawstr_5, 'studie'  ) > 0 ? 'uit te werken'  : rawstr_5;
			attribute<string> rawstr_7 := strcount(rawstr_6, 'perspectief') > 0 || strcount(rawstr_6, 'optioneel' ) > 0 || strcount(rawstr_6, 'nterend'  ) > 0 || strcount(rawstr_6, 'richting'   ) > 0? 'richting bepaald' : rawstr_6;

			attribute<TVW_Classifications/techniekstatus> techniekstatus_rel := rlookup(rawstr_7, TVW_Classifications/techniekstatus/label);
		}

		unit<uint32> installatie := unique(plan/plantabel_input/installatie__tekst_)
		{
			attribute<string> str     := replace(lowercase(values),'0',' ');
			attribute<bool> onbekend  := strlen(values) <= 2 || strcount(replace(replace(replace(replace(str,'biomassa','geen'),'geen','overige'),'overige','niet'), 'niet', 'onbekend'), 'onbekend') > 0 || strcount(replace(str, '.', ''), 'nvt') > 0 || not(or(eWP,hWP,HR,IR,ZonB,bronnet,warmtenet));
			attribute<bool> eWP       := strcount(replace(replace(replace(str,'ewp','individueel'),'individueel','electri'),'-',' '), 'electri') > 0 || strcount(str, 'warmtepomp') > 0 && strcount(str, 'hybride warmtepomp') < strcount(str, 'warmtepomp') || strcount(replace(str,'gasvrije','gasloze'), 'gasloze optie') > 0 || strcount(str,'elektrisch') > 0 && strcount(str,'elektrisch koken') == 0;
			attribute<bool> hWP       := strcount(replace(str,'hwp','hyb'), 'hyb') > 0 || strcount(str,'gas met warmtepomp')>0;
			attribute<bool> HR        := strcount(replace(replace(str,'gasketel','hr ketel'), 'hr ketel', 'hr'), 'hr') > 0 || str == 'duurzaam gas' || str == 'waterstof' || str == 'groen gas of waterstof';
			attribute<bool> IR        := strcount(replace(str,'stralingspanelen','rood'), 'rood') > 0 || strcount(replace(str,'gasvrije','gasloze'), 'gasloze optie') > 0 ;
			attribute<bool> ZonB      := strcount(replace(str,'zonnecollectoren','zonneboiler'),'zonneboiler') > 0;
			attribute<bool> bronnet   := strcount(replace(str,'wko','bronnet'), 'bronnet') > 0 || strcount(str,'opwaarde') > 0 ||  strcount(replace(str,'(collectief) warmtenet','warmtenet'), 'collectie') > 0 ;		
			attribute<bool> warmtenet := strcount(replace(replace(replace(str,'lt-net','wko'),'wko','afleverset'), 'afleverset', 'warmtenet'), 'warmtenet') > 0 || strcount(str, 'collectie') > 0 ;

			attribute<string> inst_str := onbekend ? 'onbekend' : substr((eWP ? '_eWP' : '') + (hwp ? '_hWP' : '') + (HR ? '_HR' : '') + (IR ? '_IR' : '') + (zonB ? '_zonB' : '') + (bronnet ? '_bronnet' : '') + (warmtenet ? '_warmtenet' : ''),1);

			attribute<installatiekeuze> installatiekeuze_rel := rlookup(inst_str,installatiekeuze/name);

			unit<uint32> installatiekeuze := unique(inst_str)
			{
				attribute<string> label := values;
				attribute<string> name  := values;
			}
		}

		unit<uint32> infrastructuur := unique(plan/plantabel_input/infrastructuur__tekst_)
		{
			attribute<string> str     := replace(lowercase(values),'0',' ');
			attribute<bool> elek	  := strcount(str,'ele') > 0;
			attribute<bool> gas       := strcount(replace(str,'waterstof','gas'),'gas') > 0;
			attribute<bool> warmte_LT := strcount(replace(str,'collectief','warm'),'warm') > 0 || strcount(replace(replace(str,'wko','bronnet'),'bronnet','LT'),'LT') > 0;
			attribute<bool> warmte_MT := strcount(replace(str,'collectief','warm'),'warm') > 0 || strcount(replace(str,'HT','MT'),'MT') >0;
			attribute<bool> onbekend  := not(or(gas,warmte_MT,warmte_LT));

			attribute<string> infra_str := onbekend ? 'onbekend' : substr((elek ? '_E' : '') + (gas ? '_G' : '') + (warmte_MT ? '_MT' : '') + (warmte_LT ? '_LT' : ''),1);

			attribute<infrastructuurkeuze> infrastructuurkeuze_rel := rlookup(infra_str,infrastructuurkeuze/name);

			unit<uint32> infrastructuurkeuze := unique(infra_str)
			{
				attribute<string> label := values;
				attribute<string> name  := values;
			}
		}
	}
}