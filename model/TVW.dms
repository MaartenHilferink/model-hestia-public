
//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) Hestia 2022 - PBL & TNO                                        //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

container TVW
{
	container gemeente
	{
		unit<uint32> gemeente_input
			:	StorageName     = "%HestiaDataDir%/TVW/Gemeente.csv"
			,	StorageType     = "gdal.vect"
			,	StorageReadOnly = "True"
			{
				attribute<string> label :=  uppercase(id__gem_code_);
			}

		unit<uint32> GM := RuimtelijkeData/StudieGebied/Gemeente
		{
			attribute<gemeente_input> input_rel := rlookup(GM_code, uppercase(gemeente_input/label));
			attribute<bool>           has_TVW   := isDefined(input_rel);
			attribute<nrAsl>          nr_Asl    := sum(TussenResultaten/StartJaar/BebouwingsComponenten/Woning/BO/nrAansluitingen, Invoer/RuimtelijkeData/StudieGebied/Buurt/Gemeente_rel[TussenResultaten/StartJaar/BebouwingsComponenten/Woning/BO/PlanRegio_rel]);
		}
	}

	container document
	{
		unit<uint32> document_input
			:	StorageName     = "%HestiaDataDir%/TVW/Document.csv"
			,	StorageType     = "gdal.vect"
			,	StorageReadOnly = "True"
			{
				attribute<string> label :=  uppercase(id__doc_code_);	
			}

		unit<uint32> DC := document_input
		{
			attribute<Class/doctype>   doctype_rel   := uint32(doc_type__code_);
			attribute<Class/docstatus> docstatus_rel := uint32(doc_status__tekst_);
			attribute<gemeente/GM>     GM_rel        := rlookup(gemeente__gem_code_, gemeente/GM/GM_code);
		}
	}
	
	container plan
	{
		unit<uint32> plantabel_input
			:	StorageName     = "%HestiaDataDir%/TVW/plan.csv"
			,	StorageType     = "gdal.vect"
			,	StorageReadOnly = "True"
			{
				attribute<string> label :=  uppercase(id__pln_code_);	
				attribute<planshape_input> shp_rel :=  rlookup(uppercase(id__pln_code_), uppercase(planshape_input/pln_code));	
			}
		unit<uint32> planshape_input
			:	StorageName     = "%HestiaDataDir%/TVW/TVW_Plan.shp"
			,	StorageType     = "gdal.vect"
			,	StorageReadOnly = "True"
			{
				attribute<string> label :=  uppercase(pln_code);	

				attribute<bool> geom_ok := isDefined(geometry);

				attribute<geography/rdc_meter> geometry_RD (poly) := LatLongWgs842RD(geometry, geography/rdc_meter);
			}

		unit<uint32> PL := plantabel_input
		{
			attribute<geography/rdc_meter>  geometry (poly)    := planshape_input/geometry_RD[shp_rel], IntegrityCheck = "isDefined(this)";
			attribute<string>               Plan_naam          := plantabel_input/naam__tekst_;
			attribute<document/DC>          DC_rel             := isDefined(rlookup(document__doc_code_, document/DC/label)) ? rlookup(document__doc_code_, document/DC/label) : rlookup('DC' + substr(label, 2, 6), uppercase(document/DC/label)), IntegrityCheck = "isDefined(this)";
			attribute<gemeente/GM>          GM_rel             := isDefined(document/DC/GM_rel[DC_rel]) ? document/DC/GM_rel[DC_rel] : rlookup('GM' + substr(label, 2, 4), uppercase(gemeente/GM/GM_code)), IntegrityCheck = "isDefined(this)";

			attribute<Class/Plansoort>      Plansoort_rel      := uint32(Plansoort__code_)              , IntegrityCheck = "isDefined(this)";
			attribute<Class/Planstatus>     Planstatus_rel     := uint32(pln_planstatus_code__code_)    , IntegrityCheck = "isDefined(this)";
			attribute<Class/Techniekstatus> Techniekstatus_rel := uint32(pln_techniekstatus_code__code_), IntegrityCheck = "isDefined(this)";
			attribute<Class/Isolatiegraad>  Isolatiegraad_rel  := uint32(isolatiegraad_code__code_)     , IntegrityCheck = "isDefined(this)";
			attribute<Class/Installatie>    Installatie_rel    := uint32(installatie_code__code_)       , IntegrityCheck = "isDefined(this)";
			attribute<Class/Infrastructuur> Infrastructuur_rel := uint32(infrastructuur_code__code_)    , IntegrityCheck = "isDefined(this)";
			attribute<Class/Energiebron>    Energiebron_rel    := uint32(energiebron_code__code_)       , IntegrityCheck = "isDefined(this)";

			attribute<nrAsl>                nrAansluitingen    := VBO/Matching/VBO_count                , IntegrityCheck = "isDefined(this)";
		}

		unit<uint32> VBO := /Invoer/RuimtelijkeData/BAG/import/VBO
		{
			attribute<nrAsl> nr_Asl := const(1.0[nrAsl],.);

			container Matching
			{
				unit<uint32> p := VBO
				{
					attribute<geography/rdc_meter> xy (p) := VBO/geometry;
				}

				// driehoek wordt alleen gebruikt in workaround voor point_in_all_polygons voor GeoDmsVersion < 8.031				
				attribute<geography/rdc_meter> driehoek  (p, poly)  :=
					points2sequence(
						union_data(union_unit(p,p,p,p), p/xy, p/xy+point(0.1,0.0), p/xy+point(0.1,0.1), p/xy),
						union_data(union_unit(p,p,p,p), id(p), id(p), id(p), id(p)),
						union_data(union_unit(p,p,p,p), const(0,p), const(1,p), const(2,p), const(3,p))
									);
				parameter<string> piap_expr := 'point_in_all_polygons(p/xy, PL/geometry)';
				parameter<string> workaround := 'overlay_polygon(driehoek[geography/rdc_mm], PL/geometry[geography/rdc_mm])';
				unit<uint32> kruistabel  := =(GeoDmsVersion() > 8.0305) ? piap_expr : workaround;


				attribute<uint32> PL_count(p) := pcount(kruistabel/first_rel);
				
				attribute<uint32> P_count   (PL) := pcount(kruistabel/second_rel);
				attribute<nrAsl>  VBO_count (PL) := sum(nr_Asl[kruistabel/first_rel], kruistabel/second_rel);
			}

			container Techniekkeuze
			{
				attribute<bool>  Any_hWP  (VBO) := any(Class/Installatie/hWP [PL/Installatie_rel[Matching/kruistabel/second_rel]], Matching/kruistabel/first_rel);
				attribute<bool>  Any_eWP  (VBO) := any(Class/Installatie/eWP [PL/Installatie_rel[Matching/kruistabel/second_rel]], Matching/kruistabel/first_rel);
				attribute<bool>  Any_Wnet (VBO) := any(Class/Installatie/Wnet[PL/Installatie_rel[Matching/kruistabel/second_rel]], Matching/kruistabel/first_rel);
				attribute<bool>  Any_Hr   (VBO) := any(Class/Installatie/Hr  [PL/Installatie_rel[Matching/kruistabel/second_rel]], Matching/kruistabel/first_rel);

				attribute<nrAsl> Wnet (VBO) := float64(Any_Wnet && not(Any_hWP) && not(Any_eWP))*VBO/nr_Asl;
				parameter<nrAsl> hWP   := sum(float64(not(Any_Wnet) && not(Any_hWP) && Any_eWP)*VBO/nr_Asl);
				parameter<nrAsl> eWP   := sum(float64(not(Any_Wnet) && Any_hWP && not(Any_eWP))*VBO/nr_Asl);

				parameter<nrAsl> eWPhWP  := sum(float64(not(Any_Wnet) && Any_hWP && Any_eWP)*VBO/nr_Asl);
				parameter<nrAsl> eWPWnet := sum(float64(Any_Wnet && not(Any_hWP) && Any_eWP)*VBO/nr_Asl);
				parameter<nrAsl> hWPWnet := sum(float64(Any_Wnet && Any_hWP && not(Any_eWP))*VBO/nr_Asl);

				parameter<nrAsl> eWPhWPWnet := sum(float64(Any_Wnet && Any_hWP && Any_eWP)*VBO/nr_Asl);

			}
		}
	}

	container Class
		{
			unit<uint32> Plansoort: nrofrows = 4
			{
				attribute<string> label :  [ 'info ontbreekt', 'onderzoek', 'voorbereidend', 'uitvoeren'];
				attribute<string> name  := AsItemName(label), DialogType = "LabelText";

				container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
			}

			unit<uint32> Techniekstatus: nrofrows = 11
			{
				attribute<string> label :  [ 'definitief', 'geen keuze gemaakt', 'geen techniekkeuze, focus op isolatie',
					 'kansrijke optie', 'niet van toepassing', 'onbekend', 'onderzoekend',
					  'verkennend', 'voorkeursoptie', 'voorlopige keuze', 'voorsorterend'];
				attribute<string> name  := AsItemName(label), DialogType = "LabelText";

				container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
			}

			unit<uint32> Planstatus: nrofrows = 11
			{
				attribute<string> label :  [ 'afwachtend', 'concept', 'definitief', 'uitvoerend',
					 'kansrijke optie', 'onbekend', 'onderzoekend', 'orienterend',
					  'richtinggevend', 'verkennend', 'voorbereidend'];
				attribute<string> name  := AsItemName(label), DialogType = "LabelText";

				container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
			}

			unit<uint32> Docstatus: nrofrows = 5
			{
				attribute<string> label :  [ 'info ontbreekt', 'vastgesteld door raad', 'naar raad gestuurd', 'concept te inzage', 'vastgesteld door college'];
				attribute<string> name  := AsItemName(label), DialogType = "LabelText";

				container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
			}

			unit<uint32> Doctype: nrofrows = 4
			{
				attribute<string> label :  [ 'info ontbreekt', 'transitievisie', 'bijlage bij transitievisie', 'anders'];
				attribute<string> name  := AsItemName(label), DialogType = "LabelText";

				container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
			}

			unit<uint32> Isolatiegraad: nrofrows = 11
			{
				attribute<string> label :  [ 'onbekend', 'geen maatregelen', 'isolatie, geen specifiek niveau benoemd', 'standaard en streefwaarden', 
					'schillabel A+', 'Schillabel B+', 'Schillabel C+', 'Schillabel D+', 'Schillabel D/C (<1940) A/B (overig)'
					,'Schillabel D+ (wonen) B+ (util)','Doelstelling in kWh/m2 (vergelijkbaar Schillabel A/B)'];
				attribute<string> name  := AsItemName(label), DialogType = "LabelText";

				container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
			}

			unit<uint32> Installatie: nrofrows = 17
			{
				attribute<string> label :  [ 'onbekend', 'Hr', 'hWP', 'eWP', 
					'Wnet', 'hWP,Hr', 'hWP,eWP', 'hWP,eWP', 'eWP,Wnet'
					,'eWP,Hr','Wnet, Hr', 'Wnet, hWP', 'hWP,Wnet,Hr', 'eWP,Wnet,Hr', 'hWP,eWP,Hr', 'hWP,eWP,Wnet', 'hWP,eWP,Wnet,Hr'];
				attribute<string> name  := AsItemName(label), DialogType = "LabelText";

				attribute<bool> Hr   := strcount(label, 'Hr')   > 0;
				attribute<bool> hWP  := strcount(label, 'hWP')  > 0;
				attribute<bool> eWP  := strcount(label, 'eWP')  > 0;
				attribute<bool> Wnet := strcount(label, 'Wnet') > 0;

				container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
			}

			unit<uint32> Infrastructuur: nrofrows = 7
			{
				attribute<string> label :  [ 'onbekend', 'niet van toepassing', 'E', 'E,G', 'E,W', 'E,W,G', 'E,W,K'];
				attribute<string> name  := AsItemName(label), DialogType = "LabelText";

				attribute<bool> E := strcount(label, 'E') > 0;
				attribute<bool> G := strcount(label, 'G') > 0;
				attribute<bool> W := strcount(label, 'W') > 0;
				attribute<bool> K := strcount(label, 'K') > 0;

				container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
			}

			unit<uint32> Energiebron: nrofrows = 56
			{
				attribute<string> label :  [ 'aquathermie', 'aquathermie, asfalt', 'aquathermie, bestaand warmtenet', 'aquathermie, bestaand warmtenet, WKO', 
					'aquathermie, geothermie', 'aquathermie, geothermie, restwarmte', 'aquathermie, geothermie, WKO', 'aquathermie, geothermie, zon', 'aquathermie, hernieuwbaar gas'
					,'aquathermie, restwarmte','aquathermie, restwarmte, asfalt', 'aquathermie, restwarmte, geothermie', 'aquathermie, restwarmte, hernieuwbaar gas',
					'aquathermie, restwarmte, WKO, geothermie', 'aquathermie, restwarmte, zon', 'aquathermie, WKO', 'aquathermie, WKO, biomassa'
					, 'aquathermie, WKO, collectieve warmtepomp', 'aquathermie, WKO, geothermie', 'aquathermie, WKO, hernieuwbaar gas', 'aquathermie, WKO, restwarmte'
					, 'aquathermie, WKO, zon', 'aquathermie, zon', 'aquathermie, zon, asfalt', 'aquathermie, zon, collectieve warmtepomp', 'biomassa', 'biomassa, geothermie',
					 'biomassa, zon, hernieuwbaar gas', 'collectieve warmtepomp', 'diverse opties mogelijk (>3 genoemd)', 'geothermie', 'geothermie, collectieve warmtepomp',
					 'geothermie, hernieuwbaar gas', 'geothermie, restwarmte', 'geothermie, restwarmte, biomassa', 'geothermie, zon, collectieve warmtepomp', 'hernieuwbaar gas'
					 , 'hernieuwbaar gas, biomassa', 'hernieuwbaar gas, WKO', 'niet specifiek benoemd', 'niet van toepassing', 'Onbekend', 'restwarmte', 'restwarmte, biomassa',
					 'restwarmte, geothermie, collectieve warmtepomp', 'restwarmte, hernieuwbaar gas', 'restwarmte, WKO', 'restwarmte, WKO, collectieve warmtepomp',
					 'restwarmte, WKO, hernieuwbaar gas', 'restwarmte, zon', 'WKO', 'WKO, collectieve warmtepomp', 'WKO, zon', 'WKO, zon, hernieuwbaar gas', 'zon', 'zon, hernieuwbaar gas'];
				attribute<string> name  := AsItemName(label), DialogType = "LabelText";

				attribute<bool> aquathermie            := strcount(label, 'aquathermie')            > 0;
				attribute<bool> asfalt                 := strcount(label, 'asfalt')                 > 0;
				attribute<bool> bestaand_warmtenet     := strcount(label, 'bestaand warmtenet')     > 0;
				attribute<bool> WKO                    := strcount(label, 'WKO')                    > 0;
				attribute<bool> geothermie             := strcount(label, 'geothermie')             > 0;
				attribute<bool> restwarmte             := strcount(label, 'restwarmte')             > 0;
				attribute<bool> zon                    := strcount(label, 'zon')                    > 0;
				attribute<bool> hernieuwbaar_gas       := strcount(label, 'hernieuwbaar gas')       > 0;
				attribute<bool> biomassa               := strcount(label, 'biomassa')               > 0;
				attribute<bool> collectieve_warmtepomp := strcount(label, 'collectieve warmtepomp') > 0;

				container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
			}


		}
}